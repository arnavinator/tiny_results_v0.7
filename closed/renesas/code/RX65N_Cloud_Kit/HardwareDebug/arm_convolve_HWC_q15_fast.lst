   1                             		.file	"arm_convolve_HWC_q15_fast.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_convolve_HWC_q15_fast,"ax",@progbits
   5                             		.global	_arm_convolve_HWC_q15_fast
   7                             	_arm_convolve_HWC_q15_fast:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c"
   1:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** /*
   2:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
   4:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
   6:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  10:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  12:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  */
  18:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  19:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * Title:        arm_convolve_HWC_q15_fast.c
  22:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * Description:  Fast Q15 version of convolution
  23:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  24:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * $Date:        January 26, 2021
  25:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * $Revision:    V.1.0.2
  26:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  27:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * Target Processor:  Cortex-M cores
  28:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  29:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * -------------------------------------------------------------------- */
  30:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  31:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** #include "arm_nnfunctions.h"
  32:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** #include "arm_nnsupportfunctions.h"
  33:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  34:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** /**
  35:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *  @ingroup groupNN
  36:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  */
  37:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  38:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** /**
  39:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @addtogroup NNConv
  40:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @{
  41:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  */
  42:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  43:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** /**
  44:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @brief Fast Q15 convolution function
  45:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       Im_in       pointer to input tensor
  46:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       dim_im_in   input tensor dimention
  47:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       ch_im_in    number of input tensor channels
  48:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       wt          pointer to kernel weights
  49:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       ch_im_out   number of filters, i.e., output tensor channels
  50:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       dim_kernel  filter kernel size
  51:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       padding     padding sizes
  52:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       stride      convolution stride
  53:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       bias        pointer to bias
  54:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       bias_shift  amount of left-shift for bias
  55:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       out_shift   amount of right-shift for output
  56:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in,out]   Im_out      pointer to output tensor
  57:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in]       dim_im_out  output tensor dimension
  58:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in,out]   bufferA     pointer to buffer space for input
  59:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @param[in,out]   bufferB     pointer to buffer space for output
  60:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @return     The function returns either
  61:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  62:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  63:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * @details
  64:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  65:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * <b>Buffer size:</b>
  66:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * bufferA size: 2*ch_im_in*dim_kernel*dim_kernel
  68:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * bufferB size: 0
  70:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * <b>Input dimension constraints:</b>
  72:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  73:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * ch_im_in is multiple of 2
  74:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  75:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  * ch_im_out is multiple of 2
  76:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  *
  77:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****  */
  78:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  79:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** arm_status arm_convolve_HWC_q15_fast(const q15_t *Im_in,
  80:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t dim_im_in,
  81:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t ch_im_in,
  82:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const q15_t *wt,
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t ch_im_out,
  84:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t dim_kernel,
  85:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t padding,
  86:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t stride,
  87:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const q15_t *bias,
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t bias_shift,
  89:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t out_shift,
  90:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      q15_t *Im_out,
  91:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      const uint16_t dim_im_out,
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      q15_t *bufferA,
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                      q7_t *bufferB)
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** {
  10                             		.loc 1 94 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 72 00 64 FF             		add	#-156, r0
  15                             	.LCFI1:
  16                             		.loc 1 94 1 is_stmt 0
  17 0006 75 47 C0                		mov.L	#0xc0, r7
  18 0009 4B 07                   		add	r0, r7
  19 000b DC 75                   		mov.W	[r7], r5
  20 000d EF 18                   		mov.L	r1, r8
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     (void)bufferB;
  96:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** #if defined(ARM_MATH_DSP)
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     int16_t i_out_y, i_out_x, i_ker_y, i_ker_x;
  98:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  99:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     q15_t *pBuffer = bufferA;
 100:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     q15_t *im_buffer = bufferA;
 101:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     q15_t *pOut = Im_out;
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 103:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     if (ch_im_in % 2 != 0 || ch_im_out % 2 != 0)
 104:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     {
 105:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         /* check if the input dimension meets the constraints */
 106:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         return ARM_MATH_SIZE_MISMATCH;
 107:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     }
 108:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 109:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     /* Run the following code for Cortex-M4 and Cortex-M7 */
 110:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     /* This part implements the im2col function */
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 113:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     {
 114:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         {
 116:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_k
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             {
 118:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + d
 119:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 {
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 121:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     {
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         /* arm_fill_q15(0, pBuffer, ch_im_in); */
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         memset(pBuffer, 0, sizeof(q15_t) * ch_im_in);
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     }
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     else
 126:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     {
 127:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         /* arm_copy_q15((q15_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_i
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                          * ch_im_in); */
 129:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         memcpy(pBuffer,
 130:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                (q15_t *)Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in,
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                sizeof(q15_t) * ch_im_in);
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     }
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     pBuffer += ch_im_in;
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 }
 135:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             }
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 137:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             if (i_out_x & 0x1)
 138:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             {
 139:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 int i;
 140:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 /* initialize the matrix pointers for A */
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 const q15_t *pA = wt;
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 /* set up the second output pointers */
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 q15_t *pOut2 = pOut + ch_im_out;
 145:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 146:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 /* this loop over rows in A */
 147:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 for (i = 0; i < ch_im_out; i += 2)
 148:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 {
 149:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     /* setup pointers for B */
 150:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     const q15_t *pB = im_buffer;
 151:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     const q15_t *pB2 = pB + ch_im_in * dim_kernel * dim_kernel;
 152:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 153:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     /* aling the second pointer for A */
 154:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     const q15_t *pA2 = pA + ch_im_in * dim_kernel * dim_kernel;
 155:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 156:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     /* init the sum with bias */
 157:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     q31_t sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 158:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     q31_t sum2 = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 159:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     q31_t sum3 = ((q31_t)bias[i + 1] << bias_shift) + NN_ROUND(out_shift);
 160:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     q31_t sum4 = ((q31_t)bias[i + 1] << bias_shift) + NN_ROUND(out_shift);
 161:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 162:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     uint16_t colCnt = ch_im_in * dim_kernel * dim_kernel >> 1;
 163:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     /* accumulate over the vector */
 164:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     while (colCnt)
 165:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     {
 166:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q31_t inA1 = arm_nn_read_q15x2_ia(&pA);
 167:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q31_t inB1 = arm_nn_read_q15x2_ia(&pB);
 168:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q31_t inA2 = arm_nn_read_q15x2_ia(&pA2);
 169:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q31_t inB2 = arm_nn_read_q15x2_ia(&pB2);
 170:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum = __SMLAD(inA1, inB1, sum);
 172:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum2 = __SMLAD(inA1, inB2, sum2);
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum3 = __SMLAD(inA2, inB1, sum3);
 174:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum4 = __SMLAD(inA2, inB2, sum4);
 175:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         colCnt--;
 177:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     } /* while over colCnt */
 178:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     colCnt = ch_im_in * dim_kernel * dim_kernel & 0x1;
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     while (colCnt)
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     {
 181:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q15_t inA1 = *pA++;
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q15_t inB1 = *pB++;
 183:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q15_t inA2 = *pA2++;
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         q15_t inB2 = *pB2++;
 185:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 186:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum += inA1 * inB1;
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum2 += inA1 * inB2;
 188:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum3 += inA2 * inB1;
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         sum4 += inA2 * inB2;
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         colCnt--;
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     } /* while over colCnt */
 192:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     *pOut++ = (q15_t)__SSAT(sum >> out_shift, 16);
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     *pOut++ = (q15_t)__SSAT(sum3 >> out_shift, 16);
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     *pOut2++ = (q15_t)__SSAT(sum2 >> out_shift, 16);
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     *pOut2++ = (q15_t)__SSAT(sum4 >> out_shift, 16);
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 197:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     /* skip the row computed with A2 */
 198:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     pA += ch_im_in * dim_kernel * dim_kernel;
 199:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 } /* for over ch_im_out */
 200:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 201:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 pOut += ch_im_out;
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 /* counter reset */
 203:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 pBuffer = im_buffer;
 204:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             }
 205:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         }
 206:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     }
 207:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** #else
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     (void)bufferA;
 210:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
 211:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     int i, j, k, l, m, n;
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     int conv_out;
 213:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     int in_row, in_col;
 214:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 215:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     if (ch_im_in % 2 != 0 || ch_im_out % 2 != 0)
  21                             		.loc 1 215 27
  22 000f FF 5D 53                		or	r5, r3, r13
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     (void)bufferB;
  23                             		.loc 1 94 1
  24 0012 98 79                   		mov.W	2[r7], r1
  25                             	.LVL1:
  26 0014 98 F6                   		mov.W	4[r7], r6
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     (void)bufferB;
  27                             		.loc 1 95 5 is_stmt 1
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
  28                             		.loc 1 209 5
 211:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     int conv_out;
  29                             		.loc 1 211 5
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     int in_row, in_col;
  30                             		.loc 1 212 5
 213:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
  31                             		.loc 1 213 5
  32                             		.loc 1 215 5
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     (void)bufferB;
  33                             		.loc 1 94 1 is_stmt 0
  34 0016 DD 7A 03                		mov.W	6[r7], r10
  35 0019 E5 70 02 11             		mov.L	8[r7], 68[r0]
  36 001d DD 7C 06                		mov.W	12[r7], r12
  37 0020 DD 79 07                		mov.W	14[r7], r9
  38 0023 E5 70 04 1C             		mov.L	16[r7], 112[r0]
  39 0027 DD 7B 0A                		mov.W	20[r7], r11
  40                             		.loc 1 215 27
  41 002a 7C 0D                   		btst	#0, r13
  42 002c 3B CD 01                		bne	.L14
  43                             	.LVL2:
 216:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     {
 217:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         /* check if the input dimension meets the constraints */
 218:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         return ARM_MATH_SIZE_MISMATCH;
 219:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     }
 220:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 221:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     for (i = 0; i < ch_im_out; i++)
  44                             		.loc 1 221 19
  45 002f 5F 55                   		movu.W	r5, r5
  46 0031 A5 0D                   		mov.L	r5, 84[r0]
  47                             		.loc 1 221 5
  48 0033 61 05                   		cmp	#0, r5
  49 0035 3A 9E 01                		beq	.L13
 222:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     {
 223:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         for (j = 0; j < dim_im_out; j++)
 224:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         {
 225:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             for (k = 0; k < dim_im_out; k++)
 226:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             {
 227:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 conv_out = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
  50                             		.loc 1 227 61
  51 0038 5F 99                   		movu.W	r9, r9
  52 003a E7 09 0D                		mov.L	r9, 52[r0]
  53 003d 66 15                   		mov.L	#1, r5
  54 003f EF 57                   		mov.L	r5, r7
  55 0041 FD 62 97                		shll	r9, r7
 223:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         {
  56                             		.loc 1 223 23
  57 0044 5F BB                   		movu.W	r11, r11
  58 0046 E7 0B 0C                		mov.L	r11, 48[r0]
  59                             		.loc 1 227 61
  60 0049 FD 60 57                		shlr	r5, r7
  61 004c A4 07                   		mov.L	r7, 64[r0]
  62 004e 61 0B                   		cmp	#0, r11
  63 0050 3A 83 01                		beq	.L13
  64 0053 5F 67                   		movu.W	r6, r7
  65 0055 5F 29                   		movu.W	r2, r9
  66 0057 5F 11                   		movu.W	r1, r1
  67 0059 A2 89                   		mov.L	r1, 44[r0]
  68 005b 43 75                   		sub	r7, r5
  69 005d FF 32 97                		mul	r9, r7, r2
  70                             	.LVL3:
  71 0060 5F 33                   		movu.W	r3, r3
  72 0062 A1 03                   		mov.L	r3, 16[r0]
  73 0064 5F A1                   		movu.W	r10, r1
  74 0066 A2 09                   		mov.L	r1, 36[r0]
  75 0068 FF 2A 99                		add	r9, r9, r10
  76 006b AA 8B                   		mov.L	44[r0], r3
  77                             	.LVL4:
  78 006d EF 3B                   		mov.L	r3, r11
  79 006f 4F 33                   		mul	r3, r3
  80 0071 43 25                   		sub	r2, r5
  81 0073 A9 01                   		mov.L	16[r0], r1
  82 0075 4F 13                   		mul	r1, r3
  83 0077 AA 0E                   		mov.L	36[r0], r6
  84 0079 4F A6                   		mul	r10, r6
  85 007b 4F 15                   		mul	r1, r5
  86 007d AA 0A                   		mov.L	36[r0], r2
  87 007f 4F 12                   		mul	r1, r2
  88 0081 4F B1                   		mul	r11, r1
  89 0083 4B 33                   		add	r3, r3
  90 0085 A7 0B                   		mov.L	r3, 116[r0]
  91 0087 A3 8C                   		mov.L	r4, 60[r0]
  92 0089 A9 03                   		mov.L	16[r0], r3
  93 008b 4F 63                   		mul	r6, r3
  94 008d A6 8B                   		mov.L	r3, 108[r0]
  95 008f FC 07 74                		neg	r7, r4
  96                             	.LVL5:
  97 0092 A6 0C                   		mov.L	r4, 100[r0]
  98 0094 4B 55                   		add	r5, r5
  99 0096 A7 85                   		mov.L	r5, 120[r0]
 100 0098 AD 0D                   		mov.L	84[r0], r5
 101 009a 4B 55                   		add	r5, r5
 102 009c A4 85                   		mov.L	r5, 72[r0]
 103 009e 4B 22                   		add	r2, r2
 104 00a0 A4 8A                   		mov.L	r2, 76[r0]
 105 00a2 ED 0B 04                		mov.L	16[r0], r11
 106 00a5 4F AB                   		mul	r10, r11
 107 00a7 E7 0B 02                		mov.L	r11, 8[r0]
 108 00aa 4B 11                   		add	r1, r1
 109 00ac A0 89                   		mov.L	r1, 12[r0]
 110 00ae ED 0D 04                		mov.L	16[r0], r13
 111 00b1 4B DD                   		add	r13, r13
 112 00b3 A9 01                   		mov.L	16[r0], r1
 113 00b5 75 11 FE                		mul	#-2, r1
 114 00b8 A2 01                   		mov.L	r1, 32[r0]
 221:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     {
 115                             		.loc 1 221 12
 116 00ba 3E 0A 00                		mov.L	#0, 40[r0]
 117 00bd 5F CC                   		movu.W	r12, r12
 118 00bf E7 0C 14                		mov.L	r12, 80[r0]
 119 00c2 AA 8A                   		mov.L	44[r0], r2
 120 00c4 43 72                   		sub	r7, r2
 121 00c6 A6 82                   		mov.L	r2, 104[r0]
 122 00c8 EF 8E                   		mov.L	r8, r14
 123 00ca EF DF                   		mov.L	r13, r15
 124 00cc EF 9D                   		mov.L	r9, r13
 125                             	.LVL6:
 126                             		.balign 8,3,1
 127                             	.L5:
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     (void)bufferB;
 128                             		.loc 1 94 1
 129 00ce E5 00 19 0E             		mov.L	100[r0], 56[r0]
 130 00d2 E5 00 1A 01             		mov.L	104[r0], 4[r0]
 131 00d6 E5 00 1E 18             		mov.L	120[r0], 96[r0]
 132 00da 3E 87 00                		mov.L	#0, 92[r0]
 223:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         {
 133                             		.loc 1 223 16
 134 00dd 3E 86 00                		mov.L	#0, 88[r0]
 135                             	.LVL7:
 136                             		.balign 8,3,1
 137                             	.L12:
 138 00e0 AD 8F                   		mov.L	92[r0], r7
 139 00e2 AD 0B                   		mov.L	84[r0], r3
 140 00e4 4F 37                   		mul	r3, r7
 141 00e6 E5 00 18 07             		mov.L	96[r0], 28[r0]
 142 00ea 06 89 07 0A             		add	40[r0], r7
 143 00ee E1 00 19                		mov.L	100[r0], [r0]
 144 00f1 4B 77                   		add	r7, r7
 145 00f3 AE 82                   		mov.L	104[r0], r2
 146 00f5 06 89 07 1C             		add	112[r0], r7
 147 00f9 A1 87                   		mov.L	r7, 24[r0]
 225:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             {
 148                             		.loc 1 225 20
 149 00fb 3E 05 00                		mov.L	#0, 20[r0]
 150                             		.balign 8,3,1
 151                             	.L11:
 152                             	.LVL8:
 153                             		.loc 1 227 17 is_stmt 1
 154                             		.loc 1 227 29 is_stmt 0
 155 00fe AA 84                   		mov.L	40[r0], r4
 156 0100 AC 0D                   		mov.L	68[r0], r5
 157 0102 FE 54 51                		mov.W	[r4,r5], r1
 158                             		.loc 1 227 44
 159 0105 AD 07                   		mov.L	80[r0], r7
 160 0107 FD 62 71                		shll	r7, r1
 161                             		.loc 1 227 59
 162 010a 06 89 01 10             		add	64[r0], r1
 163                             	.LVL9:
 228:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 for (m = 0; m < dim_kernel; m++)
 164                             		.loc 1 228 17 is_stmt 1
 165 010e ED 09 0B                		mov.L	44[r0], r9
 166 0111 61 09                   		cmp	#0, r9
 167 0113 20 40                   		beq	.L6
 168 0115 ED 08 0F                		mov.L	60[r0], r8
 169 0118 AB 85                   		mov.L	56[r0], r5
 170 011a ED 0C 07                		mov.L	28[r0], r12
 171                             	.LVL10:
 172                             		.balign 8,3,2
 173                             	.L10:
 174 011d FF 09 E8                		sub	r14, r8, r9
 175 0120 FF 2A EC                		add	r14, r12, r10
 176 0123 43 C9                   		sub	r12, r9
 177 0125 EC 07                   		mov.L	[r0], r7
 178 0127 03                      		.balign 8,3,1
 179                             	.L9:
 180                             	.LVL11:
 229:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 {
 230:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     for (n = 0; n < dim_kernel; n++)
 231:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     {
 232:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         in_row = stride * j + m - padding;
 181                             		.loc 1 232 25
 233:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         in_col = stride * k + n - padding;
 182                             		.loc 1 233 25
 234:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         if (in_row >= 0 && in_col >= 0 && in_row < dim_im_in && in_col < dim_im_in)
 183                             		.loc 1 234 25
 184                             		.loc 1 234 28 is_stmt 0
 185 0128 61 05                   		cmp	#0, r5
 186 012a 29 11                   		blt	.L7
 187                             		.loc 1 234 41 discriminator 1
 188 012c 61 07                   		cmp	#0, r7
 189 012e 29 0D                   		blt	.L7
 190                             		.loc 1 234 56 discriminator 2
 191 0130 47 D5                   		cmp	r13, r5
 192 0132 28 09                   		bge	.L7
 193                             		.loc 1 234 78 discriminator 3
 194 0134 47 D7                   		cmp	r13, r7
 195 0136 28 05 38 A0 00          		blt	.L32
 196                             		.balign 8,3,1
 197                             	.L7:
 198                             	.LVL12:
 199 013b 62 17                   		add	#1, r7
 200                             	.LVL13:
 201 013d 4B FA                   		add	r15, r10
 230:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     {
 202                             		.loc 1 230 21 discriminator 2
 203 013f 47 72                   		cmp	r7, r2
 204 0141 21 E7                   		bne	.L9
 205                             	.LVL14:
 206 0143 62 15                   		add	#1, r5
 207                             	.LVL15:
 208 0145 06 89 0C 02             		add	8[r0], r12
 209 0149 06 89 08 03             		add	12[r0], r8
 228:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 {
 210                             		.loc 1 228 17 discriminator 2
 211 014d A8 0B                   		mov.L	4[r0], r3
 212 014f 47 53                   		cmp	r5, r3
 213 0151 21 CC                   		bne	.L10
 214                             	.LVL16:
 215                             		.balign 8,3,1
 216                             	.L6:
 235:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         {
 236:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                             for (l = 0; l < ch_im_in; l++)
 237:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                             {
 238:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                 conv_out += Im_in[(in_row * dim_im_in + in_col) * ch_im_in + l] *
 239:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                     wt[i * ch_im_in * dim_kernel * dim_kernel + (m * dim_kernel + n
 240:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                             }
 241:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                         }
 242:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                     }
 243:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 }
 244:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                 Im_out[i + (j * dim_im_out + k) * ch_im_out] = (q15_t)__SSAT((conv_out >> out_shift
 217                             		.loc 1 244 17 is_stmt 1 discriminator 2
 218                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @version  V5.4.1
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @date     27. May 2021
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /*
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            in the used linker script.
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   typedef struct {
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t const* src;
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t* dest;
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t  wlen;
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   } __copy_table_t;
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   typedef struct {
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t* dest;
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t  wlen;
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   } __zero_table_t;
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     }
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     }
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   _start();
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   Access to dedicated instructions
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   @{
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** */
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   No Operation
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Wait For Event
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Send Event
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            after the instruction has been completed.
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   int16_t result;
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Rotated value
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   op2 %= 32U;
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   if (op2 == 0U)
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     return op1;
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Breakpoint
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     result <<= 1U;
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     result |= value & 1U;
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     s--;
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Count leading zeros
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             number of leading zeros in value
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      is non-zero".
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      single CLZ instruction.
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    */
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   if (value == 0U)
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     return 32U;
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return __builtin_clz(value);
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          0  Function succeeded
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          1  Function failed
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    uint32_t result;
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          0  Function succeeded
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          1  Function failed
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    uint32_t result;
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          0  Function succeeded
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          1  Function failed
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    uint32_t result;
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Signed Saturate
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Saturates a signed value.
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             Saturated value
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __extension__ \
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** ({                          \
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __RES; \
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  })
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             Saturated value
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __extension__ \
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** ({                          \
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __RES; \
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  })
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Rotated value
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return(result);
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Signed Saturate
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Saturates a signed value.
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             Saturated value
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 219                             		.loc 2 709 3 discriminator 2
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 220                             		.loc 2 711 5 discriminator 2
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     const int32_t min = -1 - max ;
 221                             		.loc 2 712 5 discriminator 2
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     if (val > max)
 222                             		.loc 2 713 5 discriminator 2
 223                             		.loc 1 244 88 is_stmt 0 discriminator 2
 224 0153 AB 0C                   		mov.L	52[r0], r4
 225 0155 FD 61 41                		shar	r4, r1
 226                             	.LVL17:
 225:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             {
 227                             		.loc 1 225 42 discriminator 2
 228 0158 A9 0D                   		mov.L	20[r0], r5
 229 015a 62 15                   		add	#1, r5
 230 015c A1 0D                   		mov.L	r5, 20[r0]
 231                             	.LVL18:
 232                             		.loc 1 244 64 discriminator 2
 233 015e FD 78 41 00 80          		max	#-32768, r1
 234 0163 06 89 02 09             		add	36[r0], r2
 235 0167 FD 78 51 FF 7F          		min	#0x7fff, r1
 236 016c EC 07                   		mov.L	[r0], r7
 237 016e 06 89 07 09             		add	36[r0], r7
 238 0172 E3 07                   		mov.L	r7, [r0]
 239 0174 ED 09 06                		mov.L	24[r0], r9
 240 0177 D3 91                   		mov.W	r1, [r9]
 241 0179 ED 0A 07                		mov.L	28[r0], r10
 242 017c 06 89 0A 13             		add	76[r0], r10
 243 0180 E7 0A 07                		mov.L	r10, 28[r0]
 244 0183 06 89 09 12             		add	72[r0], r9
 245 0187 E7 09 06                		mov.L	r9, 24[r0]
 225:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             {
 246                             		.loc 1 225 13 discriminator 2
 247 018a ED 0B 0C                		mov.L	48[r0], r11
 248 018d 47 B5                   		cmp	r11, r5
 249 018f 3B 6F FF                		bne	.L11
 223:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         {
 250                             		.loc 1 223 38 discriminator 2
 251 0192 AD 81                   		mov.L	88[r0], r1
 252 0194 62 11                   		add	#1, r1
 253 0196 A5 81                   		mov.L	r1, 88[r0]
 254                             	.LVL19:
 255 0198 AD 8A                   		mov.L	92[r0], r2
 256 019a 4B B2                   		add	r11, r2
 257 019c A5 8A                   		mov.L	r2, 92[r0]
 258 019e AE 03                   		mov.L	96[r0], r3
 259 01a0 06 89 03 1B             		add	108[r0], r3
 260 01a4 A6 03                   		mov.L	r3, 96[r0]
 261 01a6 A8 0C                   		mov.L	4[r0], r4
 262 01a8 06 89 04 09             		add	36[r0], r4
 263 01ac A0 0C                   		mov.L	r4, 4[r0]
 264 01ae AB 85                   		mov.L	56[r0], r5
 265                             	.LVL20:
 266 01b0 06 89 05 09             		add	36[r0], r5
 267 01b4 A3 85                   		mov.L	r5, 56[r0]
 223:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         {
 268                             		.loc 1 223 9 discriminator 2
 269 01b6 47 B1                   		cmp	r11, r1
 270 01b8 3B 28 FF                		bne	.L12
 221:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     {
 271                             		.loc 1 221 33
 272 01bb AA 87                   		mov.L	40[r0], r7
 273 01bd 62 17                   		add	#1, r7
 274 01bf A2 87                   		mov.L	r7, 40[r0]
 275                             	.LVL21:
 276 01c1 ED 09 0F                		mov.L	60[r0], r9
 277 01c4 06 89 09 1D             		add	116[r0], r9
 278 01c8 E7 09 0F                		mov.L	r9, 60[r0]
 221:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     {
 279                             		.loc 1 221 5
 280 01cb ED 0A 15                		mov.L	84[r0], r10
 281 01ce 47 7A                   		cmp	r7, r10
 282 01d0 3B FE FE                		bne	.L5
 283                             	.LVL22:
 284                             		.balign 8,3,1
 285                             	.L13:
 245:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****             }
 246:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****         }
 247:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     }
 248:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 249:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** #endif /* ARM_MATH_DSP */
 250:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** 
 251:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     /* Return to application */
 252:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     return ARM_MATH_SUCCESS;
 286                             		.loc 1 252 12
 287 01d3 66 01                   		mov.L	#0, r1
 253:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c **** }
 288                             		.loc 1 253 1
 289 01d5 3F 6D 2F                		rtsd	#188, r6-r13
 290                             	.LVL23:
 291                             	.L32:
 236:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                             {
 292                             		.loc 1 236 29
 293 01d8 ED 0B 04                		mov.L	16[r0], r11
 294 01db 61 0B                   		cmp	#0, r11
 295 01dd 3A 5E FF                		beq	.L7
 296 01e0 AA 03                   		mov.L	32[r0], r3
 297 01e2 4B A3                   		add	r10, r3
 298 01e4 FF 26 A9                		add	r10, r9, r6
 299                             	.LVL24:
 300 01e7 03                      		.balign 8,3,5
 301                             	.L8:
 238:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                     wt[i * ch_im_in * dim_kernel * dim_kernel + (m * dim_kernel + n
 302                             		.loc 1 238 33 is_stmt 1 discriminator 3
 238:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                     wt[i * ch_im_in * dim_kernel * dim_kernel + (m * dim_kernel + n
 303                             		.loc 1 238 50 is_stmt 0 discriminator 3
 304 01e8 FD 29 34                		mov.W	[r3+], r4
 239:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                             }
 305                             		.loc 1 239 39 discriminator 3
 306 01eb FD 29 6B                		mov.W	[r6+], r11
 238:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                     wt[i * ch_im_in * dim_kernel * dim_kernel + (m * dim_kernel + n
 307                             		.loc 1 238 97 discriminator 3
 308 01ee 4F B4                   		mul	r11, r4
 238:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                                     wt[i * ch_im_in * dim_kernel * dim_kernel + (m * dim_kernel + n
 309                             		.loc 1 238 42 discriminator 3
 310 01f0 4B 41                   		add	r4, r1
 311                             	.LVL25:
 236:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****                             {
 312                             		.loc 1 236 29 discriminator 3
 313 01f2 47 3A                   		cmp	r3, r10
 314 01f4 21 F4                   		bne	.L8
 315 01f6 38 45 FF                		bra	.L7
 316                             	.LVL26:
 317                             	.L14:
 218:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_HWC_q15_fast.c ****     }
 318                             		.loc 1 218 16
 319 01f9 FB 16 FD                		mov.L	#-3, r1
 320                             		.loc 1 253 1
 321 01fc 3F 6D 2F                		rtsd	#188, r6-r13
 322                             	.LFE82:
 374                             	.Letext0:
 375                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 376                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 377                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 378                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 379                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 380                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 381                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 382                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 383                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
