   1                             		.file	"arm_max_pool_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_max_pool_s8,"ax",@progbits
   5                             		.global	_arm_max_pool_s8
   7                             	_arm_max_pool_s8:
   8                             	.LFB84:
   9                             		.file 1 "../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c"
   1:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** /*
   2:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Copyright (C) 2010-2020 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
   4:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
   6:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
  10:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
  12:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  */
  18:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  19:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Title:        arm_max_pool_s8.c
  22:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Description:  Pooling function implementations
  23:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
  24:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * $Date:        19. Februari 2021
  25:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * $Revision:    V.2.0.2
  26:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
  27:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Target Processor:  Cortex-M CPUs
  28:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
  29:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * -------------------------------------------------------------------- */
  30:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  31:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #include "arm_nnfunctions.h"
  32:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #include "arm_nnsupportfunctions.h"
  33:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  34:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
  35:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** {
  36:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #if defined(ARM_MATH_MVEI)
  37:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     int32_t loop_count = (length + 15) / 16;
  38:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     for (int i = 0; i < loop_count; i++)
  39:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
  40:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         mve_pred16_t p = vctp8q((uint32_t)length);
  41:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         const int8x16_t op_1 = vldrbq_z_s8(base, p);
  42:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         const int8x16_t op_2 = vldrbq_z_s8(target, p);
  43:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         const int8x16_t max = vmaxq_m_s8(vuninitializedq_s8(), op_1, op_2, p);
  44:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         vstrbq_p_s8(base, max, p);
  45:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         base += 16;
  46:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         target += 16;
  47:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         length -= 16;
  48:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
  49:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #else
  50:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     q7_t *dst = base;
  51:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const q7_t *src = target;
  52:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     union arm_nnword ref_max;
  53:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     union arm_nnword comp_max;
  54:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     int32_t cnt = length >> 2;
  55:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  56:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
  57:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
  58:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         ref_max.word = arm_nn_read_q7x4(dst);
  59:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp_max.word = arm_nn_read_q7x4_ia(&src);
  60:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  61:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         if (comp_max.bytes[0] > ref_max.bytes[0])
  62:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
  63:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             ref_max.bytes[0] = comp_max.bytes[0];
  64:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
  65:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         if (comp_max.bytes[1] > ref_max.bytes[1])
  66:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
  67:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             ref_max.bytes[1] = comp_max.bytes[1];
  68:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
  69:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         if (comp_max.bytes[2] > ref_max.bytes[2])
  70:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
  71:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             ref_max.bytes[2] = comp_max.bytes[2];
  72:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
  73:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         if (comp_max.bytes[3] > ref_max.bytes[3])
  74:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
  75:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             ref_max.bytes[3] = comp_max.bytes[3];
  76:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
  77:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  78:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         write_q7x4_ia(&dst, ref_max.word);
  79:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  80:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
  81:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
  82:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  83:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     cnt = length & 0x3;
  84:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
  85:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         if (*src > *dst)
  87:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
  88:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             *dst = *src;
  89:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
  90:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         dst++;
  91:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         src++;
  92:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
  93:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
  94:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #endif
  95:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** }
  96:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  97:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max
  98:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** {
  99:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #if defined(ARM_MATH_MVEI)
 100:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     int32_t loop_count = (length + 15) / 16;
 101:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     for (int i = 0; i < loop_count; i++)
 102:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 103:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         mve_pred16_t p = vctp8q((uint32_t)length);
 104:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         length -= 16;
 105:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         const int8x16_t src = vldrbq_z_s8(source, p);
 106:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         const int8x16_t predicated_min = vdupq_m_n_s8(vuninitializedq_s8(), (int8_t)act_min, p);
 107:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         const int8x16_t predicated_max = vdupq_m_n_s8(vuninitializedq_s8(), (int8_t)act_max, p);
 108:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         int8x16_t res = vmaxq_m_s8(vuninitializedq_s8(), src, predicated_min, p);
 109:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         res = vminq_m_s8(vuninitializedq_s8(), res, predicated_max, p);
 110:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         vstrbq_p_s8(source, res, p);
 111:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         source += 16;
 112:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 113:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #else
 114:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     union arm_nnword in;
 115:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     int32_t cnt = length >> 2;
 116:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 117:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
 118:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 119:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.word = arm_nn_read_q7x4(source);
 120:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 121:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[0] = MAX(in.bytes[0], act_min);
 122:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[0] = MIN(in.bytes[0], act_max);
 123:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MAX(in.bytes[1], act_min);
 124:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MIN(in.bytes[1], act_max);
 125:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MAX(in.bytes[2], act_min);
 126:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MIN(in.bytes[2], act_max);
 127:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MAX(in.bytes[3], act_min);
 128:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MIN(in.bytes[3], act_max);
 129:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 130:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         write_q7x4_ia(&source, in.word);
 131:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 132:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 133:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 134:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     cnt = length & 0x3;
 135:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
 136:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 137:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         int32_t comp = *source;
 138:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MAX(comp, act_min);
 139:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MIN(comp, act_max);
 140:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         *source++ = (int8_t)comp;
 141:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 142:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 143:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** #endif
 144:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** }
 145:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 146:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** /**
 147:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *  @ingroup groupNN
 148:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  */
 149:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 150:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** /**
 151:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * @addtogroup Pooling
 152:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * @{
 153:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  */
 154:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 155:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** /*
 156:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Optimized s8 max pooling function
 157:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
 158:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  * Refer to header file for details.
 159:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  *
 160:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****  */
 161:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 162:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** arm_status arm_max_pool_s8(const cmsis_nn_context *ctx,
 163:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                            const cmsis_nn_pool_params *pool_params,
 164:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                            const cmsis_nn_dims *input_dims,
 165:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                            const q7_t *src,
 166:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                            const cmsis_nn_dims *filter_dims,
 167:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                            const cmsis_nn_dims *output_dims,
 168:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                            q7_t *dst)
 169:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** {
  10                             		.loc 1 169 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 72 00 50 FF             		add	#-176, r0
  15                             	.LCFI1:
 170:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t input_y = input_dims->h;
  16                             		.loc 1 170 5
 169:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t input_y = input_dims->h;
  17                             		.loc 1 169 1 is_stmt 0
  18 0006 75 47 D4                		mov.L	#0xd4, r7
  19 0009 4B 07                   		add	r0, r7
  20 000b A8 79                   		mov.L	4[r7], r1
  21                             	.LVL1:
  22 000d EC 75                   		mov.L	[r7], r5
 171:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t input_x = input_dims->w;
 172:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t output_y = output_dims->h;
 173:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t output_x = output_dims->w;
 174:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t stride_y = pool_params->stride.h;
 175:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t stride_x = pool_params->stride.w;
 176:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t kernel_y = filter_dims->h;
 177:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t kernel_x = filter_dims->w;
 178:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t pad_y = pool_params->padding.h;
  23                             		.loc 1 178 19
  24 000f ED 2A 03                		mov.L	12[r2], r10
 172:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t output_x = output_dims->w;
  25                             		.loc 1 172 19
  26 0012 E5 10 01 20             		mov.L	4[r1], 128[r0]
 169:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t input_y = input_dims->h;
  27                             		.loc 1 169 1
  28 0016 A3 8C                   		mov.L	r4, 60[r0]
  29 0018 E5 70 02 1E             		mov.L	8[r7], 120[r0]
 170:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t input_x = input_dims->w;
  30                             		.loc 1 170 19
  31 001c A8 3F                   		mov.L	4[r3], r7
  32                             	.LVL2:
 171:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t input_x = input_dims->w;
  33                             		.loc 1 171 5 is_stmt 1
 171:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t input_x = input_dims->w;
  34                             		.loc 1 171 19 is_stmt 0
  35 001e E5 30 02 1F             		mov.L	8[r3], 124[r0]
  36                             	.LVL3:
 172:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t output_x = output_dims->w;
  37                             		.loc 1 172 5 is_stmt 1
 173:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t stride_y = pool_params->stride.h;
  38                             		.loc 1 173 5
 173:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t stride_y = pool_params->stride.h;
  39                             		.loc 1 173 19 is_stmt 0
  40 0022 E5 10 02 17             		mov.L	8[r1], 92[r0]
  41                             	.LVL4:
 174:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t stride_x = pool_params->stride.w;
  42                             		.loc 1 174 5 is_stmt 1
 174:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t stride_x = pool_params->stride.w;
  43                             		.loc 1 174 19 is_stmt 0
  44 0026 E5 20 01 21             		mov.L	4[r2], 132[r0]
  45                             	.LVL5:
 175:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t kernel_y = filter_dims->h;
  46                             		.loc 1 175 5 is_stmt 1
 175:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t kernel_y = filter_dims->h;
  47                             		.loc 1 175 19 is_stmt 0
  48 002a E4 20 13                		mov.L	[r2], 76[r0]
  49                             	.LVL6:
 176:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t kernel_x = filter_dims->w;
  50                             		.loc 1 176 5 is_stmt 1
 176:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t kernel_x = filter_dims->w;
  51                             		.loc 1 176 19 is_stmt 0
  52 002d E5 50 01 26             		mov.L	4[r5], 152[r0]
  53                             	.LVL7:
 177:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t pad_y = pool_params->padding.h;
  54                             		.loc 1 177 5 is_stmt 1
 177:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t pad_y = pool_params->padding.h;
  55                             		.loc 1 177 19 is_stmt 0
  56 0031 E5 50 02 18             		mov.L	8[r5], 96[r0]
  57                             	.LVL8:
  58                             		.loc 1 178 5 is_stmt 1
 179:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t pad_x = pool_params->padding.w;
  59                             		.loc 1 179 5
  60                             		.loc 1 179 19 is_stmt 0
  61 0035 E5 20 02 22             		mov.L	8[r2], 136[r0]
  62                             	.LVL9:
 180:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t act_min = pool_params->activation.min;
  63                             		.loc 1 180 5 is_stmt 1
  64                             		.loc 1 180 19 is_stmt 0
  65 0039 E5 20 04 1A             		mov.L	16[r2], 104[r0]
  66                             	.LVL10:
 181:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t act_max = pool_params->activation.max;
  67                             		.loc 1 181 5 is_stmt 1
  68                             		.loc 1 181 19 is_stmt 0
  69 003d E5 20 05 1B             		mov.L	20[r2], 108[r0]
  70                             	.LVL11:
 182:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const int32_t channel_in = input_dims->c;
  71                             		.loc 1 182 5 is_stmt 1
  72                             		.loc 1 182 19 is_stmt 0
  73 0041 E1 30 03                		mov.L	12[r3], [r0]
  74                             	.LVL12:
 183:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     (void)ctx;
  75                             		.loc 1 183 5 is_stmt 1
 184:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     q7_t *dst_base = dst;
  76                             		.loc 1 184 5
 185:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 186:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
  77                             		.loc 1 186 5
  78                             	.LBB34:
  79                             		.loc 1 186 10
  80                             		.loc 1 186 23 is_stmt 0
  81 0044 FC 07 A4                		neg	r10, r4
  82                             	.LVL13:
  83 0047 A7 04                   		mov.L	r4, 112[r0]
  84                             	.LVL14:
  85                             		.loc 1 186 5
  86 0049 ED 05 20                		mov.L	128[r0], r5
  87                             	.LVL15:
  88 004c 61 05                   		cmp	#0, r5
  89 004e 2A 05 38 69 02          		ble	.L27
  90                             	.LBB35:
  91                             	.LBB36:
  92                             	.LBB37:
  93                             	.LBB38:
  94                             	.LBB39:
  95                             	.LBB40:
  96                             	.LBB41:
  54:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
  97                             		.loc 1 54 13
  98 0053 EC 04                   		mov.L	[r0], r4
  99                             	.LVL16:
 100 0055 6A 24                   		shar	#2, r4
 101 0057 A3 04                   		mov.L	r4, 48[r0]
  83:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
 102                             		.loc 1 83 9
 103 0059 EC 05                   		mov.L	[r0], r5
 104 005b 64 35                   		and #3, r5
 105 005d A3 0D                   		mov.L	r5, 52[r0]
 106 005f ED 04 22                		mov.L	136[r0], r4
 107 0062 7E 14                   		neg	r4
 108 0064 E7 04 28                		mov.L	r4, 160[r0]
 109 0067 AD 8D                   		mov.L	92[r0], r5
 110 0069 61 05                   		cmp	#0, r5
 111 006b 2A 05 38 4C 02          		ble	.L27
 112 0070 E7 0A 1D                		mov.L	r10, 116[r0]
 113 0073 ED 0A 0C                		mov.L	48[r0], r10
 114                             	.LVL17:
 115 0076 6C 2A                   		shll	#2, r10
 116 0078 E7 0A 10                		mov.L	r10, 64[r0]
 117 007b 06 89 07 1D             		add	116[r0], r7
 118                             	.LVL18:
 119 007f E7 07 25                		mov.L	r7, 148[r0]
 120 0082 EC 04                   		mov.L	[r0], r4
 121 0084 4F 45                   		mul	r4, r5
 122 0086 E7 05 27                		mov.L	r5, 156[r0]
 123 0089 AF 85                   		mov.L	120[r0], r5
 124 008b 4B A5                   		add	r10, r5
 125 008d E7 05 24                		mov.L	r5, 144[r0]
 126 0090 AB 07                   		mov.L	48[r0], r7
 127 0092 75 17 FC                		mul	#-4, r7
 128 0095 A6 0F                   		mov.L	r7, 100[r0]
 129 0097 ED 0A 1F                		mov.L	124[r0], r10
 130 009a 4F 4A                   		mul	r4, r10
 131 009c E7 0A 12                		mov.L	r10, 72[r0]
 132                             	.LBE41:
 133                             	.LBE40:
 134                             	.LBE39:
 135                             	.LBE38:
 136                             	.LBE37:
 137                             	.LBE36:
 138                             	.LBE35:
 139                             		.loc 1 186 14
 140 009f F9 06 23 00             		mov.L	#0, 140[r0]
 141                             	.LBB72:
 142                             	.LBB69:
 143                             	.LBB67:
 144                             	.LBB63:
 145                             	.LBB56:
 146                             	.LBB54:
 147                             	.LBB52:
  92:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 148                             		.loc 1 92 12
 149 00a3 AB 0C                   		mov.L	52[r0], r4
 150 00a5 60 14                   		sub	#1, r4
 151 00a7 A2 0C                   		mov.L	r4, 36[r0]
 152                             	.LVL19:
 153                             		.balign 8,3,1
 154                             	.L26:
 155                             	.LBE52:
 156                             	.LBE54:
 157                             	.LBE56:
 158                             	.LBE63:
 159                             	.LBE67:
 160                             	.LBE69:
 161                             	.LBE72:
 187:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 188:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 162                             		.loc 1 188 9 is_stmt 1
 163                             	.LBB73:
 164                             		.loc 1 188 14
 165 00a9 AF 0D                   		mov.L	116[r0], r5
 166 00ab AF 07                   		mov.L	112[r0], r7
 167 00ad 61 07                   		cmp	#0, r7
 168 00af 2B 04                   		ble 1f
 169 00b1 66 05                   		mov #0, r5
 170                             	1:
 171 00b3 A2 8D                   		mov.L	r5, 44[r0]
 172                             	.LBB70:
 189:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 190:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
 191:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             const int32_t ker_y_start = MAX(0, -base_idx_y);
 192:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             const int32_t ker_x_start = MAX(0, -base_idx_x);
 193:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 194:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<w
 195:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 173                             		.loc 1 195 27 is_stmt 0
 174 00b5 ED 0A 25                		mov.L	148[r0], r10
 175 00b8 ED 04 26                		mov.L	152[r0], r4
 176 00bb FC 17 4A                		min	r4, r10
 177 00be E7 0A 11                		mov.L	r10, 68[r0]
 178 00c1 4B 57                   		add	r5, r7
 179 00c3 E5 00 22 16             		mov.L	136[r0], 88[r0]
 180 00c7 AF 8D                   		mov.L	124[r0], r5
 181 00c9 06 89 05 22             		add	136[r0], r5
 182 00cd A5 0D                   		mov.L	r5, 84[r0]
 183 00cf ED 0A 1F                		mov.L	124[r0], r10
 184 00d2 4F 7A                   		mul	r7, r10
 185 00d4 E7 0A 0E                		mov.L	r10, 56[r0]
 186 00d7 E5 00 24 01             		mov.L	144[r0], 4[r0]
 187                             	.LBE70:
 188:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 188                             		.loc 1 188 27
 189 00db E5 00 28 0A             		mov.L	160[r0], 40[r0]
 188:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 190                             		.loc 1 188 18
 191 00df 3E 84 00                		mov.L	#0, 80[r0]
 192                             	.LVL20:
 193                             		.balign 8,3,1
 194                             	.L25:
 195                             	.LBB71:
 192:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 196                             		.loc 1 192 41
 197 00e2 AD 84                   		mov.L	88[r0], r4
 198 00e4 AA 85                   		mov.L	40[r0], r5
 199 00e6 61 05                   		cmp	#0, r5
 200 00e8 2B 04                   		ble 1f
 201 00ea 66 04                   		mov #0, r4
 202                             	1:
 203 00ec A0 84                   		mov.L	r4, 8[r0]
 196:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 204                             		.loc 1 196 27
 205 00ee AD 0F                   		mov.L	84[r0], r7
 206 00f0 ED 0A 18                		mov.L	96[r0], r10
 207 00f3 FC 17 A7                		min	r10, r7
 208 00f6 A1 07                   		mov.L	r7, 16[r0]
 209 00f8 AE 0C                   		mov.L	100[r0], r4
 210 00fa 06 89 04 01             		add	4[r0], r4
 211 00fe A0 8C                   		mov.L	r4, 12[r0]
 212                             	.LVL21:
 191:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             const int32_t ker_x_start = MAX(0, -base_idx_x);
 213                             		.loc 1 191 13 is_stmt 1
 192:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 214                             		.loc 1 192 13
 195:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 215                             		.loc 1 195 13
 216                             		.loc 1 196 13
 197:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 198:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             int count = 0;
 217                             		.loc 1 198 13
 199:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 200:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 218                             		.loc 1 200 13
 219                             	.LBB68:
 220                             		.loc 1 200 18
 221                             		.loc 1 200 13 is_stmt 0
 222 0100 AA 8D                   		mov.L	44[r0], r5
 223                             	.LVL22:
 224 0102 AC 0F                   		mov.L	68[r0], r7
 225                             	.LVL23:
 226 0104 47 75                   		cmp	r7, r5
 227 0106 29 05 38 49 01          		bge	.L7
 228 010b ED 0A 02                		mov.L	8[r0], r10
 229 010e A9 04                   		mov.L	16[r0], r4
 230                             	.LVL24:
 231 0110 47 4A                   		cmp	r4, r10
 232 0112 29 05 38 3D 01          		bge	.L7
 233 0117 EF A7                   		mov.L	r10, r7
 234 0119 06 89 07 0A             		add	40[r0], r7
 235                             	.LBB64:
 236                             	.LBB57:
 201:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             {
 202:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                 for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 203:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                 {
 204:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) *
 205:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 206:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     if (count == 0)
 207:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     {
 208:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                         memcpy(dst, start, channel_in);
 237                             		.loc 1 208 25
 238 011d A8 89                   		mov.L	12[r0], r1
 239 011f 06 89 07 0E             		add	56[r0], r7
 240 0123 EC 03                   		mov.L	[r0], r3
 241 0125 4F 37                   		mul	r3, r7
 242 0127 ED 0D 0F                		mov.L	60[r0], r13
 243 012a 4B 7D                   		add	r7, r13
 244                             	.LVL25:
 204:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 245                             		.loc 1 204 21 is_stmt 1
 206:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     {
 246                             		.loc 1 206 21
 247                             		.loc 1 208 25
 248 012c EF D2                   		mov.L	r13, r2
 249 012e 7F 8F                   		smovf
 209:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                         count++;
 250                             		.loc 1 209 25
 251                             	.LVL26:
 252 0130 E7 0D 08                		mov.L	r13, 32[r0]
 253                             	.LBE57:
 254                             	.LBE64:
 200:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             {
 255                             		.loc 1 200 22 is_stmt 0
 256 0133 E5 00 0B 07             		mov.L	44[r0], 28[r0]
 257                             	.LBB65:
 258                             	.LBB58:
 259 0137 ED 08 02                		mov.L	8[r0], r8
 260 013a EF 89                   		mov.L	r8, r9
 261                             	.LVL27:
 262                             		.balign 8,3,1
 263                             	.L9:
 264 013c 06 88 0D                		add	[r0], r13
 265                             	.LBE58:
 202:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                 {
 266                             		.loc 1 202 68 discriminator 2
 267 013f 62 19                   		add	#1, r9
 268                             	.LVL28:
 269                             	.LBB59:
 204:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 270                             		.loc 1 204 33 discriminator 2
 271 0141 EF D8                   		mov.L	r13, r8
 272                             	.LBE59:
 202:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                 {
 273                             		.loc 1 202 17 discriminator 2
 274 0143 ED 0A 04                		mov.L	16[r0], r10
 275 0146 47 9A                   		cmp	r9, r10
 276 0148 3A EB 00                		beq	.L55
 277                             		.balign 8,3,1
 278                             	.L24:
 279                             	.LBB60:
 210:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     }
 211:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     else
 212:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     {
 213:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                         compare_and_replace_if_larger_q7(dst, start, channel_in);
 280                             		.loc 1 213 25 is_stmt 1
 281                             	.LVL29:
 282                             	.LBB55:
 283                             	.LBB53:
  50:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     const q7_t *src = target;
 284                             		.loc 1 50 5
  51:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     union arm_nnword ref_max;
 285                             		.loc 1 51 5
  52:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     union arm_nnword comp_max;
 286                             		.loc 1 52 5
  53:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     int32_t cnt = length >> 2;
 287                             		.loc 1 53 5
  54:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 288                             		.loc 1 54 5
  56:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 289                             		.loc 1 56 5
  56:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 290                             		.loc 1 56 11 is_stmt 0
 291 014b ED 0A 03                		mov.L	12[r0], r10
 292 014e AB 05                   		mov.L	48[r0], r5
 293 0150 61 05                   		cmp	#0, r5
 294 0152 2A 05 38 8E 00          		ble	.L11
 295 0157 E7 0D 05                		mov.L	r13, 20[r0]
 296 015a E7 09 06                		mov.L	r9, 24[r0]
 297                             	.LVL30:
 298                             		.balign 8,3,1
 299                             	.L10:
  58:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp_max.word = arm_nn_read_q7x4_ia(&src);
 300                             		.loc 1 58 9 is_stmt 1
 301                             	.LBB42:
 302                             	.LBB43:
 303                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 304                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 305                             		.loc 2 554 5
 306                             	.LBE43:
 307                             	.LBE42:
  63:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 308                             		.loc 1 63 13
  65:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 309                             		.loc 1 65 9
  67:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 310                             		.loc 1 67 13
  69:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 311                             		.loc 1 69 9
  71:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 312                             		.loc 1 71 13
  73:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 313                             		.loc 1 73 9
  75:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 314                             		.loc 1 75 13
  78:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 315                             		.loc 1 78 9
 316                             	.LBB45:
 317                             	.LBB44:
 318                             		.loc 2 554 5 is_stmt 0
 319 015d EC A5                   		mov.L	[r10], r5
 320                             	.LVL31:
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 321                             		.loc 2 556 5 is_stmt 1
 322                             	.LBE44:
 323                             	.LBE45:
 324                             	.LBB46:
 325                             	.LBB47:
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 326                             		.loc 2 527 5 is_stmt 0
 327 015f FD 2A 84                		mov.L	[r8+], r4
 328                             	.LVL32:
 329                             	.LBE47:
 330                             	.LBE46:
  69:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 331                             		.loc 1 69 12
 332 0162 FD C8 56                		shll	#8, r5, r6
 333 0165 FD C8 43                		shll	#8, r4, r3
 334 0168 DF 42                   		mov.W	r4, r2
  65:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 335                             		.loc 1 65 12
 336 016a DF 5C                   		mov.W	r5, r12
  61:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 337                             		.loc 1 61 12
 338 016c CF 4F                   		mov.B	r4, r15
 339 016e CF 5E                   		mov.B	r5, r14
 340 0170 6A 82                   		shar	#8, r2
 341 0172 6B 83                   		shar	#24, r3
  67:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 342                             		.loc 1 67 30
 343 0174 5B 2B                   		movu.B	r2, r11
  71:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 344                             		.loc 1 71 30
 345 0176 5B 31                   		movu.B	r3, r1
  65:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 346                             		.loc 1 65 12
 347 0178 6A 8C                   		shar	#8, r12
  69:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 348                             		.loc 1 69 12
 349 017a 6B 86                   		shar	#24, r6
  63:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 350                             		.loc 1 63 30
 351 017c FB DA 00 FF             		mov.L	#-256, r13
 352 0180 53 5D                   		and	r5, r13
  67:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 353                             		.loc 1 67 30
 354 0182 6C 8B                   		shll	#8, r11
  71:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 355                             		.loc 1 71 30
 356 0184 6D 01                   		shll	#16, r1
  63:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 357                             		.loc 1 63 30
 358 0186 5B 49                   		movu.B	r4, r9
  58:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp_max.word = arm_nn_read_q7x4_ia(&src);
 359                             		.loc 1 58 22
 360 0188 EF 57                   		mov.L	r5, r7
 361                             	.LVL33:
  59:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 362                             		.loc 1 59 9 is_stmt 1
 363                             	.LBB49:
 364                             	.LBB48:
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 365                             		.loc 2 526 5
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 366                             		.loc 2 527 5
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 367                             		.loc 2 528 5
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 368                             		.loc 2 530 5
 369                             	.LBE48:
 370                             	.LBE49:
  61:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 371                             		.loc 1 61 9
  61:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 372                             		.loc 1 61 12 is_stmt 0
 373 018a 47 EF                   		cmp	r14, r15
 374 018c 2B 05                   		ble	.L12
  63:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 375                             		.loc 1 63 30
 376 018e FF 57 9D                		or	r9, r13, r7
 377                             		.balign 8,3,1
 378                             	.L12:
  65:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 379                             		.loc 1 65 12
 380 0191 47 2C                   		cmp	r2, r12
 381 0193 28 09                   		bge	.L13
 382                             	.LVL34:
  67:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 383                             		.loc 1 67 30
 384 0195 77 27 FF 00 FF          		and #-65281, r7
 385                             	.LVL35:
 386 019a 57 B7                   		or	r11, r7
 387                             		.balign 8,3,1
 388                             	.L13:
  69:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 389                             		.loc 1 69 12
 390 019c 47 63                   		cmp	r6, r3
 391 019e 2B 0A                   		ble	.L14
 392                             	.LVL36:
  71:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 393                             		.loc 1 71 30
 394 01a0 74 27 FF FF 00 FF       		and #-16711681, r7
 395                             	.LVL37:
 396 01a6 57 17                   		or	r1, r7
 397                             		.balign 8,3,1
 398                             	.L14:
 399 01a8 6B 84                   		shar	#24, r4
  73:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 400                             		.loc 1 73 12
 401 01aa 6B 85                   		shar	#24, r5
  75:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 402                             		.loc 1 75 30
 403 01ac FD D8 43                		shll	#24, r4, r3
  73:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 404                             		.loc 1 73 12
 405 01af 47 54                   		cmp	r5, r4
 406 01b1 2B 0A                   		ble	.L15
 407                             	.LVL38:
  75:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 408                             		.loc 1 75 30
 409 01b3 74 27 FF FF FF 00       		and #0xffffff, r7
 410                             	.LVL39:
 411 01b9 57 37                   		or	r3, r7
 412                             		.balign 8,3,2
 413                             	.L15:
 414                             	.LVL40:
 415                             	.LBB50:
 416                             	.LBB51:
 417                             		.file 3 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /******************************************************************************
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * @file     arm_math_memory.h
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * @brief    Public header file for CMSIS DSP Library
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * @version  V1.9.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * @date     23 April 2021
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * Target Processor: Cortex-M and Cortex-A cores
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  ******************************************************************************/
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /*
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * Copyright (c) 2010-2021 Arm Limited or its affiliates. All rights reserved.
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  *
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * SPDX-License-Identifier: Apache-2.0
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  *
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * not use this file except in compliance with the License.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * You may obtain a copy of the License at
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  *
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * www.apache.org/licenses/LICENSE-2.0
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  *
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * Unless required by applicable law or agreed to in writing, software
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * See the License for the specific language governing permissions and
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  * limitations under the License.
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifndef _ARM_MATH_MEMORY_H_
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #define _ARM_MATH_MEMORY_H_
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #include "arm_math_types.h"
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef   __cplusplus
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** extern "C"
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief definition to read/write two 16 bit values.
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @deprecated
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #if   defined ( __CC_ARM )
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE int32_t __packed
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE int32_t
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #elif defined ( __GNUC__ )
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE int32_t
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #elif defined ( __ICCARM__ )
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE int32_t __packed
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #elif defined ( __TI_ARM__ )
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE int32_t
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #elif defined ( __CSMC__ )
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE int32_t
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #elif defined ( __TASKING__ )
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE __un(aligned) int32_t
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #elif defined(_MSC_VER )
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #define __SIMD32_TYPE int32_t
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   #error Unknown compiler
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #define __SIMD32_CONST(addr)  ( (__SIMD32_TYPE * )   (addr))
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE * )   (addr))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #define __SIMD64(addr)        (*(      int64_t **) & (addr))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /* SIMD replacement */
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Read 2 Q15 from Q15 pointer.
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ15      points to input value
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        Q31 value
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE q31_t read_q15x2 (
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q15_t * pQ15)
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val;
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (&val, pQ15, 4);
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   return (val);
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** }
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Read 2 Q15 from Q15 pointer and increment pointer afterwards.
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ15      points to input value
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        Q31 value
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE q31_t read_q15x2_ia (
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q15_t ** pQ15)
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val;
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (&val, *pQ15, 4);
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   val = ((*pQ15)[1] << 16) | ((*pQ15)[0] & 0x0FFFF);
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  *pQ15 += 2;
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  return (val);
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** }
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Read 2 Q15 from Q15 pointer and decrement pointer afterwards.
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ15      points to input value
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        Q31 value
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE q31_t read_q15x2_da (
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q15_t ** pQ15)
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val;
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (&val, *pQ15, 4);
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   val = ((*pQ15)[1] << 16) | ((*pQ15)[0] & 0x0FFFF);
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   *pQ15 -= 2;
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   return (val);
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** }
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Write 2 Q15 to Q15 pointer and increment pointer afterwards.
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ15      points to input value
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     value     Q31 value
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        none
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE void write_q15x2_ia (
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q15_t ** pQ15,
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t    value)
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val = value;
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (*pQ15, &val, 4);
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ15)[0] = (val & 0x0FFFF);
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ15)[1] = (val >> 16) & 0x0FFFF;
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  *pQ15 += 2;
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** }
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Write 2 Q15 to Q15 pointer.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ15      points to input value
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     value     Q31 value
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        none
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE void write_q15x2 (
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q15_t * pQ15,
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t   value)
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val = value;
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (pQ15, &val, 4);
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   pQ15[0] = val & 0x0FFFF;
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   pQ15[1] = val >> 16;
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** }
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Read 4 Q7 from Q7 pointer and increment pointer afterwards.
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ7       points to input value
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        Q31 value
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE q31_t read_q7x4_ia (
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q7_t ** pQ7)
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val;
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (&val, *pQ7, 4);
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   val =(((*pQ7)[3] & 0x0FF) << 24)  | (((*pQ7)[2] & 0x0FF) << 16)  | (((*pQ7)[1] & 0x0FF) << 8)  | 
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif 
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   *pQ7 += 4;
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   return (val);
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** }
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Read 4 Q7 from Q7 pointer and decrement pointer afterwards.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ7       points to input value
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        Q31 value
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE q31_t read_q7x4_da (
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q7_t ** pQ7)
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val;
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (&val, *pQ7, 4);
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   val = ((((*pQ7)[3]) & 0x0FF) << 24) | ((((*pQ7)[2]) & 0x0FF) << 16)   | ((((*pQ7)[1]) & 0x0FF) <<
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif 
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   *pQ7 -= 4;
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   return (val);
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** }
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** /**
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @brief         Write 4 Q7 to Q7 pointer and increment pointer afterwards.
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     pQ7       points to input value
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @param[in]     value     Q31 value
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   @return        none
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****  */
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** __STATIC_FORCEINLINE void write_q7x4_ia (
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q7_t ** pQ7,
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t   value)
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** {
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   q31_t val = value;
 418                             		.loc 3 223 3 is_stmt 1
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   memcpy (*pQ7, &val, 4);
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #else
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[0] = val & 0x0FF;
 419                             		.loc 3 227 3
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[1] = (val >> 8) & 0x0FF;
 420                             		.loc 3 228 20 is_stmt 0
 421 01bb FD A8 73                		shar	#8, r7, r3
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[2] = (val >> 16) & 0x0FF;
 422                             		.loc 3 229 20
 423 01be FD B0 74                		shar	#16, r7, r4
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[3] = (val >> 24) & 0x0FF;
 424                             		.loc 3 230 27
 425 01c1 FD 98 75                		shlr	#24, r7, r5
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[1] = (val >> 8) & 0x0FF;
 426                             		.loc 3 227 13
 427 01c4 C3 A7                   		mov.B	r7, [r10]
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[2] = (val >> 16) & 0x0FF;
 428                             		.loc 3 228 3 is_stmt 1
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[2] = (val >> 16) & 0x0FF;
 429                             		.loc 3 228 13 is_stmt 0
 430 01c6 C7 A3 01                		mov.B	r3, 1[r10]
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[3] = (val >> 24) & 0x0FF;
 431                             		.loc 3 229 3 is_stmt 1
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[3] = (val >> 24) & 0x0FF;
 432                             		.loc 3 229 13 is_stmt 0
 433 01c9 C7 A4 02                		mov.B	r4, 2[r10]
 434                             		.loc 3 230 3 is_stmt 1
 435                             		.loc 3 230 13 is_stmt 0
 436 01cc C7 A5 03                		mov.B	r5, 3[r10]
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #endif
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   *pQ7 += 4;
 437                             		.loc 3 233 3 is_stmt 1
 438                             		.loc 3 233 8 is_stmt 0
 439 01cf 62 4A                   		add	#4, r10
 440                             	.LVL41:
 441                             	.LBE51:
 442                             	.LBE50:
  80:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 443                             		.loc 1 80 9 is_stmt 1
  56:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 444                             		.loc 1 56 11 is_stmt 0
 445 01d1 A8 0F                   		mov.L	4[r0], r7
 446                             	.LVL42:
 447 01d3 47 7A                   		cmp	r7, r10
 448 01d5 21 88                   		bne	.L10
 449 01d7 ED 0D 05                		mov.L	20[r0], r13
 450 01da ED 09 06                		mov.L	24[r0], r9
 451 01dd ED 08 10                		mov.L	64[r0], r8
 452                             	.LVL43:
 453 01e0 4B D8                   		add	r13, r8
 454                             	.LVL44:
 455                             		.balign 8,3,1
 456                             	.L11:
  83:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
 457                             		.loc 1 83 5 is_stmt 1
  84:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 458                             		.loc 1 84 5
  84:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 459                             		.loc 1 84 11 is_stmt 0
 460 01e2 AB 0C                   		mov.L	52[r0], r4
 461 01e4 61 04                   		cmp	#0, r4
 462 01e6 3A 56 FF                		beq	.L9
 463                             	.LVL45:
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 464                             		.loc 1 86 9 is_stmt 1
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 465                             		.loc 1 86 13 is_stmt 0
 466 01e9 CC 87                   		mov.B	[r8], r7
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 467                             		.loc 1 86 12
 468 01eb CC A4                   		mov.B	[r10], r4
 469                             	.LVL46:
 470 01ed CF 75                   		mov.B	r7, r5
 471 01ef 47 54                   		cmp	r5, r4
 472 01f1 28 04                   		bge	.L18
  88:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 473                             		.loc 1 88 13 is_stmt 1
  88:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 474                             		.loc 1 88 18 is_stmt 0
 475 01f3 C3 A7                   		mov.B	r7, [r10]
 476                             		.balign 8,3,1
 477                             	.L18:
  90:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         src++;
 478                             		.loc 1 90 9 is_stmt 1
 479                             	.LVL47:
  91:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 480                             		.loc 1 91 9
  92:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 481                             		.loc 1 92 9
  84:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 482                             		.loc 1 84 11 is_stmt 0
 483 01f5 AA 0D                   		mov.L	36[r0], r5
 484 01f7 61 05                   		cmp	#0, r5
 485 01f9 3A 43 FF                		beq	.L9
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 486                             		.loc 1 86 9 is_stmt 1
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 487                             		.loc 1 86 13 is_stmt 0
 488 01fc CD 87 01                		mov.B	1[r8], r7
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 489                             		.loc 1 86 12
 490 01ff CD A5 01                		mov.B	1[r10], r5
 491 0202 CF 74                   		mov.B	r7, r4
 492 0204 47 54                   		cmp	r5, r4
 493 0206 2B 05                   		ble	.L20
  88:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 494                             		.loc 1 88 13 is_stmt 1
  88:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 495                             		.loc 1 88 18 is_stmt 0
 496 0208 C7 A7 01                		mov.B	r7, 1[r10]
 497                             		.balign 8,3,1
 498                             	.L20:
  90:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         src++;
 499                             		.loc 1 90 9 is_stmt 1
 500                             	.LVL48:
  91:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 501                             		.loc 1 91 9
  92:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 502                             		.loc 1 92 9
  84:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 503                             		.loc 1 84 11 is_stmt 0
 504 020b AA 0F                   		mov.L	36[r0], r7
 505 020d 61 17                   		cmp	#1, r7
 506 020f 3A 2D FF                		beq	.L9
 507                             	.LVL49:
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 508                             		.loc 1 86 9 is_stmt 1
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 509                             		.loc 1 86 13 is_stmt 0
 510 0212 CD 87 02                		mov.B	2[r8], r7
  86:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 511                             		.loc 1 86 12
 512 0215 CD A5 02                		mov.B	2[r10], r5
 513 0218 CF 74                   		mov.B	r7, r4
 514 021a 47 54                   		cmp	r5, r4
 515 021c 2A 05 38 1E FF          		ble	.L9
  88:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 516                             		.loc 1 88 13 is_stmt 1
  88:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 517                             		.loc 1 88 18 is_stmt 0
 518 0221 C7 A7 02                		mov.B	r7, 2[r10]
  90:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         src++;
 519                             		.loc 1 90 9 is_stmt 1
 520                             	.LVL50:
  91:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 521                             		.loc 1 91 9
  92:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 522                             		.loc 1 92 9
 523 0224 06 88 0D                		add	[r0], r13
 524                             	.LBE53:
 525                             	.LBE55:
 526                             	.LBE60:
 202:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                 {
 527                             		.loc 1 202 68 is_stmt 0
 528 0227 62 19                   		add	#1, r9
 529                             	.LVL51:
 530                             	.LBB61:
 204:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 531                             		.loc 1 204 33
 532 0229 EF D8                   		mov.L	r13, r8
 533                             	.LBE61:
 202:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                 {
 534                             		.loc 1 202 17
 535 022b ED 0A 04                		mov.L	16[r0], r10
 536 022e 47 9A                   		cmp	r9, r10
 537 0230 3B 1B FF                		bne	.L24
 538                             	.LVL52:
 539                             		.balign 8,3,1
 540                             	.L55:
 541                             	.LBE65:
 200:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             {
 542                             		.loc 1 200 64
 543 0233 A9 8C                   		mov.L	28[r0], r4
 544 0235 62 14                   		add	#1, r4
 545 0237 A1 8C                   		mov.L	r4, 28[r0]
 546                             	.LVL53:
 547 0239 ED 0D 08                		mov.L	32[r0], r13
 548 023c 06 89 0D 12             		add	72[r0], r13
 200:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             {
 549                             		.loc 1 200 13
 550 0240 AC 0D                   		mov.L	68[r0], r5
 551 0242 47 45                   		cmp	r4, r5
 552 0244 20 0D                   		beq	.L7
 553                             	.LVL54:
 554                             	.LBB66:
 555                             	.LBB62:
 204:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 556                             		.loc 1 204 21 is_stmt 1
 204:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 557                             		.loc 1 204 33 is_stmt 0
 558 0246 EF D8                   		mov.L	r13, r8
 559                             	.LVL55:
 206:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     {
 560                             		.loc 1 206 21 is_stmt 1
 204:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 561                             		.loc 1 204 33 is_stmt 0
 562 0248 E7 0D 08                		mov.L	r13, 32[r0]
 563 024b ED 09 02                		mov.L	8[r0], r9
 564 024e 38 FD FE                		bra	.L24
 565                             	.LVL56:
 566                             	.L7:
 567                             	.LBE62:
 568                             	.LBE66:
 569                             	.LBE68:
 214:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                     }
 215:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****                 }
 216:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             }
 217:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             /* 'count' is expected to be non-zero here. */
 218:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****             dst += channel_in;
 570                             		.loc 1 218 13 is_stmt 1
 571                             	.LBE71:
 188:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 572                             		.loc 1 188 91 is_stmt 0
 573 0251 AD 07                   		mov.L	80[r0], r7
 574 0253 62 17                   		add	#1, r7
 575 0255 A5 07                   		mov.L	r7, 80[r0]
 576                             	.LVL57:
 188:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 577                             		.loc 1 188 75
 578 0257 ED 0A 0A                		mov.L	40[r0], r10
 579 025a 06 89 0A 13             		add	76[r0], r10
 580 025e E7 0A 0A                		mov.L	r10, 40[r0]
 581                             	.LVL58:
 582 0261 AD 84                   		mov.L	88[r0], r4
 583 0263 AC 8D                   		mov.L	76[r0], r5
 584 0265 43 54                   		sub	r5, r4
 585 0267 A5 84                   		mov.L	r4, 88[r0]
 586 0269 AD 0F                   		mov.L	84[r0], r7
 587                             	.LVL59:
 588 026b 43 57                   		sub	r5, r7
 589 026d A5 0F                   		mov.L	r7, 84[r0]
 590 026f ED 0A 01                		mov.L	4[r0], r10
 591                             	.LVL60:
 592 0272 06 88 0A                		add	[r0], r10
 593 0275 E7 0A 01                		mov.L	r10, 4[r0]
 594                             	.LVL61:
 188:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         {
 595                             		.loc 1 188 9
 596 0278 AD 8C                   		mov.L	92[r0], r4
 597 027a AD 05                   		mov.L	80[r0], r5
 598 027c 47 54                   		cmp	r5, r4
 599 027e 3B 64 FE                		bne	.L25
 600                             	.LBE73:
 186:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 601                             		.loc 1 186 87
 602 0281 ED 07 23                		mov.L	140[r0], r7
 603 0284 62 17                   		add	#1, r7
 604 0286 E7 07 23                		mov.L	r7, 140[r0]
 605                             	.LVL62:
 186:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 606                             		.loc 1 186 71
 607 0289 ED 0A 1C                		mov.L	112[r0], r10
 608 028c 06 89 0A 21             		add	132[r0], r10
 609 0290 E7 0A 1C                		mov.L	r10, 112[r0]
 610                             	.LVL63:
 611 0293 AF 0C                   		mov.L	116[r0], r4
 612                             	.LVL64:
 613 0295 ED 05 21                		mov.L	132[r0], r5
 614 0298 43 54                   		sub	r5, r4
 615 029a A7 0C                   		mov.L	r4, 116[r0]
 616 029c ED 07 25                		mov.L	148[r0], r7
 617                             	.LVL65:
 618 029f 43 57                   		sub	r5, r7
 619 02a1 E7 07 25                		mov.L	r7, 148[r0]
 620                             	.LVL66:
 621 02a4 ED 0A 24                		mov.L	144[r0], r10
 622                             	.LVL67:
 623 02a7 06 89 0A 27             		add	156[r0], r10
 624 02ab E7 0A 24                		mov.L	r10, 144[r0]
 625                             	.LVL68:
 186:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 626                             		.loc 1 186 5
 627 02ae ED 05 20                		mov.L	128[r0], r5
 628 02b1 ED 07 23                		mov.L	140[r0], r7
 629 02b4 47 75                   		cmp	r7, r5
 630 02b6 3B F3 FD                		bne	.L26
 631                             	.LVL69:
 632                             		.balign 8,3,2
 633                             	.L27:
 634                             	.LBE34:
 219:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         }
 220:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 221:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 222:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 635                             		.loc 1 222 5 is_stmt 1
 636                             		.loc 1 222 37 is_stmt 0
 637 02b9 ED 05 20                		mov.L	128[r0], r5
 638 02bc AD 8F                   		mov.L	92[r0], r7
 639 02be 4F 75                   		mul	r7, r5
 640                             		.loc 1 222 5
 641 02c0 EC 0A                   		mov.L	[r0], r10
 642 02c2 4F A5                   		mul	r10, r5
 643                             	.LVL70:
 644                             	.LBB74:
 645                             	.LBB75:
 114:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     int32_t cnt = length >> 2;
 646                             		.loc 1 114 5 is_stmt 1
 115:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 647                             		.loc 1 115 5
 115:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 648                             		.loc 1 115 13 is_stmt 0
 649 02c4 FD A2 57                		shar	#2, r5, r7
 650                             	.LVL71:
 117:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 651                             		.loc 1 117 5 is_stmt 1
 117:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 652                             		.loc 1 117 11 is_stmt 0
 653 02c7 61 07                   		cmp	#0, r7
 654 02c9 2A 05 38 A8 00          		ble	.L56
 655 02ce 6C 27                   		shll	#2, r7
 656                             	.LVL72:
 657 02d0 ED 0A 1E                		mov.L	120[r0], r10
 658 02d3 4B 7A                   		add	r7, r10
 659 02d5 AE 83                   		mov.L	104[r0], r3
 660 02d7 AE 8A                   		mov.L	108[r0], r2
 661 02d9 AF 84                   		mov.L	120[r0], r4
 662                             	.LVL73:
 663                             		.balign 8,3,1
 664                             	.L28:
 119:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 665                             		.loc 1 119 9 is_stmt 1
 666                             	.LBB76:
 667                             	.LBB77:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 668                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669                             		.loc 2 554 5
 670 02db EC 41                   		mov.L	[r4], r1
 671                             	.LVL74:
 672                             		.loc 2 556 5
 673                             	.LBE77:
 674                             	.LBE76:
 121:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[0] = MIN(in.bytes[0], act_max);
 675                             		.loc 1 121 9
 122:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MAX(in.bytes[1], act_min);
 676                             		.loc 1 122 9
 123:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MIN(in.bytes[1], act_max);
 677                             		.loc 1 123 9
 124:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MAX(in.bytes[2], act_min);
 678                             		.loc 1 124 9
 123:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MIN(in.bytes[1], act_max);
 679                             		.loc 1 123 23 is_stmt 0
 680 02dd DF 17                   		mov.W	r1, r7
 681                             	.LVL75:
 125:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MIN(in.bytes[2], act_max);
 682                             		.loc 1 125 23
 683 02df FD C8 16                		shll	#8, r1, r6
 123:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MIN(in.bytes[1], act_max);
 684                             		.loc 1 123 23
 685 02e2 6A 87                   		shar	#8, r7
 121:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[0] = MIN(in.bytes[0], act_max);
 686                             		.loc 1 121 23
 687 02e4 CF 1B                   		mov.B	r1, r11
 123:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MIN(in.bytes[1], act_max);
 688                             		.loc 1 123 23
 689 02e6 FC 13 37                		max	r3, r7
 125:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MIN(in.bytes[2], act_max);
 690                             		.loc 1 125 23
 691 02e9 6B 86                   		shar	#24, r6
 121:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[0] = MIN(in.bytes[0], act_max);
 692                             		.loc 1 121 23
 693 02eb FC 13 3B                		max	r3, r11
 124:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MAX(in.bytes[2], act_min);
 694                             		.loc 1 124 23
 695 02ee CF 77                   		mov.B	r7, r7
 125:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MIN(in.bytes[2], act_max);
 696                             		.loc 1 125 23
 697 02f0 FC 13 36                		max	r3, r6
 122:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MAX(in.bytes[1], act_min);
 698                             		.loc 1 122 23
 699 02f3 CF BB                   		mov.B	r11, r11
 124:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MAX(in.bytes[2], act_min);
 700                             		.loc 1 124 23
 701 02f5 FC 17 27                		min	r2, r7
 126:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MAX(in.bytes[3], act_min);
 702                             		.loc 1 126 23
 703 02f8 CF 66                   		mov.B	r6, r6
 122:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MAX(in.bytes[1], act_min);
 704                             		.loc 1 122 23
 705 02fa FC 17 2B                		min	r2, r11
 127:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MIN(in.bytes[3], act_max);
 706                             		.loc 1 127 23
 707 02fd 6B 81                   		shar	#24, r1
 126:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MAX(in.bytes[3], act_min);
 708                             		.loc 1 126 23
 709 02ff FC 17 26                		min	r2, r6
 124:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MAX(in.bytes[2], act_min);
 710                             		.loc 1 124 21
 711 0302 5B 77                   		movu.B	r7, r7
 127:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MIN(in.bytes[3], act_max);
 712                             		.loc 1 127 23
 713 0304 FC 13 31                		max	r3, r1
 122:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[1] = MAX(in.bytes[1], act_min);
 714                             		.loc 1 122 21
 715 0307 5B BB                   		movu.B	r11, r11
 124:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MAX(in.bytes[2], act_min);
 716                             		.loc 1 124 21
 717 0309 6C 87                   		shll	#8, r7
 125:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[2] = MIN(in.bytes[2], act_max);
 718                             		.loc 1 125 9 is_stmt 1
 126:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MAX(in.bytes[3], act_min);
 719                             		.loc 1 126 9
 126:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MAX(in.bytes[3], act_min);
 720                             		.loc 1 126 21 is_stmt 0
 721 030b 5B 66                   		movu.B	r6, r6
 128:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 722                             		.loc 1 128 23
 723 030d CF 11                   		mov.B	r1, r1
 126:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MAX(in.bytes[3], act_min);
 724                             		.loc 1 126 21
 725 030f 6D 06                   		shll	#16, r6
 128:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 726                             		.loc 1 128 23
 727 0311 FC 17 21                		min	r2, r1
 126:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MAX(in.bytes[3], act_min);
 728                             		.loc 1 126 21
 729 0314 57 B7                   		or	r11, r7
 127:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         in.bytes[3] = MIN(in.bytes[3], act_max);
 730                             		.loc 1 127 9 is_stmt 1
 128:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 731                             		.loc 1 128 9
 128:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 732                             		.loc 1 128 21 is_stmt 0
 733 0316 6D 81                   		shll	#24, r1
 734 0318 57 67                   		or	r6, r7
 735 031a 57 17                   		or	r1, r7
 130:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 736                             		.loc 1 130 9 is_stmt 1
 737                             	.LVL76:
 738                             	.LBB78:
 739                             	.LBB79:
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** #ifdef __ARM_FEATURE_UNALIGNED
 740                             		.loc 3 223 3
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[1] = (val >> 8) & 0x0FF;
 741                             		.loc 3 227 3
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[2] = (val >> 16) & 0x0FF;
 742                             		.loc 3 228 20 is_stmt 0
 743 031c FD A8 7B                		shar	#8, r7, r11
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[3] = (val >> 24) & 0x0FF;
 744                             		.loc 3 229 20
 745 031f FD B0 76                		shar	#16, r7, r6
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 746                             		.loc 3 230 27
 747 0322 FD 98 71                		shlr	#24, r7, r1
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[1] = (val >> 8) & 0x0FF;
 748                             		.loc 3 227 13
 749 0325 C3 47                   		mov.B	r7, [r4]
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[2] = (val >> 16) & 0x0FF;
 750                             		.loc 3 228 3 is_stmt 1
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[2] = (val >> 16) & 0x0FF;
 751                             		.loc 3 228 13 is_stmt 0
 752 0327 C7 4B 01                		mov.B	r11, 1[r4]
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[3] = (val >> 24) & 0x0FF;
 753                             		.loc 3 229 3 is_stmt 1
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h ****   (*pQ7)[3] = (val >> 24) & 0x0FF;
 754                             		.loc 3 229 13 is_stmt 0
 755 032a 80 C6                   		mov.B	r6, 2[r4]
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 756                             		.loc 3 230 3 is_stmt 1
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include\arm_math_memory.h **** 
 757                             		.loc 3 230 13 is_stmt 0
 758 032c 80 C9                   		mov.B	r1, 3[r4]
 759                             		.loc 3 233 3 is_stmt 1
 760                             		.loc 3 233 8 is_stmt 0
 761 032e 62 44                   		add	#4, r4
 762                             	.LVL77:
 763                             	.LBE79:
 764                             	.LBE78:
 131:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 765                             		.loc 1 131 9 is_stmt 1
 117:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 766                             		.loc 1 117 11 is_stmt 0
 767 0330 47 4A                   		cmp	r4, r10
 768 0332 21 A9                   		bne	.L28
 769                             	.LVL78:
 770                             		.balign 8,3,1
 771                             	.L4:
 134:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
 772                             		.loc 1 134 5 is_stmt 1
 134:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     while (cnt > 0l)
 773                             		.loc 1 134 9 is_stmt 0
 774 0334 66 37                   		mov.L	#3, r7
 775                             	.LVL79:
 776 0336 53 57                   		and	r5, r7
 777                             	.LVL80:
 135:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 778                             		.loc 1 135 5 is_stmt 1
 135:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 779                             		.loc 1 135 11 is_stmt 0
 780 0338 20 36                   		beq	.L37
 781                             	.LBB80:
 137:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MAX(comp, act_min);
 782                             		.loc 1 137 9 is_stmt 1
 141:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 783                             		.loc 1 141 12 is_stmt 0
 784 033a 60 17                   		sub	#1, r7
 785                             	.LVL81:
 137:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MAX(comp, act_min);
 786                             		.loc 1 137 17
 787 033c CC A5                   		mov.B	[r10], r5
 788                             	.LVL82:
 138:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MIN(comp, act_max);
 789                             		.loc 1 138 9 is_stmt 1
 138:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MIN(comp, act_max);
 790                             		.loc 1 138 14 is_stmt 0
 791 033e AE 84                   		mov.L	104[r0], r4
 792 0340 FC 13 45                		max	r4, r5
 793                             	.LVL83:
 139:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         *source++ = (int8_t)comp;
 794                             		.loc 1 139 9 is_stmt 1
 140:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 795                             		.loc 1 140 9
 139:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         *source++ = (int8_t)comp;
 796                             		.loc 1 139 14 is_stmt 0
 797 0343 AE 8C                   		mov.L	108[r0], r4
 798 0345 FC 17 45                		min	r4, r5
 799                             	.LVL84:
 140:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 800                             		.loc 1 140 21
 801 0348 C3 A5                   		mov.B	r5, [r10]
 141:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 802                             		.loc 1 141 9 is_stmt 1
 803                             	.LVL85:
 804                             	.LBE80:
 135:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 805                             		.loc 1 135 11 is_stmt 0
 806 034a 20 24                   		beq	.L37
 807                             	.LBB81:
 137:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MAX(comp, act_min);
 808                             		.loc 1 137 9 is_stmt 1
 137:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MAX(comp, act_min);
 809                             		.loc 1 137 17 is_stmt 0
 810 034c CD A5 01                		mov.B	1[r10], r5
 811                             	.LVL86:
 138:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MIN(comp, act_max);
 812                             		.loc 1 138 9 is_stmt 1
 138:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MIN(comp, act_max);
 813                             		.loc 1 138 14 is_stmt 0
 814 034f AE 84                   		mov.L	104[r0], r4
 815 0351 FC 13 45                		max	r4, r5
 816                             	.LVL87:
 139:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         *source++ = (int8_t)comp;
 817                             		.loc 1 139 9 is_stmt 1
 140:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 818                             		.loc 1 140 9
 139:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         *source++ = (int8_t)comp;
 819                             		.loc 1 139 14 is_stmt 0
 820 0354 AE 8C                   		mov.L	108[r0], r4
 821 0356 FC 17 45                		min	r4, r5
 822                             	.LVL88:
 140:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 823                             		.loc 1 140 21
 824 0359 C7 A5 01                		mov.B	r5, 1[r10]
 141:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 825                             		.loc 1 141 9 is_stmt 1
 826                             	.LVL89:
 827                             	.LBE81:
 135:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 828                             		.loc 1 135 11 is_stmt 0
 829 035c 61 17                   		cmp	#1, r7
 830 035e 20 10                   		beq	.L37
 831                             	.LVL90:
 832                             	.LBB82:
 137:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MAX(comp, act_min);
 833                             		.loc 1 137 9 is_stmt 1
 137:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MAX(comp, act_min);
 834                             		.loc 1 137 17 is_stmt 0
 835 0360 CD A7 02                		mov.B	2[r10], r7
 836                             	.LVL91:
 138:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MIN(comp, act_max);
 837                             		.loc 1 138 9 is_stmt 1
 138:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         comp = MIN(comp, act_max);
 838                             		.loc 1 138 14 is_stmt 0
 839 0363 AE 85                   		mov.L	104[r0], r5
 840 0365 FC 13 57                		max	r5, r7
 841                             	.LVL92:
 139:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         *source++ = (int8_t)comp;
 842                             		.loc 1 139 9 is_stmt 1
 140:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 843                             		.loc 1 140 9
 139:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         *source++ = (int8_t)comp;
 844                             		.loc 1 139 14 is_stmt 0
 845 0368 FC 17 47                		min	r4, r7
 846                             	.LVL93:
 140:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****         cnt--;
 847                             		.loc 1 140 21
 848 036b C7 A7 02                		mov.B	r7, 2[r10]
 141:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     }
 849                             		.loc 1 141 9 is_stmt 1
 850                             	.LVL94:
 851                             	.LBE82:
 852                             	.LBE75:
 853                             	.LBE74:
 223:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** 
 224:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     return ARM_MATH_SUCCESS;
 854                             		.loc 1 224 5
 855                             		.balign 8,3,1
 856                             	.L37:
 225:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c **** }
 857                             		.loc 1 225 1 is_stmt 0
 858 036e 66 01                   		mov.L	#0, r1
 859 0370 3F 6D 34                		rtsd	#208, r6-r13
 860                             	.LVL95:
 861                             	.L56:
 862                             	.LBB84:
 863                             	.LBB83:
 117:../src/CMSIS/NN/Source/PoolingFunctions/arm_max_pool_s8.c ****     {
 864                             		.loc 1 117 11
 865 0373 ED 0A 1E                		mov.L	120[r0], r10
 866 0376 2E BE                   		bra	.L4
 867                             	.LBE83:
 868                             	.LBE84:
 869                             	.LFE84:
 921                             	.Letext0:
 922                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 923                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 924                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 925                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 926                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 927                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 928                             		.file 10 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 929                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 930                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 931                             		.file 13 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
