   1                             		.file	"arm_fully_connected_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_fully_connected_s8,"ax",@progbits
   5                             		.global	_arm_fully_connected_s8
   7                             	_arm_fully_connected_s8:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c"
   1:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** /*
   2:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
   4:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
   6:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  10:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  12:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  */
  18:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  19:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** /**************************************************************************************************
  20:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * DISCLAIMER
  21:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * This software is supplied by Renesas Electronics Corporation and is only intended for use with R
  22:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prot
  23:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * applicable laws, including copyright laws.
  24:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
  25:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
  26:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAI
  27:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS A
  28:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY R
  29:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DA
  30:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Renesas reserves the right, without notice, to make changes to this software and to discontinue 
  31:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * this software. 
  32:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  33:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * rmpa instruction is applied for RX devices
  34:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  **************************************************************************************************
  36:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  37:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** /* ----------------------------------------------------------------------
  38:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Project:      CMSIS NN Library
  39:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Title:        arm_fully_connected_s8
  40:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Description:  Fully connected function compatible with TF Lite.
  41:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  42:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * $Date:        19. March 2021
  43:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * $Revision:    V.3.0.0
  44:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  45:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Target Processor:  Cortex-M and Cortex-A cores
  46:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  47:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * -------------------------------------------------------------------- */
  48:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  49:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #include "arm_nnfunctions.h"
  50:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #include "arm_nnsupportfunctions.h"
  51:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  52:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** /**
  53:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *  @ingroup groupNN
  54:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  */
  55:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  56:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** /**
  57:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * @addtogroup FC
  58:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * @{
  59:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  */
  60:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  61:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** /*
  62:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * S8 basic fully-connected and matrix multiplication layer function for TensorFlow Lite
  63:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  64:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  * Refer header file for details.
  65:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  *
  66:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****  */
  67:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #if defined (RX_DSP_INT8)
  68:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** q31_t outres3[640];
  69:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #endif
  70:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  71:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** arm_status arm_fully_connected_s8(const cmsis_nn_context *ctx,
  72:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const cmsis_nn_fc_params *fc_params,
  73:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const cmsis_nn_per_tensor_quant_params *quant_params,
  74:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const cmsis_nn_dims *input_dims,
  75:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const q7_t *input,
  76:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const cmsis_nn_dims *filter_dims,
  77:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const q7_t *kernel,
  78:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const cmsis_nn_dims *bias_dims,
  79:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const int32_t *bias,
  80:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   const cmsis_nn_dims *output_dims,
  81:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                                   q7_t *output)
  82:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** {
  10                             		.loc 1 82 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 71 00 BC                		add	#-68, r0
  15                             	.LCFI1:
  83:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   (void)bias_dims;
  16                             		.loc 1 83 3
  84:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   (void)ctx;
  17                             		.loc 1 84 3
  85:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   (void)fc_params->filter_offset;
  18                             		.loc 1 85 3
  86:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  87:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   int32_t batch_cnt = input_dims->n;
  19                             		.loc 1 87 3
  82:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   (void)bias_dims;
  20                             		.loc 1 82 1 is_stmt 0
  21 0005 75 47 68                		mov.L	#0x68, r7
  22 0008 4B 07                   		add	r0, r7
  23 000a EF 2B                   		mov.L	r2, r11
  24 000c E5 70 01 02             		mov.L	4[r7], 8[r0]
  25 0010 E5 70 05 03             		mov.L	20[r7], 12[r0]
  88:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #if defined(RX_DSP_INT8)
  89:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  90:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   const q7_t *rhs = kernel;
  91:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   int32_t outres1 = fc_params->input_offset * fc_params->filter_offset * filter_dims->n;
  26                             		.loc 1 91 30
  27 0014 EC 2E                   		mov.L	[r2], r14
  28                             		.loc 1 91 45
  29 0016 A8 2D                   		mov.L	4[r2], r5
  30                             		.loc 1 91 85
  31 0018 A8 82                   		mov.L	8[r0], r2
  32                             	.LVL1:
  33 001a EC 2F                   		mov.L	[r2], r15
  34                             	.LBB13:
  92:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   const int32_t loop_res1 = filter_dims->n - (filter_dims->n & 0x0f);
  93:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  94:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   for (int32_t rhs_rows_idx = 0; rhs_rows_idx < output_dims->c; rhs_rows_idx += 1)
  35                             		.loc 1 94 60
  36 001c A8 8A                   		mov.L	12[r0], r2
  37 001e ED 2A 03                		mov.L	12[r2], r10
  38                             	.LBE13:
  91:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   const int32_t loop_res1 = filter_dims->n - (filter_dims->n & 0x0f);
  39                             		.loc 1 91 45
  40 0021 4F E5                   		mul	r14, r5
  82:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   (void)bias_dims;
  41                             		.loc 1 82 1
  42 0023 EF 38                   		mov.L	r3, r8
  43 0025 E0 70                   		mov.L	[r7], [r0]
  44 0027 ED 79 02                		mov.L	8[r7], r9
  45 002a E5 70 04 06             		mov.L	16[r7], 24[r0]
  46 002e ED 7C 06                		mov.L	24[r7], r12
  87:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #if defined(RX_DSP_INT8)
  47                             		.loc 1 87 11
  48 0031 E4 40 05                		mov.L	[r4], 20[r0]
  49                             	.LVL2:
  90:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   int32_t outres1 = fc_params->input_offset * fc_params->filter_offset * filter_dims->n;
  50                             		.loc 1 90 3 is_stmt 1
  91:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   const int32_t loop_res1 = filter_dims->n - (filter_dims->n & 0x0f);
  51                             		.loc 1 91 3
  91:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   const int32_t loop_res1 = filter_dims->n - (filter_dims->n & 0x0f);
  52                             		.loc 1 91 11 is_stmt 0
  53 0034 4F F5                   		mul	r15, r5
  54 0036 A2 05                   		mov.L	r5, 32[r0]
  55                             	.LVL3:
  92:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  56                             		.loc 1 92 3 is_stmt 1
  92:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  57                             		.loc 1 92 17 is_stmt 0
  58 0038 FB 76 F0                		mov.L	#-16, r7
  59 003b 53 F7                   		and	r15, r7
  60 003d A1 07                   		mov.L	r7, 16[r0]
  61                             	.LVL4:
  62                             		.loc 1 94 3 is_stmt 1
  63                             	.LBB19:
  64                             		.loc 1 94 8
  65                             		.loc 1 94 3 is_stmt 0
  66 003f 61 0A                   		cmp	#0, r10
  67 0041 2A 05 38 B6 00          		ble	.L3
  68                             	.LBE19:
  90:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   int32_t outres1 = fc_params->input_offset * fc_params->filter_offset * filter_dims->n;
  69                             		.loc 1 90 15
  70 0046 EF 93                   		mov.L	r9, r3
  71                             	.LVL5:
  72                             	.LBB20:
  73                             		.loc 1 94 16
  74 0048 66 0D                   		mov.L	#0, r13
  75 004a FB 62 00 00 00 00       		mov.L	#.LANCHOR0, r6
  76 0050 EF 72                   		mov.L	r7, r2
  77 0052 E7 08 01                		mov.L	r8, 4[r0]
  78 0055 A8 81                   		mov.L	8[r0], r1
  79                             	.LVL6:
  80 0057 E7 09 07                		mov.L	r9, 28[r0]
  81 005a E7 0C 09                		mov.L	r12, 36[r0]
  82 005d ED 0C 03                		mov.L	12[r0], r12
  83 0060 EF 79                   		mov.L	r7, r9
  84                             	.LVL7:
  85                             		.balign 8,3,1
  86                             	.L2:
  87                             	.LBB14:
  95:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   {
  96:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     int32_t tmp = 0;
  88                             		.loc 1 96 13
  89 0062 66 05                   		mov.L	#0, r5
  90                             	.LBB15:
  97:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  98:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     // Process by 16
  99:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     for (int32_t rhs_cols_idx = 0; rhs_cols_idx < loop_res1; rhs_cols_idx = rhs_cols_idx + 16)
  91                             		.loc 1 99 5
  92 0064 61 02                   		cmp	#0, r2
  93 0066 2B 60                   		ble	.L8
  94 0068 EF 3A                   		mov.L	r3, r10
  95 006a FF 24 39                		add	r3, r9, r4
  96                             	.LBE15:
  96:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
  97                             		.loc 1 96 13
  98 006d 66 05                   		mov.L	#0, r5
  99                             	.LVL8:
 100 006f 03                      		.balign 8,3,5
 101                             	.L4:
 102                             	.LBB16:
 100:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 101:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx];
 103                             		.loc 1 101 7 is_stmt 1 discriminator 3
 104                             		.loc 1 101 17 is_stmt 0 discriminator 3
 105 0070 CC A7                   		mov.B	[r10], r7
 102:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+1];
 106                             		.loc 1 102 17 discriminator 3
 107 0072 CD A8 01                		mov.B	1[r10], r8
 101:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+1];
 108                             		.loc 1 101 11 discriminator 3
 109 0075 4B 75                   		add	r7, r5
 110                             	.LVL9:
 111                             		.loc 1 102 7 is_stmt 1 discriminator 3
 103:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+2];
 112                             		.loc 1 103 17 is_stmt 0 discriminator 3
 113 0077 CD A7 02                		mov.B	2[r10], r7
 102:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+1];
 114                             		.loc 1 102 11 discriminator 3
 115 007a 4B 58                   		add	r5, r8
 116                             	.LVL10:
 117                             		.loc 1 103 7 is_stmt 1 discriminator 3
 104:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+3];
 118                             		.loc 1 104 17 is_stmt 0 discriminator 3
 119 007c CD A5 03                		mov.B	3[r10], r5
 103:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+2];
 120                             		.loc 1 103 11 discriminator 3
 121 007f 4B 87                   		add	r8, r7
 122                             	.LVL11:
 123                             		.loc 1 104 7 is_stmt 1 discriminator 3
 105:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+4];
 124                             		.loc 1 105 17 is_stmt 0 discriminator 3
 125 0081 CD A8 04                		mov.B	4[r10], r8
 104:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+3];
 126                             		.loc 1 104 11 discriminator 3
 127 0084 4B 75                   		add	r7, r5
 128                             	.LVL12:
 129                             		.loc 1 105 7 is_stmt 1 discriminator 3
 106:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+5];
 130                             		.loc 1 106 17 is_stmt 0 discriminator 3
 131 0086 CD A7 05                		mov.B	5[r10], r7
 105:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+4];
 132                             		.loc 1 105 11 discriminator 3
 133 0089 4B 58                   		add	r5, r8
 134                             	.LVL13:
 135                             		.loc 1 106 7 is_stmt 1 discriminator 3
 107:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+6];
 136                             		.loc 1 107 17 is_stmt 0 discriminator 3
 137 008b CD A5 06                		mov.B	6[r10], r5
 106:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+5];
 138                             		.loc 1 106 11 discriminator 3
 139 008e 4B 87                   		add	r8, r7
 140                             	.LVL14:
 141                             		.loc 1 107 7 is_stmt 1 discriminator 3
 108:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+7];
 142                             		.loc 1 108 17 is_stmt 0 discriminator 3
 143 0090 CD A8 07                		mov.B	7[r10], r8
 107:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+6];
 144                             		.loc 1 107 11 discriminator 3
 145 0093 4B 75                   		add	r7, r5
 146                             	.LVL15:
 147                             		.loc 1 108 7 is_stmt 1 discriminator 3
 109:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+8];
 148                             		.loc 1 109 17 is_stmt 0 discriminator 3
 149 0095 CD A7 08                		mov.B	8[r10], r7
 108:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+7];
 150                             		.loc 1 108 11 discriminator 3
 151 0098 4B 58                   		add	r5, r8
 152                             	.LVL16:
 153                             		.loc 1 109 7 is_stmt 1 discriminator 3
 110:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+9];
 154                             		.loc 1 110 17 is_stmt 0 discriminator 3
 155 009a CD A5 09                		mov.B	9[r10], r5
 109:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+8];
 156                             		.loc 1 109 11 discriminator 3
 157 009d 4B 87                   		add	r8, r7
 158                             	.LVL17:
 159                             		.loc 1 110 7 is_stmt 1 discriminator 3
 111:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+10];
 160                             		.loc 1 111 17 is_stmt 0 discriminator 3
 161 009f CD A8 0A                		mov.B	10[r10], r8
 110:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+9];
 162                             		.loc 1 110 11 discriminator 3
 163 00a2 4B 75                   		add	r7, r5
 164                             	.LVL18:
 165                             		.loc 1 111 7 is_stmt 1 discriminator 3
 112:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+11];
 166                             		.loc 1 112 17 is_stmt 0 discriminator 3
 167 00a4 CD A7 0B                		mov.B	11[r10], r7
 111:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+10];
 168                             		.loc 1 111 11 discriminator 3
 169 00a7 4B 58                   		add	r5, r8
 170                             	.LVL19:
 171                             		.loc 1 112 7 is_stmt 1 discriminator 3
 113:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+12];
 172                             		.loc 1 113 17 is_stmt 0 discriminator 3
 173 00a9 CD A5 0C                		mov.B	12[r10], r5
 112:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+11];
 174                             		.loc 1 112 11 discriminator 3
 175 00ac 4B 87                   		add	r8, r7
 176                             	.LVL20:
 177                             		.loc 1 113 7 is_stmt 1 discriminator 3
 114:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+13];
 178                             		.loc 1 114 17 is_stmt 0 discriminator 3
 179 00ae CD A8 0D                		mov.B	13[r10], r8
 113:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+12];
 180                             		.loc 1 113 11 discriminator 3
 181 00b1 4B 75                   		add	r7, r5
 182                             	.LVL21:
 183                             		.loc 1 114 7 is_stmt 1 discriminator 3
 115:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+14];
 184                             		.loc 1 115 17 is_stmt 0 discriminator 3
 185 00b3 CD A7 0E                		mov.B	14[r10], r7
 114:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+13];
 186                             		.loc 1 114 11 discriminator 3
 187 00b6 4B 58                   		add	r5, r8
 188                             	.LVL22:
 189                             		.loc 1 115 7 is_stmt 1 discriminator 3
 116:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+15];
 190                             		.loc 1 116 17 is_stmt 0 discriminator 3
 191 00b8 CD A5 0F                		mov.B	15[r10], r5
 115:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx+14];
 192                             		.loc 1 115 11 discriminator 3
 193 00bb 4B 87                   		add	r8, r7
 194                             	.LVL23:
 195                             		.loc 1 116 7 is_stmt 1 discriminator 3
 196 00bd 71 AA 10                		add	#16, r10
 197                             	.LVL24:
 198                             		.loc 1 116 11 is_stmt 0 discriminator 3
 199 00c0 4B 75                   		add	r7, r5
 200                             	.LVL25:
  99:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 201                             		.loc 1 99 5 discriminator 3
 202 00c2 47 A4                   		cmp	r10, r4
 203 00c4 21 AC                   		bne	.L4
 204                             	.LVL26:
 205                             		.balign 8,3,1
 206                             	.L8:
 207                             	.LBE16:
 208                             	.LBB17:
 117:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     }
 118:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     // Remaining process
 119:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     for (int32_t rhs_cols_idx = loop_res1; rhs_cols_idx < filter_dims->n; rhs_cols_idx++)
 209                             		.loc 1 119 5
 210 00c6 47 F2                   		cmp	r15, r2
 211 00c8 28 11                   		bge	.L5
 212 00ca FF 27 23                		add	r2, r3, r7
 213 00cd 4B 3F                   		add	r3, r15
 214                             	.LVL27:
 215 00cf 03                      		.balign 8,3,5
 216                             	.L6:
 120:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 121:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       tmp += rhs[rhs_cols_idx];
 217                             		.loc 1 121 7 is_stmt 1 discriminator 3
 218                             		.loc 1 121 17 is_stmt 0 discriminator 3
 219 00d0 FD 28 7A                		mov.B	[r7+], r10
 220                             	.LVL28:
 221                             		.loc 1 121 11 discriminator 3
 222 00d3 4B A5                   		add	r10, r5
 223                             	.LVL29:
 119:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 224                             		.loc 1 119 5 discriminator 3
 225 00d5 47 7F                   		cmp	r7, r15
 226 00d7 21 F9                   		bne	.L6
 227                             	.LVL30:
 228                             		.balign 8,3,1
 229                             	.L5:
 230                             	.LBE17:
 122:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     }
 123:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     outres3[rhs_rows_idx] = tmp * fc_params->input_offset;
 231                             		.loc 1 123 5 is_stmt 1 discriminator 2
 232                             		.loc 1 123 33 is_stmt 0 discriminator 2
 233 00d9 4F E5                   		mul	r14, r5
 234                             	.LVL31:
 235                             		.loc 1 123 27 discriminator 2
 236 00db FE 2D 65                		mov.L	r5, [r13,r6]
 124:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     rhs += filter_dims->n;
 237                             		.loc 1 124 5 is_stmt 1 discriminator 2
 238                             		.loc 1 124 23 is_stmt 0 discriminator 2
 239 00de EC 1F                   		mov.L	[r1], r15
 240                             	.LBE14:
  94:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   {
 241                             		.loc 1 94 60 discriminator 2
 242 00e0 ED CA 03                		mov.L	12[r12], r10
  94:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   {
 243                             		.loc 1 94 78 discriminator 2
 244 00e3 62 1D                   		add	#1, r13
 245                             	.LVL32:
 246                             	.LBB18:
 247                             		.loc 1 124 9 discriminator 2
 248 00e5 4B F3                   		add	r15, r3
 249                             	.LVL33:
 250                             	.LBE18:
  94:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   {
 251                             		.loc 1 94 3 discriminator 2
 252 00e7 47 DA                   		cmp	r13, r10
 253 00e9 2B 07                   		ble	.L35
 254 00eb EC BE                   		mov.L	[r11], r14
 255 00ed 38 75 FF                		bra	.L2
 256                             	.L35:
 257 00f0 ED 08 01                		mov.L	4[r0], r8
 258 00f3 ED 09 07                		mov.L	28[r0], r9
 259 00f6 ED 0C 09                		mov.L	36[r0], r12
 260                             	.LVL34:
 261                             		.balign 8,3,1
 262                             	.L3:
 263 00f9 E5 00 04 07             		mov.L	16[r0], 28[r0]
 264                             	.LBE20:
 125:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   }
 126:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   //*********************************************************************//
 127:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   while (batch_cnt)
 265                             		.loc 1 127 9
 266 00fd A9 0F                   		mov.L	20[r0], r7
 267 00ff 61 07                   		cmp	#0, r7
 268 0101 3A 3C 01                		beq	.L10
 269                             	.LVL35:
 270                             		.balign 8,3,1
 271                             	.L9:
 272                             	.LBB21:
 273                             	.LBB22:
 128:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   {
 129:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     const q7_t *lhs = input;
 130:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     int32_t outres2 = 0;
 131:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     for (int32_t rhs_cols_idx = 0; rhs_cols_idx < loop_res1; rhs_cols_idx = rhs_cols_idx + 16)
 274                             		.loc 1 131 5
 275 0104 A9 07                   		mov.L	16[r0], r7
 276                             	.LBE22:
 130:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     for (int32_t rhs_cols_idx = 0; rhs_cols_idx < loop_res1; rhs_cols_idx = rhs_cols_idx + 16)
 277                             		.loc 1 130 13
 278 0106 66 05                   		mov.L	#0, r5
 279                             	.LBB23:
 280                             		.loc 1 131 5
 281 0108 61 07                   		cmp	#0, r7
 282 010a 2B 56                   		ble	.L22
 283 010c EC 07                   		mov.L	[r0], r7
 284 010e A9 8C                   		mov.L	28[r0], r4
 285 0110 4B 74                   		add	r7, r4
 286                             	.LBE23:
 130:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     for (int32_t rhs_cols_idx = 0; rhs_cols_idx < loop_res1; rhs_cols_idx = rhs_cols_idx + 16)
 287                             		.loc 1 130 13
 288 0112 66 05                   		mov.L	#0, r5
 289                             	.LVL36:
 290 0114 76 10 01 00             		.balign 8,3,5
 291                             	.L11:
 292                             	.LBB24:
 132:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 133:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx];
 293                             		.loc 1 133 7 is_stmt 1 discriminator 3
 294                             		.loc 1 133 21 is_stmt 0 discriminator 3
 295 0118 CC 73                   		mov.B	[r7], r3
 134:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+1];
 296                             		.loc 1 134 21 discriminator 3
 297 011a 88 7A                   		mov.B	1[r7], r2
 133:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+1];
 298                             		.loc 1 133 15 discriminator 3
 299 011c 4B 35                   		add	r3, r5
 300                             	.LVL37:
 301                             		.loc 1 134 7 is_stmt 1 discriminator 3
 135:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+2];
 302                             		.loc 1 135 21 is_stmt 0 discriminator 3
 303 011e 88 F3                   		mov.B	2[r7], r3
 134:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+1];
 304                             		.loc 1 134 15 discriminator 3
 305 0120 4B 52                   		add	r5, r2
 306                             	.LVL38:
 307                             		.loc 1 135 7 is_stmt 1 discriminator 3
 136:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+3];
 308                             		.loc 1 136 21 is_stmt 0 discriminator 3
 309 0122 88 FD                   		mov.B	3[r7], r5
 135:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+2];
 310                             		.loc 1 135 15 discriminator 3
 311 0124 4B 23                   		add	r2, r3
 312                             	.LVL39:
 313                             		.loc 1 136 7 is_stmt 1 discriminator 3
 137:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+4];
 314                             		.loc 1 137 21 is_stmt 0 discriminator 3
 315 0126 89 72                   		mov.B	4[r7], r2
 136:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+3];
 316                             		.loc 1 136 15 discriminator 3
 317 0128 4B 35                   		add	r3, r5
 318                             	.LVL40:
 319                             		.loc 1 137 7 is_stmt 1 discriminator 3
 138:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+5];
 320                             		.loc 1 138 21 is_stmt 0 discriminator 3
 321 012a 89 7B                   		mov.B	5[r7], r3
 137:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+4];
 322                             		.loc 1 137 15 discriminator 3
 323 012c 4B 52                   		add	r5, r2
 324                             	.LVL41:
 325                             		.loc 1 138 7 is_stmt 1 discriminator 3
 139:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+6];
 326                             		.loc 1 139 21 is_stmt 0 discriminator 3
 327 012e 89 F5                   		mov.B	6[r7], r5
 138:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+5];
 328                             		.loc 1 138 15 discriminator 3
 329 0130 4B 23                   		add	r2, r3
 330                             	.LVL42:
 331                             		.loc 1 139 7 is_stmt 1 discriminator 3
 140:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+7];
 332                             		.loc 1 140 21 is_stmt 0 discriminator 3
 333 0132 89 FA                   		mov.B	7[r7], r2
 139:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+6];
 334                             		.loc 1 139 15 discriminator 3
 335 0134 4B 35                   		add	r3, r5
 336                             	.LVL43:
 337                             		.loc 1 140 7 is_stmt 1 discriminator 3
 141:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+8];
 338                             		.loc 1 141 21 is_stmt 0 discriminator 3
 339 0136 8A 73                   		mov.B	8[r7], r3
 140:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+7];
 340                             		.loc 1 140 15 discriminator 3
 341 0138 4B 52                   		add	r5, r2
 342                             	.LVL44:
 343                             		.loc 1 141 7 is_stmt 1 discriminator 3
 142:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+9];
 344                             		.loc 1 142 21 is_stmt 0 discriminator 3
 345 013a 8A 7D                   		mov.B	9[r7], r5
 141:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+8];
 346                             		.loc 1 141 15 discriminator 3
 347 013c 4B 23                   		add	r2, r3
 348                             	.LVL45:
 349                             		.loc 1 142 7 is_stmt 1 discriminator 3
 143:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+10];
 350                             		.loc 1 143 21 is_stmt 0 discriminator 3
 351 013e 8A F2                   		mov.B	10[r7], r2
 142:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+9];
 352                             		.loc 1 142 15 discriminator 3
 353 0140 4B 35                   		add	r3, r5
 354                             	.LVL46:
 355                             		.loc 1 143 7 is_stmt 1 discriminator 3
 144:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+11];
 356                             		.loc 1 144 21 is_stmt 0 discriminator 3
 357 0142 8A FB                   		mov.B	11[r7], r3
 143:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+10];
 358                             		.loc 1 143 15 discriminator 3
 359 0144 4B 52                   		add	r5, r2
 360                             	.LVL47:
 361                             		.loc 1 144 7 is_stmt 1 discriminator 3
 145:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+12];
 362                             		.loc 1 145 21 is_stmt 0 discriminator 3
 363 0146 8B 75                   		mov.B	12[r7], r5
 144:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+11];
 364                             		.loc 1 144 15 discriminator 3
 365 0148 4B 23                   		add	r2, r3
 366                             	.LVL48:
 367                             		.loc 1 145 7 is_stmt 1 discriminator 3
 146:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+13];
 368                             		.loc 1 146 21 is_stmt 0 discriminator 3
 369 014a 8B 7A                   		mov.B	13[r7], r2
 145:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+12];
 370                             		.loc 1 145 15 discriminator 3
 371 014c 4B 35                   		add	r3, r5
 372                             	.LVL49:
 373                             		.loc 1 146 7 is_stmt 1 discriminator 3
 147:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+14];
 374                             		.loc 1 147 21 is_stmt 0 discriminator 3
 375 014e 8B F3                   		mov.B	14[r7], r3
 146:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+13];
 376                             		.loc 1 146 15 discriminator 3
 377 0150 4B 52                   		add	r5, r2
 378                             	.LVL50:
 379                             		.loc 1 147 7 is_stmt 1 discriminator 3
 148:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+15];
 380                             		.loc 1 148 21 is_stmt 0 discriminator 3
 381 0152 8B FD                   		mov.B	15[r7], r5
 147:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx+14];
 382                             		.loc 1 147 15 discriminator 3
 383 0154 4B 23                   		add	r2, r3
 384                             	.LVL51:
 385                             		.loc 1 148 7 is_stmt 1 discriminator 3
 386 0156 71 77 10                		add	#16, r7
 387                             	.LVL52:
 388                             		.loc 1 148 15 is_stmt 0 discriminator 3
 389 0159 4B 35                   		add	r3, r5
 390                             	.LVL53:
 131:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 391                             		.loc 1 131 5 discriminator 3
 392 015b 47 74                   		cmp	r7, r4
 393 015d 21 BB                   		bne	.L11
 394                             	.LVL54:
 395 015f 03                      		.balign 8,3,1
 396                             	.L22:
 397                             	.LBE24:
 398                             	.LBB25:
 149:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     }
 150:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     // Remaining process
 151:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     for (int32_t rhs_cols_idx = loop_res1; rhs_cols_idx < filter_dims->n; rhs_cols_idx++)
 399                             		.loc 1 151 5
 400 0160 A9 07                   		mov.L	16[r0], r7
 401 0162 47 F7                   		cmp	r15, r7
 402 0164 28 15                   		bge	.L12
 403 0166 EC 07                   		mov.L	[r0], r7
 404 0168 06 89 07 04             		add	16[r0], r7
 405 016c EC 03                   		mov.L	[r0], r3
 406 016e 4B F3                   		add	r15, r3
 407                             	.LVL55:
 408                             		.balign 8,3,5
 409                             	.L13:
 152:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 153:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       outres2 += lhs[rhs_cols_idx];
 410                             		.loc 1 153 7 is_stmt 1 discriminator 3
 411                             		.loc 1 153 21 is_stmt 0 discriminator 3
 412 0170 FD 28 74                		mov.B	[r7+], r4
 413                             	.LVL56:
 414                             		.loc 1 153 15 discriminator 3
 415 0173 4B 45                   		add	r4, r5
 416                             	.LVL57:
 151:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 417                             		.loc 1 151 5 discriminator 3
 418 0175 47 73                   		cmp	r7, r3
 419 0177 21 F9                   		bne	.L13
 420                             	.LVL58:
 421                             		.balign 8,3,1
 422                             	.L12:
 423                             	.LBE25:
 154:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     }
 155:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     outres2 *= fc_params->filter_offset;
 424                             		.loc 1 155 5 is_stmt 1
 425                             		.loc 1 155 13 is_stmt 0
 426 0179 ED BE 01                		mov.L	4[r11], r14
 427 017c 4F 5E                   		mul	r5, r14
 428                             	.LVL59:
 156:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 157:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     for (int32_t rhs_rows_idx = 0; rhs_rows_idx < output_dims->c; rhs_rows_idx += 1)
 429                             		.loc 1 157 5 is_stmt 1
 430                             	.LBB26:
 431                             		.loc 1 157 10
 432                             		.loc 1 157 5 is_stmt 0
 433 017e 61 0A                   		cmp	#0, r10
 434 0180 2A 05 38 A6 00          		ble	.L20
 435 0185 06 89 0E 08             		add	32[r0], r14
 436                             	.LVL60:
 437                             		.loc 1 157 18
 438 0189 66 0D                   		mov.L	#0, r13
 439 018b E7 0E 01                		mov.L	r14, 4[r0]
 440 018e ED 0E 06                		mov.L	24[r0], r14
 441 0191 2E 37                   		bra	.L19
 442                             	.LVL61:
 443                             	.L25:
 444                             	.LBB27:
 445                             	.LBB28:
 446                             	.LBB29:
 447                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
 448                             		.loc 2 823 22
 449 0193 66 05                   		mov.L	#0, r5
 450                             	.LVL62:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 451                             		.loc 2 824 5 is_stmt 1
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 452                             		.loc 2 825 9
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 453                             		.loc 2 833 9
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 454                             		.loc 2 824 8 is_stmt 0
 455 0195 61 07                   		cmp	#0, r7
 456 0197 29 7D                   		blt	.L39
 457                             	.L17:
 458                             		.loc 2 833 9
 459                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 460 0199 FD 60 57                		shlr r5, r7
 461 019c FD 74 27 00             	adc #0, r7
 462                             	
 463                             	 ; 0 "" 2
 464                             	.LVL63:
 465                             		.balign 8,3,4
 466                             	.L18:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 467                             		.loc 2 839 5 is_stmt 1
 468                             	.LBE29:
 469                             	.LBE28:
 158:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 159:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       rhs = kernel;
 160:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       lhs = input;
 161:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       q31_t res = 0;
 162:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       if (bias)
 163:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       {
 164:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****           res = *bias++;
 165:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       }
 166:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       int32_t rhs_cols_idx = filter_dims->n;
 167:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #if defined __CCRX__ || defined __CCRL__
 168:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       res = __rmpab(res, rhs_cols_idx, (signed char *)lhs,(signed char *)rhs)
 169:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 170:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #else
 171:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       asm inline ("mov.l %1, r1\n"
 172:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       "mov.l %2, r2\n"
 173:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       "mov.l %3, r3\n"
 174:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       "mov.l %0, r4\n"
 175:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       "rmpa.b\n"
 176:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       "mov.l r4, %0\n"
 177:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****             : "+r" (res)
 178:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       :  "r" (lhs), "r" (rhs), "r" (rhs_cols_idx)
 179:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 180:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #endif
 181:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       res += outres1 + outres2 + outres3[rhs_rows_idx];
 182:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       //********************************************************************//
 183:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       // Quantize down
 184:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       res = arm_nn_requantize(res, quant_params->multiplier, quant_params->shift);
 185:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 186:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       // Add offset
 187:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       res += fc_params->output_offset;
 470                             		.loc 1 187 7
 471                             		.loc 1 187 11 is_stmt 0
 472 01a0 06 89 B7 02             		add	8[r11].L, r7
 473                             	.LVL64:
 188:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 189:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       // Clamp the result
 190:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       res = MAX(res, fc_params->activation.min);
 474                             		.loc 1 190 7 is_stmt 1
 475                             		.loc 1 190 11 is_stmt 0
 476 01a4 ED B5 03                		mov.L	12[r11], r5
 477                             	.LVL65:
 191:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       res = MIN(res, fc_params->activation.max);
 478                             		.loc 1 191 11
 479 01a7 ED BA 04                		mov.L	16[r11], r10
 190:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       res = MIN(res, fc_params->activation.max);
 480                             		.loc 1 190 11
 481 01aa FC 13 57                		max	r5, r7
 482                             	.LVL66:
 483                             		.loc 1 191 7 is_stmt 1
 192:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 193:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       *output++ = (q7_t)res;
 484                             		.loc 1 193 7
 485                             		.loc 1 193 14 is_stmt 0
 486 01ad 62 1C                   		add	#1, r12
 487                             	.LVL67:
 191:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 488                             		.loc 1 191 11
 489 01af FC 17 A7                		min	r10, r7
 490                             	.LVL68:
 491                             		.loc 1 193 17
 492 01b2 71 CA FF                		add	#-1, r12, r10
 493                             		.loc 1 193 19
 494 01b5 C3 A7                   		mov.B	r7, [r10]
 495                             	.LVL69:
 194:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 195:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       kernel += filter_dims->n;
 496                             		.loc 1 195 7 is_stmt 1
 497                             	.LBE27:
 157:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 498                             		.loc 1 157 80 is_stmt 0
 499 01b7 62 1D                   		add	#1, r13
 500                             	.LVL70:
 501                             	.LBB36:
 502                             		.loc 1 195 28
 503 01b9 A8 87                   		mov.L	8[r0], r7
 504                             	.LVL71:
 505 01bb EC 7F                   		mov.L	[r7], r15
 506                             	.LBE36:
 157:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 507                             		.loc 1 157 62
 508 01bd A8 8F                   		mov.L	12[r0], r7
 509 01bf ED 7A 03                		mov.L	12[r7], r10
 510                             	.LBB37:
 511                             		.loc 1 195 14
 512 01c2 4B F9                   		add	r15, r9
 513                             	.LVL72:
 514                             	.LBE37:
 157:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     {
 515                             		.loc 1 157 5
 516 01c4 47 DA                   		cmp	r13, r10
 517 01c6 2B 5F                   		ble	.L40
 518                             	.LVL73:
 519                             		.balign 8,3,1
 520                             	.L19:
 521                             	.LBB38:
 159:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       lhs = input;
 522                             		.loc 1 159 7 is_stmt 1
 160:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       q31_t res = 0;
 523                             		.loc 1 160 7
 161:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       if (bias)
 524                             		.loc 1 161 7
 162:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       {
 525                             		.loc 1 162 7
 164:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       }
 526                             		.loc 1 164 11
 162:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       {
 527                             		.loc 1 162 10 is_stmt 0
 528 01c8 61 0E                   		cmp	#0, r14
 529 01ca 20 57                   		beq	.L24
 164:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       }
 530                             		.loc 1 164 15
 531 01cc FD 2A E7                		mov.L	[r14+], r7
 532                             	.LVL74:
 533 01cf 03                      		.balign 8,3,2
 534                             	.L15:
 166:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #if defined __CCRX__ || defined __CCRL__
 535                             		.loc 1 166 7 is_stmt 1 discriminator 2
 171:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       "mov.l %2, r2\n"
 536                             		.loc 1 171 7 discriminator 2
 181:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       //********************************************************************//
 537                             		.loc 1 181 32 is_stmt 0 discriminator 2
 538 01d0 FD C2 DA                		shll	#2, r13, r10
 539 01d3 E7 0A 06                		mov.L	r10, 24[r0]
 171:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       "mov.l %2, r2\n"
 540                             		.loc 1 171 7 discriminator 2
 541 01d6 EC 0A                   		mov.L	[r0], r10
 542                             	 ; 171 "../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c" 1
 543 01d8 EF A1                   		mov.l r10, r1
 544 01da EF 92                   	mov.l r9, r2
 545 01dc EF F3                   	mov.l r15, r3
 546 01de EF 74                   	mov.l r7, r4
 547 01e0 7F 8C                   	rmpa.b
 548 01e2 EF 47                   	mov.l r4, r7
 549                             	
 550                             	 ; 0 "" 2
 551                             	.LVL75:
 181:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       //********************************************************************//
 552                             		.loc 1 181 7 is_stmt 1 discriminator 2
 184:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 553                             		.loc 1 184 7 discriminator 2
 181:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       //********************************************************************//
 554                             		.loc 1 181 32 is_stmt 0 discriminator 2
 555 01e4 ED 0A 06                		mov.L	24[r0], r10
 556 01e7 70 AA 00 00 00 00       		add	#.LANCHOR0, r10
 184:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 557                             		.loc 1 184 13 discriminator 2
 558 01ed ED 85 01                		mov.L	4[r8], r5
 559                             	.LVL76:
 560                             	.LBB33:
 561                             	.LBB30:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 562                             		.loc 2 816 5 is_stmt 1 discriminator 2
 563                             	.LBE30:
 564                             	.LBE33:
 181:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       //********************************************************************//
 565                             		.loc 1 181 32 is_stmt 0 discriminator 2
 566 01f0 A8 0A                   		mov.L	4[r0], r2
 567 01f2 06 88 A2                		add	[r10].L, r2
 568                             	.LBB34:
 569                             	.LBB31:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 570                             		.loc 2 816 25 discriminator 2
 571 01f5 66 04                   		mov.L	#0, r4
 572 01f7 FC 13 54                		max	r5, r4
 573                             	.LBE31:
 574                             	.LBE34:
 181:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       //********************************************************************//
 575                             		.loc 1 181 11 discriminator 2
 576 01fa 4B 27                   		add	r2, r7
 577                             	.LVL77:
 578                             	.LBB35:
 579                             	.LBB32:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 580                             		.loc 2 817 5 discriminator 2
 581 01fc EC 8A                   		mov.L	[r8], r10
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 582                             		.loc 2 816 11 discriminator 2
 583 01fe FD 62 47                		shll	r4, r7
 584                             	.LVL78:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 585                             		.loc 2 817 5 is_stmt 1 discriminator 2
 586                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 587 0201 FD 03 7A                		emula r7, r10, a0
 588 0204 FD 19 00                	racl #1, a0
 589 0207 FD 1F 07                	mvfachi #0, a0, r7
 590                             	
 591                             	 ; 0 "" 2
 592                             	.LVL79:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 593                             		.loc 2 823 5 discriminator 2
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 594                             		.loc 2 823 22 is_stmt 0 discriminator 2
 595 020a 61 05                   		cmp	#0, r5
 596 020c 2A 87                   		bgt	.L25
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 597                             		.loc 2 823 22
 598 020e 7E 15                   		neg	r5
 599                             	.LVL80:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 600                             		.loc 2 824 5 is_stmt 1
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 601                             		.loc 2 825 9
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 602                             		.loc 2 833 9
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 603                             		.loc 2 824 8 is_stmt 0
 604 0210 61 07                   		cmp	#0, r7
 605 0212 28 87                   		bge	.L17
 606                             	.L39:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 607                             		.loc 2 825 9
 608                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 609 0214 7E 17                   		neg r7
 610 0216 FD 60 57                	shlr r5, r7
 611 0219 FD 74 27 00             	adc #0, r7
 612 021d 7E 17                   	neg r7
 613                             	
 614                             	 ; 0 "" 2
 615                             	.LVL81:
 616 021f 2E 81                   		bra	.L18
 617                             	.LVL82:
 618                             	.L24:
 619                             	.LBE32:
 620                             	.LBE35:
 161:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****       if (bias)
 621                             		.loc 1 161 13
 622 0221 66 07                   		mov.L	#0, r7
 623 0223 2E AD                   		bra	.L15
 624                             	.LVL83:
 625                             	.L40:
 626 0225 E7 0E 06                		mov.L	r14, 24[r0]
 627                             	.LVL84:
 628                             		.balign 8,3,1
 629                             	.L20:
 630                             	.LBE38:
 631                             	.LBE26:
 196:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     }
 197:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     input += filter_dims->n;
 632                             		.loc 1 197 5 is_stmt 1
 198:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     output += output_dims->c;
 199:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     batch_cnt--;
 633                             		.loc 1 199 14 is_stmt 0
 634 0228 A9 0F                   		mov.L	20[r0], r7
 635 022a 60 17                   		sub	#1, r7
 636 022c A1 0F                   		mov.L	r7, 20[r0]
 637                             	.LVL85:
 197:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     output += output_dims->c;
 638                             		.loc 1 197 11
 639 022e EC 07                   		mov.L	[r0], r7
 640 0230 4B F7                   		add	r15, r7
 641 0232 E3 07                   		mov.L	r7, [r0]
 642                             	.LVL86:
 198:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     output += output_dims->c;
 643                             		.loc 1 198 5 is_stmt 1
 198:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     output += output_dims->c;
 644                             		.loc 1 198 12 is_stmt 0
 645 0234 4B AC                   		add	r10, r12
 646                             	.LVL87:
 647                             		.loc 1 199 5 is_stmt 1
 648                             	.LBE21:
 127:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   {
 649                             		.loc 1 127 9 is_stmt 0
 650 0236 A9 0F                   		mov.L	20[r0], r7
 651                             	.LVL88:
 652 0238 61 07                   		cmp	#0, r7
 653 023a 3B CA FE                		bne	.L9
 654                             	.LVL89:
 655                             		.balign 8,3,1
 656                             	.L10:
 200:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   }
 201:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 202:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #else
 203:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   while (batch_cnt)
 204:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   {
 205:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     arm_nn_vec_mat_mult_t_s8(input,
 206:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               kernel,
 207:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               bias,
 208:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               output,
 209:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               fc_params->input_offset,
 210:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               0,
 211:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               fc_params->output_offset,
 212:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               quant_params->multiplier,
 213:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               quant_params->shift,
 214:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               filter_dims->n, /* col_dim or accum_depth */
 215:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               output_dims->c, /* row_dim or output_depth */
 216:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               fc_params->activation.min,
 217:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****                               fc_params->activation.max);
 218:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     input += filter_dims->n;
 219:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     output += output_dims->c;
 220:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****     batch_cnt--;
 221:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   }
 222:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** #endif
 223:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   return (ARM_MATH_SUCCESS);
 657                             		.loc 1 223 3 is_stmt 1
 224:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** }
 658                             		.loc 1 224 1 is_stmt 0
 659 023d 66 01                   		mov.L	#0, r1
 660 023f 3F 6D 19                		rtsd	#100, r6-r13
 661                             	.LFE82:
 663 0242 74 10 01 00 00 00       		.section	.text.arm_fully_connected_s8_get_buffer_size,"ax",@progbits
 664                             		.global	_arm_fully_connected_s8_get_buffer_size
 666                             	_arm_fully_connected_s8_get_buffer_size:
 667                             	.LFB83:
 225:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** 
 226:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
 227:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** {
 668                             		.loc 1 227 1 is_stmt 1
 669                             	.LVL90:
 228:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   (void)filter_dims;
 670                             		.loc 1 228 3
 229:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c ****   return 0;
 671                             		.loc 1 229 3
 230:../src/CMSIS/NN/Source/FullyConnectedFunctions/arm_fully_connected_s8.c **** }
 672                             		.loc 1 230 1 is_stmt 0
 673 0000 66 01                   		mov.L	#0, r1
 674                             	.LVL91:
 675 0002 02                      		rts
 676                             	.LFE83:
 678                             		.global	_outres3
 679                             		.section	.bss.outres3,"aw",@nobits
 680                             		.balign 4
 681                             		.set	.LANCHOR0,. + 0
 684                             	_outres3:
 685 0000 00 00 00 00 00 00 00 00 		.zero	2560
 685      00 00 00 00 00 00 00 00 
 685      00 00 00 00 00 00 00 00 
 685      00 00 00 00 00 00 00 00 
 685      00 00 00 00 00 00 00 00 
 744                             	.Letext0:
 745                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 746                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 747                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 748                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 749                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 750                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 751                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 752                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 753                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 754                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
