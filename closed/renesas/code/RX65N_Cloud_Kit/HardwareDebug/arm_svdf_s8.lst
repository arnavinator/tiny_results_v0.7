   1                             		.file	"arm_svdf_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_svdf_s8,"ax",@progbits
   5                             		.global	_arm_svdf_s8
   7                             	_arm_svdf_s8:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c"
   1:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** /*
   2:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
   4:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
   6:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
  10:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
  12:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  */
  18:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  19:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Title:        arm_svdf_s8.c
  22:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Description:  S8 basic SVDF layer function
  23:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
  24:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * $Date:        15. April 2021
  25:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * $Revision:    V.1.5.0
  26:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
  27:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Target Processor:  Cortex-M processors
  28:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
  29:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * -------------------------------------------------------------------- */
  30:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  31:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #include "arm_nnfunctions.h"
  32:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #include "arm_nnsupportfunctions.h"
  33:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  34:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** /**
  35:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * @ingroup groupNN
  36:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  */
  37:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  38:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** /**
  39:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * @addtogroup SVDF
  40:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * @{
  41:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  */
  42:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  43:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** /*
  44:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * S8 SVDF layer function for TensorFlow Lite
  45:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
  46:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  * Refer to header file for details.
  47:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  *
  48:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****  */
  49:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  50:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** arm_status arm_svdf_s8(const cmsis_nn_context *input_ctx,
  51:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_context *output_ctx,
  52:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_svdf_params *svdf_params,
  53:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_per_tensor_quant_params *input_quant_params,
  54:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_per_tensor_quant_params *output_quant_params,
  55:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_dims *input_dims,
  56:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const q7_t *input_data,
  57:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_dims *state_dims,
  58:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        q15_t *state_data,
  59:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_dims *weights_feature_dims,
  60:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const q7_t *weights_feature_data,
  61:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_dims *weights_time_dims,
  62:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const q15_t *weights_time_data,
  63:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_dims *bias_dims,
  64:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const q31_t *bias_data,
  65:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        const cmsis_nn_dims *output_dims,
  66:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                        q7_t *output_data)
  67:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** {
  10                             		.loc 1 67 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 72 00 54 FF             		add	#-172, r0
  15                             	.LCFI1:
  16                             		.loc 1 67 1 is_stmt 0
  17 0006 75 47 D0                		mov.L	#0xd0, r7
  18 0009 4B 07                   		add	r0, r7
  19 000b EF 3C                   		mov.L	r3, r12
  20 000d ED 7E 01                		mov.L	4[r7], r14
  21 0010 A9 7B                   		mov.L	20[r7], r3
  22                             	.LVL1:
  23 0012 A9 FD                   		mov.L	28[r7], r5
  24 0014 ED 7A 04                		mov.L	16[r7], r10
  68:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)bias_dims;
  69:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)state_dims;
  70:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)output_dims;
  71:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  72:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t multiplier_in = input_quant_params->multiplier;
  73:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t shift_in = input_quant_params->shift;
  74:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t multiplier_out = output_quant_params->multiplier;
  75:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t shift_2 = output_quant_params->shift;
  76:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t zp_in = svdf_params->input_offset;
  77:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t zp_out = svdf_params->output_offset;
  78:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t in_activation_min = svdf_params->input_activation.min;
  79:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t in_activation_max = svdf_params->input_activation.max;
  80:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t out_activation_min = svdf_params->output_activation.min;
  81:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t out_activation_max = svdf_params->output_activation.max;
  82:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int16_t rank = svdf_params->rank;
  83:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  84:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t input_batches = input_dims->n;
  25                             		.loc 1 84 19
  26 0017 E4 E0 0E                		mov.L	[r14], 56[r0]
  85:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t input_height = input_dims->h;
  86:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t feature_batches = weights_feature_dims->n;
  27                             		.loc 1 86 19
  28 001a EC 36                   		mov.L	[r3], r6
  87:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t time_batches = weights_time_dims->h;
  29                             		.loc 1 87 19
  30 001c ED 5B 01                		mov.L	4[r5], r11
  67:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)bias_dims;
  31                             		.loc 1 67 1
  32 001f EC 79                   		mov.L	[r7], r9
  88:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t unit_count = feature_batches / rank;
  89:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  90:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     q31_t *buffer_a = (q31_t *)input_ctx->buf;
  91:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     q31_t *buffer_b = (q31_t *)output_ctx->buf;
  92:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  93:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     memmove((q15_t *)state_data,
  94:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             (q15_t *)state_data + 1,
  95:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             (size_t)(input_batches * feature_batches * time_batches * (int32_t)sizeof(int16_t)));
  33                             		.loc 1 95 36
  34 0021 AB 83                   		mov.L	56[r0], r3
  35 0023 4F 63                   		mul	r6, r3
  88:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t unit_count = feature_batches / rank;
  36                             		.loc 1 88 48
  37 0025 DC C5                   		mov.W	[r12], r5
  38                             		.loc 1 95 54
  39 0027 4F B3                   		mul	r11, r3
  90:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     q31_t *buffer_b = (q31_t *)output_ctx->buf;
  40                             		.loc 1 90 12
  41 0029 E4 10 10                		mov.L	[r1], 64[r0]
  91:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  42                             		.loc 1 91 12
  43 002c E4 20 11                		mov.L	[r2], 68[r0]
  93:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             (q15_t *)state_data + 1,
  44                             		.loc 1 93 5
  45 002f 6C 13                   		shll	#1, r3
  46 0031 71 A2 02                		add	#2, r10, r2
  47                             	.LVL2:
  48 0034 EF A1                   		mov.L	r10, r1
  49                             	.LVL3:
  67:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)bias_dims;
  50                             		.loc 1 67 1
  51 0036 ED 78 02                		mov.L	8[r7], r8
  52 0039 E5 70 06 0D             		mov.L	24[r7], 52[r0]
  53 003d E5 70 08 19             		mov.L	32[r7], 100[r0]
  54 0041 E5 70 0A 12             		mov.L	40[r7], 72[r0]
  68:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)state_dims;
  55                             		.loc 1 68 5 is_stmt 1
  69:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)output_dims;
  56                             		.loc 1 69 5
  70:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  57                             		.loc 1 70 5
  72:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t shift_in = input_quant_params->shift;
  58                             		.loc 1 72 5
  67:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     (void)bias_dims;
  59                             		.loc 1 67 1 is_stmt 0
  60 0045 E5 70 0C 1A             		mov.L	48[r7], 104[r0]
  72:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t shift_in = input_quant_params->shift;
  61                             		.loc 1 72 17
  62 0049 E4 40 08                		mov.L	[r4], 32[r0]
  63                             	.LVL4:
  73:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t multiplier_out = output_quant_params->multiplier;
  64                             		.loc 1 73 5 is_stmt 1
  73:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t multiplier_out = output_quant_params->multiplier;
  65                             		.loc 1 73 17 is_stmt 0
  66 004c E5 40 01 09             		mov.L	4[r4], 36[r0]
  67                             	.LVL5:
  74:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t shift_2 = output_quant_params->shift;
  68                             		.loc 1 74 5 is_stmt 1
  74:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const q31_t shift_2 = output_quant_params->shift;
  69                             		.loc 1 74 17 is_stmt 0
  70 0050 E4 90 17                		mov.L	[r9], 92[r0]
  71                             	.LVL6:
  75:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t zp_in = svdf_params->input_offset;
  72                             		.loc 1 75 5 is_stmt 1
  75:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t zp_in = svdf_params->input_offset;
  73                             		.loc 1 75 17 is_stmt 0
  74 0053 E5 90 01 14             		mov.L	4[r9], 80[r0]
  75                             	.LVL7:
  76:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t zp_out = svdf_params->output_offset;
  76                             		.loc 1 76 5 is_stmt 1
  76:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t zp_out = svdf_params->output_offset;
  77                             		.loc 1 76 19 is_stmt 0
  78 0057 ED C7 01                		mov.L	4[r12], r7
  79                             	.LVL8:
  77:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t in_activation_min = svdf_params->input_activation.min;
  80                             		.loc 1 77 5 is_stmt 1
  77:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t in_activation_min = svdf_params->input_activation.min;
  81                             		.loc 1 77 19 is_stmt 0
  82 005a E5 C0 02 18             		mov.L	8[r12], 96[r0]
  83                             	.LVL9:
  78:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t in_activation_max = svdf_params->input_activation.max;
  84                             		.loc 1 78 5 is_stmt 1
  78:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t in_activation_max = svdf_params->input_activation.max;
  85                             		.loc 1 78 19 is_stmt 0
  86 005e E5 C0 03 0A             		mov.L	12[r12], 40[r0]
  87                             	.LVL10:
  79:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t out_activation_min = svdf_params->output_activation.min;
  88                             		.loc 1 79 5 is_stmt 1
  79:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t out_activation_min = svdf_params->output_activation.min;
  89                             		.loc 1 79 19 is_stmt 0
  90 0062 E5 C0 04 0B             		mov.L	16[r12], 44[r0]
  91                             	.LVL11:
  80:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t out_activation_max = svdf_params->output_activation.max;
  92                             		.loc 1 80 5 is_stmt 1
  80:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t out_activation_max = svdf_params->output_activation.max;
  93                             		.loc 1 80 19 is_stmt 0
  94 0066 E5 C0 05 15             		mov.L	20[r12], 84[r0]
  95                             	.LVL12:
  81:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int16_t rank = svdf_params->rank;
  96                             		.loc 1 81 5 is_stmt 1
  81:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int16_t rank = svdf_params->rank;
  97                             		.loc 1 81 19 is_stmt 0
  98 006a E5 C0 06 16             		mov.L	24[r12], 88[r0]
  99                             	.LVL13:
  82:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 100                             		.loc 1 82 5 is_stmt 1
  84:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t input_height = input_dims->h;
 101                             		.loc 1 84 5
  85:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t feature_batches = weights_feature_dims->n;
 102                             		.loc 1 85 5
  88:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 103                             		.loc 1 88 19 is_stmt 0
 104 006e EF 64                   		mov.L	r6, r4
 105                             	.LVL14:
 106 0070 FC 23 54                		div	r5, r4
 107 0073 A3 8C                   		mov.L	r4, 60[r0]
  85:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t feature_batches = weights_feature_dims->n;
 108                             		.loc 1 85 19
 109 0075 ED EC 01                		mov.L	4[r14], r12
 110                             	.LVL15:
  86:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t time_batches = weights_time_dims->h;
 111                             		.loc 1 86 5 is_stmt 1
  87:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t unit_count = feature_batches / rank;
 112                             		.loc 1 87 5
  88:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 113                             		.loc 1 88 5
  90:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     q31_t *buffer_b = (q31_t *)output_ctx->buf;
 114                             		.loc 1 90 5
  91:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 115                             		.loc 1 91 5
  93:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             (q15_t *)state_data + 1,
 116                             		.loc 1 93 5
 117 0078 A7 0D                   		mov.L	r5, 116[r0]
 118 007a 05 00 00 00             		bsr	_memmove
 119                             	.LVL16:
  96:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
  97:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     for (int i_batch = 0; i_batch < input_batches; i_batch++)
 120                             		.loc 1 97 5
 121                             	.LBB32:
 122                             		.loc 1 97 10
 123                             		.loc 1 97 5 is_stmt 0
 124 007e AF 0D                   		mov.L	116[r0], r5
 125 0080 AB 84                   		mov.L	56[r0], r4
 126 0082 61 04                   		cmp	#0, r4
 127 0084 2A 05 38 3A 02          		ble	.L2
 128 0089 70 B4 FF FF FF 7F       		add	#0x7fffffff, r11, r4
 129 008f FF 39 B6                		mul	r11, r6, r9
 130 0092 4B 44                   		add	r4, r4
 131 0094 A4 8C                   		mov.L	r4, 76[r0]
 132 0096 7E 17                   		neg	r7
 133                             	.LVL17:
 134 0098 A3 07                   		mov.L	r7, 48[r0]
 135 009a EF 87                   		mov.L	r8, r7
 136                             	.LVL18:
 137 009c 4B 99                   		add	r9, r9
 138 009e EF 4D                   		mov.L	r4, r13
 139 00a0 4B AD                   		add	r10, r13
 140                             		.loc 1 97 14
 141 00a2 66 08                   		mov.L	#0, r8
 142 00a4 E7 0A 1B                		mov.L	r10, 108[r0]
 143 00a7 EF CA                   		mov.L	r12, r10
 144 00a9 EF 8C                   		mov.L	r8, r12
 145                             	.LVL19:
 146 00ab ED 08 0E                		mov.L	56[r0], r8
 147 00ae EF 94                   		mov.L	r9, r4
 148 00b0 EF D9                   		mov.L	r13, r9
 149 00b2 A7 05                   		mov.L	r5, 112[r0]
 150 00b4 EF 4D                   		mov.L	r4, r13
 151 00b6 0F                      		bra	.L4
 152                             	.LVL20:
 153                             	.L67:
 154 00b7 4B D9                   		add	r13, r9
 155                             	.LVL21:
 156                             		.loc 1 97 5 discriminator 2
 157 00b9 47 C8                   		cmp	r12, r8
 158 00bb 20 34                   		beq	.L66
 159                             	.LVL22:
 160                             		.balign 8,3,1
 161                             	.L4:
 162                             	.LBB33:
  98:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
  99:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         q15_t *res_ptr = state_data + (time_batches * i_batch * feature_batches) + (time_batches - 
 163                             		.loc 1 99 9 is_stmt 1
 100:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         const q7_t *weight = weights_feature_data;
 164                             		.loc 1 100 9
 101:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         const q7_t *input = input_data + i_batch * input_height;
 165                             		.loc 1 101 9
 102:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 103:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         arm_status res = arm_nn_vec_mat_mult_t_svdf_s8(input,
 166                             		.loc 1 103 9
 167                             		.loc 1 103 26 is_stmt 0
 168 00bd EF 93                   		mov.L	r9, r3
 169 00bf EF 71                   		mov.L	r7, r1
 170 00c1 E5 00 0B 07             		mov.L	44[r0], 28[r0]
 171 00c5 E5 00 0A 06             		mov.L	40[r0], 24[r0]
 172 00c9 A1 0E                   		mov.L	r6, 20[r0]
 173 00cb E7 0A 04                		mov.L	r10, 16[r0]
 174 00ce E5 00 09 03             		mov.L	36[r0], 12[r0]
 175 00d2 E5 00 08 02             		mov.L	32[r0], 8[r0]
 176 00d6 E7 0B 01                		mov.L	r11, 4[r0]
 177 00d9 AB 04                   		mov.L	48[r0], r4
 178 00db F8 06 00                		mov.L	#0, [r0]
 179 00de AB 0A                   		mov.L	52[r0], r2
 180                             	.LBE33:
  97:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 181                             		.loc 1 97 59
 182 00e0 62 1C                   		add	#1, r12
 183                             	.LVL23:
 184 00e2 4B A7                   		add	r10, r7
 185                             	.LVL24:
 186                             	.LBB34:
 187                             		.loc 1 103 26
 188 00e4 05 00 00 00             		bsr	_arm_nn_vec_mat_mult_t_svdf_s8
 189                             	.LVL25:
 104:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        weight,
 105:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        res_ptr,
 106:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        -zp_in,
 107:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        0,
 108:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        time_batches,
 109:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        multiplier_in,
 110:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        shift_in,
 111:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        input_height,
 112:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        feature_batches,
 113:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        in_activation_min,
 114:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                                                        in_activation_max);
 115:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 116:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         if (res != ARM_MATH_SUCCESS)
 190                             		.loc 1 116 9 is_stmt 1
 191                             		.loc 1 116 12 is_stmt 0
 192 00e8 61 01                   		cmp	#0, r1
 193 00ea 20 CD                   		beq	.L67
 194                             	.LBE34:
 195                             	.LBE32:
 117:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 118:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             return res;
 119:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         }
 120:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     }
 121:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 122:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 123:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         q31_t *ptr_a = buffer_a;
 124:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         const q15_t *v2 = state_data;
 125:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         for (int i_batch = 0; i_batch < input_batches; i_batch++)
 126:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 127:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             const q15_t *v1 = weights_time_data;
 128:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 129:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             for (int i_feature_batch = 0; i_feature_batch < feature_batches; i_feature_batch++)
 130:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 131:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 *ptr_a = 0;
 132:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 int32_t sum = 0;
 133:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
 134:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 int j = 0;
 135:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 int32_t block_count = time_batches >> 1;
 136:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int i = 0; i < block_count; i++)
 137:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 138:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     j += 2;
 139:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     q31_t r1 = arm_nn_read_q15x2_ia(&v1);
 140:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     q31_t r2 = arm_nn_read_q15x2_ia(&v2);
 141:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 142:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     sum = __SMLAD(r1, r2, sum);
 143:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 144:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 145:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 // Process the remaining data
 146:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (; j < time_batches; j++)
 147:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 148:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     sum += *v1 * *v2;
 149:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v1++;
 150:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v2++;
 151:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 152:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #else
 153:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int j = 0; j < time_batches; j++)
 154:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 155:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     sum += *v1 * *v2;
 156:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v1++;
 157:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v2++;
 158:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 159:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #endif
 160:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 161:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 *ptr_a = sum;
 162:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 ptr_a++;
 163:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             }
 164:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         }
 165:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     }
 166:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 167:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     if (bias_data)
 168:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 169:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         if (unit_count == feature_batches)
 170:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 171:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             for (int i = 0; i < input_batches; i++)
 172:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 173:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 q31_t *output_temp = buffer_b + i * feature_batches;
 174:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 const q31_t *ptr_a = buffer_a + i * feature_batches;
 175:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 176:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 const int32_t *bi = bias_data;
 177:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int j = 0; j < feature_batches; j++)
 178:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 179:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     output_temp[j] = ptr_a[j] + bi[j];
 180:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 181:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             }
 182:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         }
 183:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         else
 184:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 185:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             for (int i_batch = 0; i_batch < input_batches; i_batch++)
 186:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 187:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 q31_t *output_data_temp = buffer_b + i_batch * unit_count;
 188:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 q31_t *ptr_a = buffer_a + i_batch * feature_batches;
 189:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 190:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int i = 0; i < unit_count; i++)
 191:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 192:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     int32_t sum = bias_data[i];
 193:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     for (int j = 0; j < rank; j++)
 194:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     {
 195:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                         sum += *ptr_a;
 196:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                         ptr_a++;
 197:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     }
 198:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     output_data_temp[i] = sum;
 199:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 200:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             }
 201:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         }
 202:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     }
 203:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     else
 204:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 205:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         for (int i_batch = 0; i_batch < input_batches; i_batch++)
 206:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 207:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             q31_t *output_data_temp = buffer_b + i_batch * unit_count;
 208:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             q31_t *ptr_a = buffer_a + i_batch * feature_batches;
 209:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 210:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             for (int i = 0; i < unit_count; i++)
 211:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 212:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 int32_t sum = 0;
 213:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int j = 0; j < rank; j++)
 214:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 215:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     sum += *ptr_a;
 216:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     ptr_a++;
 217:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 218:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 output_data_temp[i] = sum;
 219:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             }
 220:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         }
 221:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     }
 222:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 223:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #if defined(ARM_MATH_MVEI)
 224:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     int32_t num_elements = input_batches * unit_count;
 225:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     const int32_t loop_count = (num_elements + 3) / 4;
 226:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     for (int i_op = 0; i_op < loop_count; i_op++)
 227:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 228:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         mve_pred16_t p = vctp32q((uint32_t)num_elements);
 229:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         int32x4_t op = vldrwq_z_s32(buffer_b, p);
 230:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         op = arm_requantize_mve(op, multiplier_out, shift_2);
 231:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         op = vaddq_n_s32(op, zp_out);
 232:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         const int32x4_t min_vec = vdupq_n_s32((int8_t)out_activation_min);
 233:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         const int32x4_t max_vec = vdupq_n_s32((int8_t)out_activation_max);
 234:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         op = vmaxq_s32(op, min_vec);
 235:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         op = vminq_s32(op, max_vec);
 236:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         vstrbq_p_s32(output_data, op, p);
 237:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         output_data += 4;
 238:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         buffer_b += 4;
 239:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         num_elements -= 4;
 240:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     }
 241:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #else
 242:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     for (int i = 0; i < input_batches * unit_count; i++)
 243:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         output_data[i] = (q7_t)CLAMP(
 245:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 246:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     }
 247:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #endif
 248:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 249:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     return (ARM_MATH_SUCCESS);
 250:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** }
 196                             		.loc 1 250 1
 197 00ec 3F 6D 33                		rtsd	#204, r6-r13
 198                             	.LVL26:
 199                             	.L66:
 200 00ef ED 0A 1B                		mov.L	108[r0], r10
 201                             	.LVL27:
 202 00f2 AF 05                   		mov.L	112[r0], r5
 203 00f4 61 06                   		cmp	#0, r6
 204 00f6 2B 53                   		ble	.L5
 205 00f8 ED 0D 13                		mov.L	76[r0], r13
 206 00fb 62 2D                   		add	#2, r13
 207 00fd FD C2 67                		shll	#2, r6, r7
 208 0100 A2 07                   		mov.L	r7, 32[r0]
 209                             	.LVL28:
 210                             	.LBB35:
 211                             	.LBB36:
 125:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 212                             		.loc 1 125 18
 213 0102 66 0F                   		mov.L	#0, r15
 214                             	.LBE36:
 123:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         const q15_t *v2 = state_data;
 215                             		.loc 1 123 16
 216 0104 ED 0E 10                		mov.L	64[r0], r14
 217 0107 ED 09 0E                		mov.L	56[r0], r9
 218 010a A2 09                   		mov.L	r1, 36[r0]
 219                             	.LVL29:
 220 010c ED 08 19                		mov.L	100[r0], r8
 221 010f A2 85                   		mov.L	r5, 40[r0]
 222                             	.LVL30:
 223                             		.balign 8,3,1
 224                             	.L6:
 225                             	.LBB43:
 226                             	.LBB37:
 227                             	.LBB38:
 129:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 228                             		.loc 1 129 22
 229 0111 66 01                   		mov.L	#0, r1
 230                             	.LBE38:
 127:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 231                             		.loc 1 127 26
 232 0113 EF 8C                   		mov.L	r8, r12
 233                             	.LVL31:
 234                             		.balign 8,3,1
 235                             	.L11:
 236                             	.LBB42:
 237                             	.LBB39:
 132:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
 238                             		.loc 1 132 25
 239 0115 66 05                   		mov.L	#0, r5
 240                             	.LBB40:
 153:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 241                             		.loc 1 153 17
 242 0117 61 0B                   		cmp	#0, r11
 243 0119 2B 19                   		ble	.L10
 244 011b EF C4                   		mov.L	r12, r4
 245 011d FF 23 DA                		add	r13, r10, r3
 246                             	.LBE40:
 132:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** #if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
 247                             		.loc 1 132 25
 248 0120 66 05                   		mov.L	#0, r5
 249                             	.LVL32:
 250                             		.balign 8,3,5
 251                             	.L7:
 252                             	.LBB41:
 155:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v1++;
 253                             		.loc 1 155 21 is_stmt 1 discriminator 3
 155:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v1++;
 254                             		.loc 1 155 34 is_stmt 0 discriminator 3
 255 0122 FD 29 A7                		mov.W	[r10+], r7
 256                             	.LVL33:
 155:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v1++;
 257                             		.loc 1 155 28 discriminator 3
 258 0125 FD 29 42                		mov.W	[r4+], r2
 259                             	.LVL34:
 155:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v1++;
 260                             		.loc 1 155 32 discriminator 3
 261 0128 4F 27                   		mul	r2, r7
 155:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v1++;
 262                             		.loc 1 155 25 discriminator 3
 263 012a 4B 75                   		add	r7, r5
 264                             	.LVL35:
 156:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     v2++;
 265                             		.loc 1 156 21 is_stmt 1 discriminator 3
 157:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 266                             		.loc 1 157 21 discriminator 3
 153:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 267                             		.loc 1 153 17 is_stmt 0 discriminator 3
 268 012c 47 3A                   		cmp	r3, r10
 269 012e 21 F4                   		bne	.L7
 270 0130 4B DC                   		add	r13, r12
 271                             	.LVL36:
 272                             		.balign 8,3,5
 273                             	.L10:
 274                             	.LBE41:
 161:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 ptr_a++;
 275                             		.loc 1 161 17 is_stmt 1 discriminator 2
 161:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 ptr_a++;
 276                             		.loc 1 161 24 is_stmt 0 discriminator 2
 277 0132 FE 21 E5                		mov.L	r5, [r1,r14]
 162:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             }
 278                             		.loc 1 162 17 is_stmt 1 discriminator 2
 279                             	.LVL37:
 280                             	.LBE39:
 129:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 281                             		.loc 1 129 93 is_stmt 0 discriminator 2
 282 0135 62 11                   		add	#1, r1
 283                             	.LVL38:
 129:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 284                             		.loc 1 129 13 discriminator 2
 285 0137 47 16                   		cmp	r1, r6
 286 0139 21 DC                   		bne	.L11
 287                             	.LBE42:
 288                             	.LBE37:
 125:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 289                             		.loc 1 125 63
 290 013b 62 1F                   		add	#1, r15
 291                             	.LVL39:
 292 013d 06 89 0E 08             		add	32[r0], r14
 293                             	.LVL40:
 125:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 294                             		.loc 1 125 9
 295 0141 47 F9                   		cmp	r15, r9
 296 0143 21 CE                   		bne	.L6
 297 0145 AA 09                   		mov.L	36[r0], r1
 298                             	.LVL41:
 299 0147 AA 85                   		mov.L	40[r0], r5
 300                             	.LVL42:
 301                             		.balign 8,3,1
 302                             	.L5:
 303                             	.LBE43:
 304                             	.LBE35:
 167:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 305                             		.loc 1 167 5 is_stmt 1
 167:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 306                             		.loc 1 167 8 is_stmt 0
 307 0149 AC 87                   		mov.L	72[r0], r7
 308 014b 61 07                   		cmp	#0, r7
 309 014d 3A CF 01                		beq	.L68
 169:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 310                             		.loc 1 169 9 is_stmt 1
 169:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 311                             		.loc 1 169 12 is_stmt 0
 312 0150 AB 8F                   		mov.L	60[r0], r7
 313 0152 47 76                   		cmp	r7, r6
 314 0154 3A 22 01                		beq	.L69
 315                             	.LVL43:
 316 0157 61 07                   		cmp	#0, r7
 317 0159 2A 05 38 65 01          		ble	.L2
 318 015e EF 78                   		mov.L	r7, r8
 319 0160 6C 28                   		shll	#2, r8
 320 0162 FD C2 6D                		shll	#2, r6, r13
 321 0165 ED 09 10                		mov.L	64[r0], r9
 322 0168 ED 0C 11                		mov.L	68[r0], r12
 323 016b AC 86                   		mov.L	72[r0], r6
 324 016d 4B 86                   		add	r8, r6
 325 016f FD C2 5B                		shll	#2, r5, r11
 326                             	.LVL44:
 327 0172 ED 0E 0E                		mov.L	56[r0], r14
 328 0175 ED 0F 12                		mov.L	72[r0], r15
 329                             	.LVL45:
 330                             		.balign 8,3,1
 331                             	.L20:
 332                             	.LBB44:
 333                             	.LBB45:
 187:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 q31_t *ptr_a = buffer_a + i_batch * feature_batches;
 334                             		.loc 1 187 17 is_stmt 1
 188:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 335                             		.loc 1 188 17
 188:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 336                             		.loc 1 188 24 is_stmt 0
 337 0178 EF 97                   		mov.L	r9, r7
 338                             	.LVL46:
 190:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 339                             		.loc 1 190 17 is_stmt 1
 340                             	.LBB46:
 190:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 341                             		.loc 1 190 22
 342                             	.LBE46:
 188:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 343                             		.loc 1 188 24 is_stmt 0
 344 017a EF C2                   		mov.L	r12, r2
 345 017c EF F3                   		mov.L	r15, r3
 346                             	.LVL47:
 347 017e EF 00                   		.balign 8,3,3
 348                             	.L19:
 349                             	.LBB49:
 350                             	.LBB47:
 192:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     for (int j = 0; j < rank; j++)
 351                             		.loc 1 192 21 is_stmt 1
 192:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     for (int j = 0; j < rank; j++)
 352                             		.loc 1 192 29 is_stmt 0
 353 0180 FD 2A 3A                		mov.L	[r3+], r10
 354                             	.LVL48:
 193:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     {
 355                             		.loc 1 193 21 is_stmt 1
 356                             	.LBB48:
 193:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     {
 357                             		.loc 1 193 26
 193:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     {
 358                             		.loc 1 193 21 is_stmt 0
 359 0183 61 05                   		cmp	#0, r5
 360 0185 2B 13                   		ble	.L17
 361 0187 FF 24 B7                		add	r11, r7, r4
 362                             	.LVL49:
 363                             		.balign 8,3,4
 364                             	.L18:
 195:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                         ptr_a++;
 365                             		.loc 1 195 25 is_stmt 1 discriminator 3
 195:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                         ptr_a++;
 366                             		.loc 1 195 29 is_stmt 0 discriminator 3
 367 018a 06 88 7A                		add	[r7].L, r10
 368                             	.LVL50:
 196:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     }
 369                             		.loc 1 196 25 is_stmt 1 discriminator 3
 196:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     }
 370                             		.loc 1 196 30 is_stmt 0 discriminator 3
 371 018d 62 47                   		add	#4, r7
 372                             	.LVL51:
 193:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     {
 373                             		.loc 1 193 21 discriminator 3
 374 018f 47 74                   		cmp	r7, r4
 375 0191 21 F9                   		bne	.L18
 376 0193 77 10 01 00 00          		.balign 8,3,5
 377                             	.L17:
 378                             	.LBE48:
 198:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 379                             		.loc 1 198 21 is_stmt 1 discriminator 2
 198:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 380                             		.loc 1 198 41 is_stmt 0 discriminator 2
 381 0198 FD 22 2A                		mov.L	r10, [r2+]
 382                             	.LBE47:
 190:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 383                             		.loc 1 190 17 discriminator 2
 384 019b 47 36                   		cmp	r3, r6
 385 019d 21 E3                   		bne	.L19
 386                             	.LBE49:
 387                             	.LBE45:
 185:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 388                             		.loc 1 185 67
 389 019f 62 11                   		add	#1, r1
 390                             	.LVL52:
 391 01a1 4B D9                   		add	r13, r9
 392 01a3 4B 8C                   		add	r8, r12
 185:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 393                             		.loc 1 185 13
 394 01a5 47 1E                   		cmp	r1, r14
 395 01a7 21 D1                   		bne	.L20
 396                             	.LVL53:
 397                             		.balign 8,3,1
 398                             	.L59:
 399                             	.LBE44:
 400                             	.LBB50:
 242:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 401                             		.loc 1 242 39
 402 01a9 AB 87                   		mov.L	56[r0], r7
 403 01ab ED 0A 0F                		mov.L	60[r0], r10
 404 01ae 4F A7                   		mul	r10, r7
 405                             	.LVL54:
 406                             		.balign 8,3,1
 407                             	.L12:
 408                             	.LBB51:
 409                             	.LBB52:
 410                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
 411                             		.loc 2 823 22
 412 01b0 AD 04                   		mov.L	80[r0], r4
 413 01b2 7E 14                   		neg	r4
 414 01b4 AC 0D                   		mov.L	68[r0], r5
 415 01b6 ED 0A 14                		mov.L	80[r0], r10
 416 01b9 61 0A                   		cmp	#0, r10
 417 01bb 2B 04                   		ble 1f
 418 01bd 66 04                   		mov #0, r4
 419                             	1:
 420 01bf EF A1                   		mov.L	r10, r1
 421 01c1 FD 74 41 00             		max	#0, r1
 422 01c5 6C 27                   		shll	#2, r7
 423 01c7 AE 83                   		mov.L	104[r0], r3
 424 01c9 FF 22 75                		add	r7, r5, r2
 425                             	.LBE52:
 426                             	.LBE51:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 427                             		.loc 1 244 26
 428 01cc AD 0F                   		mov.L	84[r0], r7
 429 01ce CF 76                   		mov.B	r7, r6
 430 01d0 AD 87                   		mov.L	88[r0], r7
 431 01d2 CF 7B                   		mov.B	r7, r11
 432 01d4 ED 0C 17                		mov.L	92[r0], r12
 433 01d7 ED 09 18                		mov.L	96[r0], r9
 434 01da ED 0D 15                		mov.L	84[r0], r13
 435 01dd EF 78                   		mov.L	r7, r8
 436                             	.LVL55:
 437 01df 03                      		.balign 8,3,3
 438                             	.L40:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 439                             		.loc 1 244 9 is_stmt 1
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 440                             		.loc 1 244 32 is_stmt 0
 441 01e0 FD 2A 5A                		mov.L	[r5+], r10
 442                             	.LVL56:
 443                             	.LBB55:
 444                             	.LBB53:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 445                             		.loc 2 816 5 is_stmt 1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 446                             		.loc 2 816 11 is_stmt 0
 447 01e3 FD 62 1A                		shll	r1, r10
 448                             	.LVL57:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 449                             		.loc 2 817 5 is_stmt 1
 450 01e6 EF A7                   		mov.L	r10, r7
 451                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 452 01e8 FD 03 7C                		emula r7, r12, a0
 453 01eb FD 19 00                	racl #1, a0
 454 01ee FD 1F 07                	mvfachi #0, a0, r7
 455                             	
 456                             	 ; 0 "" 2
 457                             	.LVL58:
 458                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 459                             		.loc 2 824 5
 460                             		.loc 2 824 8 is_stmt 0
 461 01f1 61 07                   		cmp	#0, r7
 462 01f3 28 05 38 EA 00          		blt	.L70
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 463                             		.loc 2 833 9 is_stmt 1
 464                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 465 01f8 FD 60 47                		shlr r4, r7
 466 01fb FD 74 27 00             	adc #0, r7
 467                             	
 468                             	 ; 0 "" 2
 469                             	.LVL59:
 470 01ff 03                      		.balign 8,3,1
 471                             	.L29:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 472                             		.loc 2 839 5
 473                             	.LBE53:
 474                             	.LBE55:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 475                             		.loc 1 244 32 is_stmt 0
 476 0200 4B 97                   		add	r9, r7
 477 0202 47 87                   		cmp	r8, r7
 478 0204 29 05 38 CC 00          		bge	.L46
 479                             	.LVL60:
 480                             	.LBB56:
 481                             	.LBB57:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 482                             		.loc 2 816 5 is_stmt 1 discriminator 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 483                             		.loc 2 817 5 discriminator 1
 484 0209 EF A7                   		mov.L	r10, r7
 485                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 486 020b FD 03 7C                		emula r7, r12, a0
 487 020e FD 19 00                	racl #1, a0
 488 0211 FD 1F 07                	mvfachi #0, a0, r7
 489                             	
 490                             	 ; 0 "" 2
 491                             	.LVL61:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 492                             		.loc 2 823 5 discriminator 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 493                             		.loc 2 824 5 discriminator 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 494                             		.loc 2 824 8 is_stmt 0 discriminator 1
 495 0214 61 07                   		cmp	#0, r7
 496 0216 28 05 38 E8 00          		blt	.L71
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 497                             		.loc 2 833 9 is_stmt 1
 498                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 499 021b FD 60 47                		shlr r4, r7
 500 021e FD 74 27 00             	adc #0, r7
 501                             	
 502                             	 ; 0 "" 2
 503                             	.LVL62:
 504                             		.balign 8,3,1
 505                             	.L32:
 506                             		.loc 2 839 5
 507                             	.LBE57:
 508                             	.LBE56:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 509                             		.loc 1 244 32 is_stmt 0
 510 0222 4B 97                   		add	r9, r7
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 511                             		.loc 1 244 26
 512 0224 47 D7                   		cmp	r13, r7
 513 0226 2A 05 38 B3 00          		ble	.L33
 514                             	.LVL63:
 515                             		.balign 8,3,1
 516                             	.L75:
 517                             	.LBB59:
 518                             	.LBB60:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 519                             		.loc 2 816 5 is_stmt 1 discriminator 5
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 520                             		.loc 2 817 5 discriminator 5
 521 022b EF A7                   		mov.L	r10, r7
 522                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 523 022d FD 03 7C                		emula r7, r12, a0
 524 0230 FD 19 00                	racl #1, a0
 525 0233 FD 1F 07                	mvfachi #0, a0, r7
 526                             	
 527                             	 ; 0 "" 2
 528                             	.LVL64:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 529                             		.loc 2 823 5 discriminator 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 530                             		.loc 2 824 5 discriminator 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 531                             		.loc 2 824 8 is_stmt 0 discriminator 5
 532 0236 61 07                   		cmp	#0, r7
 533 0238 28 05 38 B8 00          		blt	.L72
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 534                             		.loc 2 833 9 is_stmt 1
 535                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 536 023d FD 60 47                		shlr r4, r7
 537 0240 FD 74 27 00             	adc #0, r7
 538                             	
 539                             	 ; 0 "" 2
 540                             	.LVL65:
 541                             		.balign 8,3,1
 542                             	.L35:
 543                             		.loc 2 839 5
 544                             	.LBE60:
 545                             	.LBE59:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 546                             		.loc 1 244 32 is_stmt 0
 547 0244 4B 97                   		add	r9, r7
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 548                             		.loc 1 244 26
 549 0246 47 87                   		cmp	r8, r7
 550 0248 29 05 38 A3 00          		bge	.L36
 551                             	.LVL66:
 552                             	.LBB62:
 553                             	.LBB63:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 554                             		.loc 2 816 5 is_stmt 1 discriminator 7
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 555                             		.loc 2 817 5 discriminator 7
 556                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 557 024d FD 03 AC                		emula r10, r12, a0
 558 0250 FD 19 00                	racl #1, a0
 559 0253 FD 1F 0A                	mvfachi #0, a0, r10
 560                             	
 561                             	 ; 0 "" 2
 562                             	.LVL67:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 563                             		.loc 2 823 5 discriminator 7
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 564                             		.loc 2 824 5 discriminator 7
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 565                             		.loc 2 824 8 is_stmt 0 discriminator 7
 566 0256 61 0A                   		cmp	#0, r10
 567 0258 28 05 38 B4 00          		blt	.L73
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 568                             		.loc 2 833 9 is_stmt 1
 569                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 570 025d FD 60 4A                		shlr r4, r10
 571 0260 FD 74 2A 00             	adc #0, r10
 572                             	
 573                             	 ; 0 "" 2
 574                             	.LVL68:
 575                             		.balign 8,3,2
 576                             	.L38:
 577                             		.loc 2 839 5
 578                             	.LBE63:
 579                             	.LBE62:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 580                             		.loc 1 244 26 is_stmt 0
 581 0264 FF 27 9A                		add	r9, r10, r7
 582 0267 EF 7A                   		mov.L	r7, r10
 583                             	.LVL69:
 584                             		.balign 8,3,5
 585                             	.L39:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 586                             		.loc 1 244 24 discriminator 12
 587 0269 FD 20 3A                		mov.B	r10, [r3+]
 588                             	.LVL70:
 242:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 589                             		.loc 1 242 5 discriminator 12
 590 026c 47 52                   		cmp	r5, r2
 591 026e 3B 72 FF                		bne	.L40
 592                             	.LBE50:
 249:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** }
 593                             		.loc 1 249 12
 594 0271 66 01                   		mov.L	#0, r1
 595                             	.LVL71:
 596                             		.balign 8,3,2
 597                             	.L74:
 598                             		.loc 1 250 1
 599 0273 3F 6D 33                		rtsd	#204, r6-r13
 600                             	.LVL72:
 601                             	.L69:
 602 0276 61 07                   		cmp	#0, r7
 603 0278 2B 48                   		ble	.L2
 604 027a EF 7B                   		mov.L	r7, r11
 605                             	.LVL73:
 606 027c EF 79                   		mov.L	r7, r9
 607 027e EF 7C                   		mov.L	r7, r12
 608 0280 6C 2C                   		shll	#2, r12
 609 0282 AC 0F                   		mov.L	68[r0], r7
 610 0284 ED 0A 10                		mov.L	64[r0], r10
 611 0287 43 A7                   		sub	r10, r7
 612 0289 EF A2                   		mov.L	r10, r2
 613 028b 4B C2                   		add	r12, r2
 614 028d 75 1B FC                		mul	#-4, r11
 615 0290 FF 0C C7                		sub	r12, r7, r12
 616 0293 75 19 F8                		mul	#-8, r9
 617 0296 ED 08 0E                		mov.L	56[r0], r8
 618 0299 ED 0D 12                		mov.L	72[r0], r13
 619                             	.LVL74:
 620                             		.balign 8,3,2
 621                             	.L16:
 622                             	.LBB69:
 623                             	.LBB70:
 173:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 const q31_t *ptr_a = buffer_a + i * feature_batches;
 624                             		.loc 1 173 17 is_stmt 1
 174:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 625                             		.loc 1 174 17
 176:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int j = 0; j < feature_batches; j++)
 626                             		.loc 1 176 17
 177:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 627                             		.loc 1 177 17
 628                             	.LBB71:
 177:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 629                             		.loc 1 177 22
 630 029c FF 26 2B                		add	r2, r11, r6
 631 029f EF D4                   		mov.L	r13, r4
 632 02a1 FF 25 2C                		add	r2, r12, r5
 633                             	.LBE71:
 634                             	.LBE70:
 635                             	.LBE69:
 636                             	.LBB74:
 123:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         const q15_t *v2 = state_data;
 637                             		.loc 1 123 16 is_stmt 0
 638 02a4 EF 6A                   		mov.L	r6, r10
 639                             	.LVL75:
 640 02a6 EF 00                   		.balign 8,3,3
 641                             	.L15:
 642                             	.LBE74:
 643                             	.LBB75:
 644                             	.LBB73:
 645                             	.LBB72:
 179:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 646                             		.loc 1 179 21 is_stmt 1 discriminator 3
 179:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 647                             		.loc 1 179 43 is_stmt 0 discriminator 3
 648 02a8 FD 2A A7                		mov.L	[r10+], r7
 179:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 649                             		.loc 1 179 51 discriminator 3
 650 02ab FD 2A 43                		mov.L	[r4+], r3
 179:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 651                             		.loc 1 179 47 discriminator 3
 652 02ae 4B 37                   		add	r3, r7
 179:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 653                             		.loc 1 179 36 discriminator 3
 654 02b0 FD 22 57                		mov.L	r7, [r5+]
 177:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 655                             		.loc 1 177 17 discriminator 3
 656 02b3 47 A2                   		cmp	r10, r2
 657 02b5 21 F3                   		bne	.L15
 658                             	.LBE72:
 659                             	.LBE73:
 171:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 660                             		.loc 1 171 49
 661 02b7 62 11                   		add	#1, r1
 662                             	.LVL76:
 663 02b9 FF 02 96                		sub	r9, r6, r2
 171:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 664                             		.loc 1 171 13
 665 02bc 47 18                   		cmp	r1, r8
 666 02be 21 DE                   		bne	.L16
 667                             	.LVL77:
 668                             		.balign 8,3,1
 669                             	.L2:
 670                             	.LBE75:
 671                             	.LBB76:
 242:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 672                             		.loc 1 242 39
 673 02c0 AB 87                   		mov.L	56[r0], r7
 674 02c2 ED 0A 0F                		mov.L	60[r0], r10
 675 02c5 4F A7                   		mul	r10, r7
 242:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****     {
 676                             		.loc 1 242 5
 677 02c7 61 07                   		cmp	#0, r7
 678 02c9 2B 05 38 E5 FE          		bgt	.L12
 679                             	.LBE76:
 249:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** }
 680                             		.loc 1 249 12
 681 02ce 66 01                   		mov.L	#0, r1
 682 02d0 2E A3                   		bra	.L74
 683                             	.LVL78:
 684                             	.L46:
 685                             	.LBB77:
 686 02d2 EF 87                   		mov.L	r8, r7
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 687                             		.loc 1 244 26
 688 02d4 47 D7                   		cmp	r13, r7
 689 02d6 2B 05 38 53 FF          		bgt	.L75
 690                             		.balign 8,3,1
 691                             	.L33:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 692                             		.loc 1 244 26 discriminator 6
 693 02db CF 6A                   		mov.B	r6, r10
 694 02dd 2E 8C                   		bra	.L39
 695                             	.LVL79:
 696                             	.L70:
 697                             	.LBB65:
 698                             	.LBB54:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 699                             		.loc 2 825 9 is_stmt 1
 700                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 701 02df 7E 17                   		neg r7
 702 02e1 FD 60 47                	shlr r4, r7
 703 02e4 FD 74 27 00             	adc #0, r7
 704 02e8 7E 17                   	neg r7
 705                             	
 706                             	 ; 0 "" 2
 707                             	.LVL80:
 708 02ea 38 16 FF                		bra	.L29
 709                             	.LVL81:
 710                             	.L36:
 711                             	.LBE54:
 712                             	.LBE65:
 244:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             arm_nn_requantize(buffer_b[i], multiplier_out, shift_2) + zp_out, out_activation_max, o
 713                             		.loc 1 244 26 is_stmt 0 discriminator 8
 714 02ed CF BA                   		mov.B	r11, r10
 715 02ef 38 7A FF                		bra	.L39
 716                             	.LVL82:
 717                             	.L72:
 718                             	.LBB66:
 719                             	.LBB61:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 720                             		.loc 2 825 9 is_stmt 1
 721                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 722 02f2 7E 17                   		neg r7
 723 02f4 FD 60 47                	shlr r4, r7
 724 02f7 FD 74 27 00             	adc #0, r7
 725 02fb 7E 17                   	neg r7
 726                             	
 727                             	 ; 0 "" 2
 728                             	.LVL83:
 729 02fd 38 47 FF                		bra	.L35
 730                             	.LVL84:
 731                             	.L71:
 732                             	.LBE61:
 733                             	.LBE66:
 734                             	.LBB67:
 735                             	.LBB58:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 736                             		.loc 2 825 9
 737                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 738 0300 7E 17                   		neg r7
 739 0302 FD 60 47                	shlr r4, r7
 740 0305 FD 74 27 00             	adc #0, r7
 741 0309 7E 17                   	neg r7
 742                             	
 743                             	 ; 0 "" 2
 744                             	.LVL85:
 745 030b 38 17 FF                		bra	.L32
 746                             	.LVL86:
 747                             	.L73:
 748                             	.LBE58:
 749                             	.LBE67:
 750                             	.LBB68:
 751                             	.LBB64:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 752                             		.loc 2 825 9
 753                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 754 030e 7E 1A                   		neg r10
 755 0310 FD 60 4A                	shlr r4, r10
 756 0313 FD 74 2A 00             	adc #0, r10
 757 0317 7E 1A                   	neg r10
 758                             	
 759                             	 ; 0 "" 2
 760                             	.LVL87:
 761 0319 38 4B FF                		bra	.L38
 762                             	.LVL88:
 763                             	.L68:
 764 031c AB 8F                   		mov.L	60[r0], r7
 765 031e 61 07                   		cmp	#0, r7
 766 0320 2B A0                   		ble	.L2
 767 0322 EF 72                   		mov.L	r7, r2
 768 0324 6C 22                   		shll	#2, r2
 769 0326 FD C2 6D                		shll	#2, r6, r13
 770 0329 06 89 02 11             		add	68[r0], r2
 771 032d ED 0C 10                		mov.L	64[r0], r12
 772 0330 EF 78                   		mov.L	r7, r8
 773 0332 75 18 FC                		mul	#-4, r8
 774 0335 FD C2 51                		shll	#2, r5, r1
 775                             	.LBE64:
 776                             	.LBE68:
 777                             	.LBE77:
 778                             	.LBB78:
 205:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 779                             		.loc 1 205 18 is_stmt 0
 780 0338 66 06                   		mov.L	#0, r6
 781 033a EF 79                   		mov.L	r7, r9
 782 033c 75 19 F8                		mul	#-8, r9
 783 033f ED 0E 0E                		mov.L	56[r0], r14
 784                             	.LVL89:
 785                             		.balign 8,3,2
 786                             	.L24:
 787                             	.LBB79:
 207:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             q31_t *ptr_a = buffer_a + i_batch * feature_batches;
 788                             		.loc 1 207 13 is_stmt 1
 208:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 789                             		.loc 1 208 13
 790 0342 FF 2B 28                		add	r2, r8, r11
 208:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 791                             		.loc 1 208 20 is_stmt 0
 792 0345 EF C7                   		mov.L	r12, r7
 793                             	.LVL90:
 210:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 794                             		.loc 1 210 13 is_stmt 1
 795                             	.LBB80:
 210:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 796                             		.loc 1 210 18
 797                             	.LBE80:
 208:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c **** 
 798                             		.loc 1 208 20 is_stmt 0
 799 0347 EF B3                   		mov.L	r11, r3
 800                             	.LVL91:
 801                             		.balign 8,3,1
 802                             	.L22:
 803                             	.LBB84:
 804                             	.LBB81:
 212:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int j = 0; j < rank; j++)
 805                             		.loc 1 212 25
 806 0349 66 0A                   		mov.L	#0, r10
 807                             	.LBB82:
 213:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 808                             		.loc 1 213 17
 809 034b 61 05                   		cmp	#0, r5
 810 034d 2B 14                   		ble	.L27
 811 034f FF 24 17                		add	r1, r7, r4
 812                             	.LBE82:
 212:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 for (int j = 0; j < rank; j++)
 813                             		.loc 1 212 25
 814 0352 66 0A                   		mov.L	#0, r10
 815                             	.LVL92:
 816 0354 76 10 01 00             		.balign 8,3,4
 817                             	.L23:
 818                             	.LBB83:
 215:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     ptr_a++;
 819                             		.loc 1 215 21 is_stmt 1 discriminator 3
 215:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                     ptr_a++;
 820                             		.loc 1 215 25 is_stmt 0 discriminator 3
 821 0358 06 88 7A                		add	[r7].L, r10
 822                             	.LVL93:
 216:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 823                             		.loc 1 216 21 is_stmt 1 discriminator 3
 216:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 }
 824                             		.loc 1 216 26 is_stmt 0 discriminator 3
 825 035b 62 47                   		add	#4, r7
 826                             	.LVL94:
 213:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****                 {
 827                             		.loc 1 213 17 discriminator 3
 828 035d 47 74                   		cmp	r7, r4
 829 035f 21 F9                   		bne	.L23
 830                             	.LVL95:
 831                             		.balign 8,3,5
 832                             	.L27:
 833                             	.LBE83:
 218:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             }
 834                             		.loc 1 218 17 is_stmt 1 discriminator 2
 218:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             }
 835                             		.loc 1 218 37 is_stmt 0 discriminator 2
 836 0361 FD 22 3A                		mov.L	r10, [r3+]
 837                             	.LBE81:
 210:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****             {
 838                             		.loc 1 210 13 discriminator 2
 839 0364 47 32                   		cmp	r3, r2
 840 0366 21 E3                   		bne	.L22
 841                             	.LBE84:
 842                             	.LBE79:
 205:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 843                             		.loc 1 205 63
 844 0368 62 16                   		add	#1, r6
 845                             	.LVL96:
 846 036a FF 02 9B                		sub	r9, r11, r2
 847 036d 4B DC                   		add	r13, r12
 205:../src/CMSIS/NN/Source/SVDFunctions/arm_svdf_s8.c ****         {
 848                             		.loc 1 205 9
 849 036f 47 6E                   		cmp	r6, r14
 850 0371 21 D1                   		bne	.L24
 851 0373 38 36 FE                		bra	.L59
 852                             	.LBE78:
 853                             	.LFE82:
 905                             	.Letext0:
 906                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 907                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 908                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 909                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 910                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 911                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 912                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 913                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 914                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 915                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 916                             		.file 13 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\string.h
