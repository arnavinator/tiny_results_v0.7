   1                             		.file	"arm_nn_accumulate_q7_to_q15.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_nn_accumulate_q7_to_q15,"ax",@progbits
   5                             		.global	_arm_nn_accumulate_q7_to_q15
   7                             	_arm_nn_accumulate_q7_to_q15:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c"
   1:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** /*
   2:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * Copyright (C) 2010-2020 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  *
   4:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  *
   6:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  *
  10:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  *
  12:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  */
  18:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  19:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * Title:        arm_nn_accumulate_q7_to_q15.c
  22:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * Description:  Accumulate q7 vector into q15 one.
  23:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  *
  24:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * $Date:        09. October 2020
  25:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * $Revision:    V.1.0.2
  26:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  *
  27:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * pSrc Processor:  Cortex-M CPUs
  28:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  *
  29:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * -------------------------------------------------------------------- */
  30:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  31:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** #include "arm_nnfunctions.h"
  32:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** #include "arm_nnsupportfunctions.h"
  33:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  34:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** /**
  35:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * @ingroup groupSupport
  36:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  */
  37:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  38:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** /**
  39:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * @addtogroup NNBasicMath
  40:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  * @{
  41:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****  */
  42:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  43:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** void arm_nn_accumulate_q7_to_q15(q15_t *pDst, const q7_t *pSrc, uint32_t length)
  44:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** {
  10                             		.loc 1 44 1
  11                             	.LVL0:
  12 0000 6E 6C                   		pushm	r6-r12
  13                             	.LCFI0:
  45:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     q15_t *pCnt = pDst;
  14                             		.loc 1 45 5
  15                             	.LVL1:
  46:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     const q7_t *pV = pSrc;
  16                             		.loc 1 46 5
  47:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     q31_t v1, v2, vo1, vo2;
  48:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     int32_t cnt = length >> 2;
  17                             		.loc 1 48 26 is_stmt 0
  18 0002 FD 82 3A                		shlr	#2, r3, r10
  19                             	.LVL2:
  47:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     q31_t v1, v2, vo1, vo2;
  20                             		.loc 1 47 5 is_stmt 1
  21                             		.loc 1 48 5
  49:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     q31_t in;
  22                             		.loc 1 49 5
  50:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  51:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     while (cnt > 0l)
  23                             		.loc 1 51 5
  24                             		.loc 1 51 11 is_stmt 0
  25 0005 3A DB 00                		beq	.L5
  26 0008 FD C2 A6                		shll	#2, r10, r6
  45:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     const q7_t *pV = pSrc;
  27                             		.loc 1 45 12
  28 000b EF 1E                   		mov.L	r1, r14
  29 000d 4B 26                   		add	r2, r6
  30                             	.LVL3:
  31 000f 03                      		.balign 8,3,1
  32                             	.L3:
  33                             	.LBB41:
  52:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     {
  53:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         q31_t value = arm_nn_read_q7x4_ia(&pV);
  34                             		.loc 1 53 9 is_stmt 1
  35                             	.LBB42:
  36                             	.LBB43:
  37                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
  38                             		.loc 2 526 5
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
  39                             		.loc 2 527 5
  40                             	.LBE43:
  41                             	.LBE42:
  42                             	.LBB45:
  43                             	.LBB46:
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
  44                             		.loc 2 541 5 is_stmt 0
  45 0010 EC E7                   		mov.L	[r14], r7
  46                             	.LBE46:
  47                             	.LBE45:
  48                             	.LBB48:
  49                             	.LBB44:
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
  50                             		.loc 2 527 5
  51 0012 FD 2A 25                		mov.L	[r2+], r5
  52                             	.LVL4:
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
  53                             		.loc 2 528 5 is_stmt 1
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
  54                             		.loc 2 530 5
  55                             	.LBE44:
  56                             	.LBE48:
  54:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         v1 = __SXTB16(__ROR((uint32_t)value, 8));
  57                             		.loc 1 54 9
  58                             	.LBB49:
  59                             	.LBB50:
  60                             		.file 3 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @version  V5.4.1
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * @date     27. May 2021
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /*
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  *
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            in the used linker script.
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   typedef struct {
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t const* src;
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t* dest;
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t  wlen;
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   } __copy_table_t;
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   typedef struct {
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t* dest;
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t  wlen;
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   } __zero_table_t;
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     }
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     }
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   _start();
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   Access to dedicated instructions
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   @{
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** */
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   No Operation
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Wait For Event
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Send Event
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            after the instruction has been completed.
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   int16_t result;
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Rotated value
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   op2 %= 32U;
  61                             		.loc 3 348 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   if (op2 == 0U)
  62                             		.loc 3 349 3
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     return op1;
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
  63                             		.loc 3 353 3
  64                             	.LBE50:
  65                             	.LBE49:
  66                             	.LBB52:
  67                             	.LBB53:
  68                             		.file 4 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /******************************************************************************
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * @file     none.h
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * @brief    Intrinsincs when no DSP extension available
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * @version  V1.9.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * @date     20. July 2020
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  ******************************************************************************/
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /*
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * Copyright (c) 2010-2020 Arm Limited or its affiliates. All rights reserved.
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * not use this file except in compliance with the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * You may obtain a copy of the License at
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  *
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  *
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * See the License for the specific language governing permissions and
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * limitations under the License.
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  */
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /*
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** Definitions in this file are allowing to reuse some versions of the
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** CMSIS-DSP to build on a core (M0 for instance) or a host where
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** DSP extension are not available.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** Ideally a pure C version should have been used instead.
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** But those are not always available or use a restricted set
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** of intrinsics.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** */
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #ifndef _NONE_H_
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #define _NONE_H_
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #include "arm_math_types.h"
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #ifdef   __cplusplus
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** extern "C"
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** {
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #endif
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /*
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** Normally those kind of definitions are in a compiler file
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** in Core or Core_A.
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** But for MSVC compiler it is a bit special. The goal is very specific
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** to CMSIS-DSP and only to allow the use of this library from other
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** systems like Python or Matlab.
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** MSVC is not going to be used to cross-compile to ARM. So, having a MSVC
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** compiler file in Core or Core_A would not make sense.
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** */
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #if defined ( _MSC_VER ) || defined(__GNUC_PYTHON__)
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t data)
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     {
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       if (data == 0U) { return 32U; }
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       uint32_t count = 0U;
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       uint32_t mask = 0x80000000U;
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       while ((data & mask) == 0U)
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       {
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****         count += 1U;
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****         mask = mask >> 1U;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       }
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       return count;
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     }
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     if ((sat >= 1U) && (sat <= 32U))
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     {
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       const int32_t min = -1 - max ;
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       if (val > max)
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****         return max;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       }
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       else if (val < min)
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       {
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****         return min;
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       }
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     }
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return val;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     if (sat <= 31U)
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     {
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       const uint32_t max = ((1U << sat) - 1U);
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       if (val > (int32_t)max)
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       {
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****         return max;
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       }
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       else if (val < 0)
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       {
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****         return 0U;
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       }
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     }
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return (uint32_t)val;
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  /**
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   \brief   Rotate Right in unsigned value (32 bit)
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   \param [in]    op1  Value to rotate
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   \param [in]    op2  Number of Bits to rotate
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   \return               Rotated value
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  */
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** {
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   op2 %= 32U;
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   if (op2 == 0U)
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return op1;
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** }
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #endif
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /**
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief Clips Q63 to Q31 values.
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   q63_t x)
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /**
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief Clips Q63 to Q15 values.
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE q15_t clip_q63_to_q15(
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   q63_t x)
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /**
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief Clips Q31 to Q7 values.
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE q7_t clip_q31_to_q7(
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   q31_t x)
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /**
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief Clips Q31 to Q15 values.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE q15_t clip_q31_to_q15(
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   q31_t x)
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE q63_t mult32x64(
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   q63_t x,
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   q31_t y)
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****             (((q63_t) (x >> 32)                * y)      )  );
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /* SMMLAR */
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #define multAcc_32x32_keep32_R(a, x, y) \
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     a = (q31_t) (((((q63_t) a) << 32) + ((q63_t) x * y) + 0x80000000LL ) >> 32)
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /* SMMLSR */
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #define multSub_32x32_keep32_R(a, x, y) \
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     a = (q31_t) (((((q63_t) a) << 32) - ((q63_t) x * y) + 0x80000000LL ) >> 32)
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /* SMMULR */
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #define mult_32x32_keep32_R(a, x, y) \
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     a = (q31_t) (((q63_t) x * y + 0x80000000LL ) >> 32)
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /* SMMLA */
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #define multAcc_32x32_keep32(a, x, y) \
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     a += (q31_t) (((q63_t) x * y) >> 32)
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /* SMMLS */
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #define multSub_32x32_keep32(a, x, y) \
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     a -= (q31_t) (((q63_t) x * y) >> 32)
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /* SMMUL */
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #define mult_32x32_keep32(a, x, y) \
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     a = (q31_t) (((q63_t) x * y ) >> 32)
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #ifndef ARM_MATH_DSP
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /**
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief definition to pack two 16 bit values.
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                       (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                       (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #endif
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    /**
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief definition to pack four 8 bit values.
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #ifndef ARM_MATH_BIG_ENDIAN
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                   (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                   (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                   (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #else
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                   (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                   (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                                   (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #endif
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /*
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  * @brief C custom defined intrinsic functions
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****  */
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** #if !defined (ARM_MATH_DSP)
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QADD8
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __QADD8(
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s, t, u;
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QSUB8
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __QSUB8(
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s, t, u;
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QADD16
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __QADD16(
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r = 0, s = 0;
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SHADD16
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SHADD16(
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s;
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QSUB16
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __QSUB16(
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s;
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SHSUB16
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SHSUB16(
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s;
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QASX
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __QASX(
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s;
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SHASX
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SHASX(
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s;
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QSAX
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __QSAX(
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s;
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SHSAX
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SHSAX(
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     q31_t r, s;
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)((s << 16) | (r      )));
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMUSDX
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SMUSDX(
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMUADX
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SMUADX(
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QADD
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE int32_t __QADD(
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   int32_t x,
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   int32_t y)
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined QSUB
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE int32_t __QSUB(
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   int32_t x,
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   int32_t y)
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMLAD
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SMLAD(
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t sum)
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ( ((q31_t)sum    )                                  )   ));
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMLADX
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SMLADX(
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y,
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t sum)
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ( ((q31_t)sum    )                                  )   ));
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMLSDX
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SMLSDX(
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y,
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t sum)
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ( ((q31_t)sum    )                                  )   ));
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMLALD
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint64_t __SMLALD(
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint64_t sum)
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) (y >> 16)) + ((q15_t) x * (q15_t) y)); */
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ( ((q63_t)sum    )                                  )   ));
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMLALDX
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint64_t __SMLALDX(
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y,
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint64_t sum)
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) y)) + ((q15_t) x * (q15_t) (y >> 16)); */
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ( ((q63_t)sum    )                                  )   ));
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMUAD
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SMUAD(
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SMUSD
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SMUSD(
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x,
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t y)
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) -
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   /*
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    * @brief C custom defined SXTB16
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****    */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   __STATIC_FORCEINLINE uint32_t __SXTB16(
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   uint32_t x)
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   {
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     return ((uint32_t)(((((q31_t)x << 24) >> 24) & (q31_t)0x0000FFFF) |
  69                             		.loc 4 554 5
  70                             	.LBE53:
  71                             	.LBE52:
  72                             	.LBB56:
  73                             	.LBB57:
  74                             		.loc 2 541 5 is_stmt 0
  75 0015 ED EF 01                		mov.L	4[r14], r15
  76                             	.LBE57:
  77                             	.LBE56:
  78                             	.LBB59:
  79                             	.LBB51:
  80                             		.loc 3 353 23
  81 0018 EF 5C                   		mov.L	r5, r12
  82 001a FD 6C 8C                		rotr	#8, r12
  83                             	.LVL5:
  84                             	.LBE51:
  85                             	.LBE59:
  86                             	.LBB60:
  87                             	.LBB61:
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
  88                             		.loc 4 555 36
  89 001d FD C8 59                		shll	#8, r5, r9
  90                             	.LBE61:
  91                             	.LBE60:
  92                             	.LBB65:
  93                             	.LBB54:
  94 0020 FD C8 CB                		shll	#8, r12, r11
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
  95                             		.loc 4 554 43
  96 0023 CF CC                   		mov.B	r12, r12
  97                             	.LVL6:
  98                             		.loc 4 555 43
  99 0025 6A 8B                   		shar	#8, r11
 100                             	.LBE54:
 101                             	.LBE65:
 102                             	.LBB66:
 103                             	.LBB62:
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
 104                             		.loc 4 554 43
 105 0027 CF 54                   		mov.B	r5, r4
 106                             		.loc 4 555 43
 107 0029 6A 89                   		shar	#8, r9
 108                             	.LBE62:
 109                             	.LBE66:
 110                             	.LBB67:
 111                             	.LBB55:
 112                             		.loc 4 555 50
 113 002b 77 2B 00 00 FF          		and #-65536, r11
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
 114                             		.loc 4 554 50
 115 0030 FB 5E FF FF 00          		mov.L	#0xffff, r5
 116                             	.LVL7:
 117 0035 53 C5                   		and	r12, r5
 118                             	.LVL8:
 119                             	.LBE55:
 120                             	.LBE67:
  55:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         v2 = __SXTB16(value);
 121                             		.loc 1 55 9 is_stmt 1
 122                             	.LBB68:
 123                             	.LBB63:
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
 124                             		.loc 4 554 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
 125                             		.loc 4 554 50 is_stmt 0
 126 0037 77 24 FF FF 00          		and #0xffff, r4
 127                             		.loc 4 555 50
 128 003c FB CE 00 00 FF          		mov.L	#-65536, r12
 129 0041 53 9C                   		and	r9, r12
 130                             	.LBE63:
 131                             	.LBE68:
  56:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
  57:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         vo2 = (q31_t)__PKHTB(v1, v2, 16);
 132                             		.loc 1 57 22
 133 0043 57 B5                   		or	r11, r5
 134                             	.LVL9:
 135                             	.LBB69:
 136                             	.LBB64:
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****                        ((((q31_t)x <<  8) >>  8) & (q31_t)0xFFFF0000)  ));
 137                             		.loc 4 554 71
 138 0045 57 C4                   		or	r12, r4
 139                             	.LVL10:
 140                             	.LBE64:
 141                             	.LBE69:
 142                             		.loc 1 57 9 is_stmt 1
  58:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         vo1 = (q31_t)__PKHBT(v2, v1, 16);
 143                             		.loc 1 58 22 is_stmt 0
 144 0047 6D 05                   		shll	#16, r5
 145                             	.LVL11:
  57:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         vo1 = (q31_t)__PKHBT(v2, v1, 16);
 146                             		.loc 1 57 22
 147 0049 FD 90 4C                		shlr	#16, r4, r12
 148                             		.loc 1 58 22
 149 004c 77 24 FF FF 00          		and #0xffff, r4
 150                             	.LVL12:
  57:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         vo1 = (q31_t)__PKHBT(v2, v1, 16);
 151                             		.loc 1 57 13
 152 0051 57 CB                   		or	r12, r11
 153                             	.LVL13:
 154                             		.loc 1 58 9 is_stmt 1
 155                             		.loc 1 58 13 is_stmt 0
 156 0053 57 45                   		or	r4, r5
 157                             	.LVL14:
  59:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** #else
  60:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         vo1 = (q31_t)__PKHTB(v1, v2, 16);
  61:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         vo2 = (q31_t)__PKHBT(v2, v1, 16);
  62:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** #endif
  63:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  64:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         in = arm_nn_read_q15x2(pCnt);
 158                             		.loc 1 64 9 is_stmt 1
 159                             	.LBB70:
 160                             	.LBB47:
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 161                             		.loc 2 540 5
 162                             		.loc 2 541 5
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 163                             		.loc 2 543 5
 164                             	.LBE47:
 165                             	.LBE70:
  65:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         arm_nn_write_q15x2_ia(&pCnt, __QADD16(vo1, in));
 166                             		.loc 1 65 9
 167                             	.LBB71:
 168                             	.LBB72:
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 169                             		.loc 4 286 5
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 170                             		.loc 4 288 5
 171                             	.LBE72:
 172                             	.LBE71:
 173                             	.LBE41:
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Breakpoint
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Reversed value
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     result <<= 1U;
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     result |= value & 1U;
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     s--;
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return result;
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Count leading zeros
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             number of leading zeros in value
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      is non-zero".
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      single CLZ instruction.
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    */
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   if (value == 0U)
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     return 32U;
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   }
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return __builtin_clz(value);
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          0  Function succeeded
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          1  Function failed
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    uint32_t result;
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          0  Function succeeded
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          1  Function failed
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    uint32_t result;
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          0  Function succeeded
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return          1  Function failed
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    uint32_t result;
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Signed Saturate
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Saturates a signed value.
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             Saturated value
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __extension__ \
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** ({                          \
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __RES; \
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  })
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             Saturated value
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __extension__ \
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** ({                          \
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __RES; \
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  })
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return               Rotated value
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   uint32_t result;
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   return(result);
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     */
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #endif
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     uint32_t result;
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    return(result);
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to store
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** }
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** 
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** /**
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \brief   Signed Saturate
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \details Saturates a signed value.
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   \return             Saturated value
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****  */
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h **** {
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 174                             		.loc 3 709 3
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 175                             		.loc 3 711 5
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     const int32_t min = -1 - max ;
 176                             		.loc 3 712 5
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     if (val > max)
 177                             		.loc 3 713 5
 178                             	.LBB114:
 179                             	.LBB81:
 180                             	.LBB73:
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 181                             		.loc 4 289 5
 182                             	.LBE73:
 183                             	.LBE81:
 184                             	.LBE114:
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 185                             		.loc 3 709 3
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     const int32_t min = -1 - max ;
 186                             		.loc 3 711 5
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     if (val > max)
 187                             		.loc 3 712 5
 188                             		.loc 3 713 5
 189                             	.LBB115:
 190                             	.LBB82:
 191                             	.LBB74:
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 192                             		.loc 4 291 5
 193                             	.LBE74:
 194                             	.LBE82:
 195                             	.LBB83:
 196                             	.LBB84:
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 840:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 841:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(sh
 842:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          RIGHT_SHIFT(shift));
 843:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 844:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 845:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 846:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 847:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 848:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memcpy optimized for MVE
 849:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 850:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src         Source pointer.
 851:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 852:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 853:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 854:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memcpy_q7(q7_t *__RESTRICT dst, const q7_t *__RESTRICT src, uint32_t 
 855:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 856:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 857:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   wlstp.8                 lr, %[cnt], 1f             \n"
 858:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 859:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vldrb.8                 q0, [%[in]], 16            \n"
 860:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[out]], 16           \n"
 861:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 862:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 863:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(src), [ out ] "+r"(dst)
 864:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size)
 865:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 866:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 867:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(dst, src, block_size);
 868:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 869:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 870:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 871:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 872:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 873:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Vector saturating doubling high multiply returning high half.
 874:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand
 875:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier
 876:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 877:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 878:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 879:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32x4_t arm_doubling_high_mult_mve(const int32x4_t m1, const q31_t m2)
 880:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 881:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return vqrdmulhq_n_s32(m1, m2);
 882:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 883:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 884:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 885:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Vector rounding divide by power of two.
 886:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend vector
 887:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 888:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 889:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 890:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 891:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 892:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32x4_t arm_divide_by_power_of_two_mve(const int32x4_t dividend, const q31_t
 893:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 894:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t shift = vdupq_n_s32(-exponent);
 895:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t fixup = vshrq_n_s32(vandq_s32(dividend, shift), 31);
 896:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t fixed_up_dividend = vqaddq_s32(dividend, fixup);
 897:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return vrshlq_s32(fixed_up_dividend, shift);
 898:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 899:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 900:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 901:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given vector.
 902:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Vector to be requantized
 903:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier
 904:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       shift
 905:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 906:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 907:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 908:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 909:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32x4_t arm_requantize_mve(const int32x4_t val, const q31_t multiplier, cons
 910:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 911:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return arm_divide_by_power_of_two_mve(
 912:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         arm_doubling_high_mult_mve(vshlq_s32(val, vdupq_n_s32(LEFT_SHIFT(shift))), multiplier), RIG
 913:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 914:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 915:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32x4_t arm_doubling_high_mult_mve_32x4(const int32x4_t m1, const int32x4_t 
 916:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 917:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return vqrdmulhq_s32(m1, m2);
 918:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 919:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 920:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32x4_t arm_divide_by_power_of_two_mve_32x4(const int32x4_t dividend, const 
 921:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 922:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t shift = -exponent;
 923:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t fixup = vshrq_n_s32(vandq_s32(dividend, shift), 31);
 924:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t fixed_up_dividend = vqaddq_s32(dividend, fixup);
 925:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return vrshlq_s32(fixed_up_dividend, shift);
 926:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 927:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 928:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32x4_t arm_requantize_mve_32x4(const int32x4_t val,
 929:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                                        const int32x4_t multiplier,
 930:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                                        const int32x4_t shift)
 931:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 932:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t zz = vdupq_n_s32(0);
 933:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const mve_pred16_t p = vcmpgtq_n_s32(shift, 0);
 934:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 935:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t left_shift = vpselq_s32(shift, zz, p);
 936:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32x4_t right_shift = -vpselq_s32(zz, shift, p);
 937:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 938:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return arm_divide_by_power_of_two_mve_32x4(arm_doubling_high_mult_mve_32x4(vshlq_s32(val, left_
 939:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                                right_shift);
 940:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 941:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 942:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 943:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // @note The following functions are used only for softmax layer, scaled bits = 5 assumed
 944:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 945:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
 946:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 947:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t mask = 0;
 948:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t shift = 24;
 949:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 950:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 951:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32_t remainder = val_mod_minus_quarter - val;
 952:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 953:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32_t x2 = MUL_SAT(x, x);
 954:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 955:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t result = 1895147668 +
 956:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715
 957:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 958:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_IF_NON_ZERO(x)                                                                      
 959:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {                                                                                              
 960:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                       
 961:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                              
 962:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 963:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 964:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     SELECT_IF_NON_ZERO(1672461947)
 965:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     SELECT_IF_NON_ZERO(1302514674)
 966:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     SELECT_IF_NON_ZERO(790015084)
 967:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     SELECT_IF_NON_ZERO(290630308)
 968:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     SELECT_IF_NON_ZERO(39332535)
 969:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     SELECT_IF_NON_ZERO(720401)
 970:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     SELECT_IF_NON_ZERO(242)
 971:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 972:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #undef SELECT_IF_NON_ZERO
 973:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 974:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mask = MASK_IF_ZERO(val);
 975:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return SELECT_USING_MASK(mask, Q31_MAX, result);
 976:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 977:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 978:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_mult_by_power_of_two(const int32_t val, const int32_t exp)
 979:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 980:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32_t thresh = ((1 << (31 - exp)) - 1);
 981:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t result = val << exp;
 982:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 983:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 984:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 985:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 986:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 987:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
 988:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 989:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 990:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 991:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 992:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 993:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const int32_t shift = (1 << 29);
 994:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 995:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 996:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 997:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 998:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return MUL_POW2(x, 1);
 999:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
1000:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
1001:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
1002:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Write 2 q15 elements and post increment pointer.
1003:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     dest_q15  Pointer to pointer that holds address of destination.
1004:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     src_q31   Input value to be written.
1005:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        none
1006:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
1007:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
1008:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
1009:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val = src_q31;
 197                             		.loc 2 1009 5
1010:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
1011:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(*dest_q15, &val, 4);
 198                             		.loc 2 1011 5
 199                             	.LBE84:
 200                             	.LBE83:
 201                             	.LBB86:
 202                             	.LBB75:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 203                             		.loc 4 288 35 is_stmt 0
 204 0055 DF 59                   		mov.W	r5, r9
 205                             	.LVL15:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 206                             		.loc 4 288 62
 207 0057 DF 7C                   		mov.W	r7, r12
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 208                             		.loc 4 289 35
 209 0059 6B 05                   		shar	#16, r5
 210                             	.LVL16:
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 211                             		.loc 4 289 62
 212 005b 6B 07                   		shar	#16, r7
 213                             	.LVL17:
 214                             	.LBE75:
 215                             	.LBE86:
 216                             	.LBB87:
 217                             	.LBB88:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 218                             		.loc 4 288 35
 219 005d DF B4                   		mov.W	r11, r4
 220                             	.LVL18:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 221                             		.loc 4 288 62
 222 005f DF F8                   		mov.W	r15, r8
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 223                             		.loc 4 289 35
 224 0061 6B 0B                   		shar	#16, r11
 225                             	.LVL19:
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 226                             		.loc 4 289 62
 227 0063 6B 0F                   		shar	#16, r15
 228                             	.LBE88:
 229                             	.LBE87:
 230                             	.LBB97:
 231                             	.LBB76:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 232                             		.loc 4 288 9
 233 0065 4B 9C                   		add	r9, r12
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 234                             		.loc 4 289 9
 235 0067 4B 75                   		add	r7, r5
 236                             	.LVL20:
 237                             	.LBE76:
 238                             	.LBE97:
 239                             	.LBB98:
 240                             	.LBB89:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 241                             		.loc 4 288 9
 242 0069 4B 84                   		add	r8, r4
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 243                             		.loc 4 289 9
 244 006b 4B FB                   		add	r15, r11
 245                             	.LBE89:
 246                             	.LBE98:
 247                             	.LBB99:
 248                             	.LBB77:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 249                             		.loc 4 288 7
 250 006d FD 78 4C 00 80          		max	#-32768, r12
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 251                             		.loc 4 291 34
 252 0072 FD 78 45 00 80          		max	#-32768, r5
 253                             	.LVL21:
 254                             	.LBE77:
 255                             	.LBE99:
 256                             	.LBB100:
 257                             	.LBB90:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 258                             		.loc 4 288 7
 259 0077 FD 78 44 00 80          		max	#-32768, r4
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 260                             		.loc 4 291 34
 261 007c FD 78 4B 00 80          		max	#-32768, r11
 262                             	.LBE90:
 263                             	.LBE100:
 264                             	.LBB101:
 265                             	.LBB78:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 266                             		.loc 4 288 7
 267 0081 FD 78 5C FF 7F          		min	#0x7fff, r12
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 268                             		.loc 4 291 34
 269 0086 FD 78 55 FF 7F          		min	#0x7fff, r5
 270                             	.LBE78:
 271                             	.LBE101:
 272                             	.LBB102:
 273                             	.LBB91:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 274                             		.loc 4 288 7
 275 008b FD 78 54 FF 7F          		min	#0x7fff, r4
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 276                             		.loc 4 291 34
 277 0090 FD 78 5B FF 7F          		min	#0x7fff, r11
 278                             	.LBE91:
 279                             	.LBE102:
 280                             	.LBB103:
 281                             	.LBB79:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 282                             		.loc 4 288 7
 283 0095 77 2C FF FF 00          		and #0xffff, r12
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 284                             		.loc 4 291 34
 285 009a 6D 05                   		shll	#16, r5
 286                             	.LBE79:
 287                             	.LBE103:
 288                             	.LBB104:
 289                             	.LBB92:
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 290                             		.loc 4 288 7
 291 009c 77 24 FF FF 00          		and #0xffff, r4
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 292                             		.loc 4 291 34
 293 00a1 6D 0B                   		shll	#16, r11
 294                             	.LBE92:
 295                             	.LBE104:
 296                             	.LBB105:
 297                             	.LBB80:
 298 00a3 57 5C                   		or	r5, r12
 299                             	.LBE80:
 300                             	.LBE105:
 301                             	.LBB106:
 302                             	.LBB93:
 303 00a5 57 B4                   		or	r11, r4
 304                             	.LBE93:
 305                             	.LBE106:
 306                             	.LBB107:
 307                             	.LBB85:
 308                             		.loc 2 1011 5
 309 00a7 E3 EC                   		mov.L	r12, [r14]
 310                             	.LVL22:
1012:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *dest_q15 += 2;
 311                             		.loc 2 1012 5 is_stmt 1
 312                             	.LBE85:
 313                             	.LBE107:
  66:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  67:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         in = arm_nn_read_q15x2(pCnt);
 314                             		.loc 1 67 9
 315                             	.LBB108:
 316                             	.LBB58:
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 317                             		.loc 2 540 5
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 318                             		.loc 2 541 5
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 319                             		.loc 2 543 5
 320                             	.LBE58:
 321                             	.LBE108:
  68:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         arm_nn_write_q15x2_ia(&pCnt, __QADD16(vo2, in));
 322                             		.loc 1 68 9
 323                             	.LBB109:
 324                             	.LBB94:
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 325                             		.loc 4 286 5
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 326                             		.loc 4 288 5
 327                             	.LBE94:
 328                             	.LBE109:
 329                             	.LBE115:
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 330                             		.loc 3 709 3
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     const int32_t min = -1 - max ;
 331                             		.loc 3 711 5
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     if (val > max)
 332                             		.loc 3 712 5
 333                             		.loc 3 713 5
 334                             	.LBB116:
 335                             	.LBB110:
 336                             	.LBB95:
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h **** 
 337                             		.loc 4 289 5
 338                             	.LBE95:
 339                             	.LBE110:
 340                             	.LBE116:
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****   {
 341                             		.loc 3 709 3
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     const int32_t min = -1 - max ;
 342                             		.loc 3 711 5
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\Core\Include\cmsis_gcc.h ****     if (val > max)
 343                             		.loc 3 712 5
 344                             		.loc 3 713 5
 345                             	.LBB117:
 346                             	.LBB111:
 347                             	.LBB96:
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\DSP\Include/dsp\none.h ****   }
 348                             		.loc 4 291 5
 349                             	.LBE96:
 350                             	.LBE111:
 351                             	.LBB112:
 352                             	.LBB113:
1009:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353                             		.loc 2 1009 5
1011:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *dest_q15 += 2;
 354                             		.loc 2 1011 5
 355 00a9 E7 E4 01                		mov.L	r4, 4[r14]
 356                             	.LVL23:
 357                             		.loc 2 1012 5
 358 00ac 62 8E                   		add	#8, r14
 359                             	.LVL24:
 360                             	.LBE113:
 361                             	.LBE112:
  69:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** 
  70:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 362                             		.loc 1 70 9
 363                             	.LBE117:
  51:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     {
 364                             		.loc 1 51 11 is_stmt 0
 365 00ae 47 62                   		cmp	r6, r2
 366 00b0 3B 60 FF                		bne	.L3
 367 00b3 6C 3A                   		shll	#3, r10
 368 00b5 4B A1                   		add	r10, r1
 369                             	.LVL25:
 370 00b7 03                      		.balign 8,3,1
 371                             	.L2:
  71:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     }
  72:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     cnt = length & 0x3;
 372                             		.loc 1 72 5 is_stmt 1
 373                             		.loc 1 72 9 is_stmt 0
 374 00b8 64 33                   		and	#3, r3
 375                             	.LVL26:
  73:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     while (cnt > 0l)
 376                             		.loc 1 73 5 is_stmt 1
 377                             		.loc 1 73 11 is_stmt 0
 378 00ba 20 23                   		beq	.L1
  74:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     {
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         *pCnt++ += *pV++;
 379                             		.loc 1 75 9 is_stmt 1
 380                             	.LVL27:
 381                             		.loc 1 75 17 is_stmt 0
 382 00bc DC 15                   		mov.W	[r1], r5
 383                             		.loc 1 75 20
 384 00be CC 67                   		mov.B	[r6], r7
  76:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 385                             		.loc 1 76 12
 386 00c0 60 13                   		sub	#1, r3
 387                             	.LVL28:
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 388                             		.loc 1 75 17
 389 00c2 4B 57                   		add	r5, r7
 390 00c4 D3 17                   		mov.W	r7, [r1]
 391                             		.loc 1 76 9 is_stmt 1
 392                             	.LVL29:
  73:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     {
 393                             		.loc 1 73 11 is_stmt 0
 394 00c6 61 03                   		cmp	#0, r3
 395 00c8 20 15                   		beq	.L1
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 396                             		.loc 1 75 9 is_stmt 1
 397                             	.LVL30:
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 398                             		.loc 1 75 17 is_stmt 0
 399 00ca 98 1D                   		mov.W	2[r1], r5
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 400                             		.loc 1 75 20
 401 00cc 88 6F                   		mov.B	1[r6], r7
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 402                             		.loc 1 75 17
 403 00ce 4B 57                   		add	r5, r7
 404 00d0 90 1F                   		mov.W	r7, 2[r1]
 405                             		.loc 1 76 9 is_stmt 1
 406                             	.LVL31:
  73:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     {
 407                             		.loc 1 73 11 is_stmt 0
 408 00d2 61 13                   		cmp	#1, r3
 409 00d4 11                      		beq	.L1
 410                             	.LVL32:
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 411                             		.loc 1 75 9 is_stmt 1
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 412                             		.loc 1 75 17 is_stmt 0
 413 00d5 98 95                   		mov.W	4[r1], r5
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 414                             		.loc 1 75 20
 415 00d7 88 E7                   		mov.B	2[r6], r7
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****         cnt--;
 416                             		.loc 1 75 17
 417 00d9 4B 57                   		add	r5, r7
 418 00db 90 97                   		mov.W	r7, 4[r1]
 419                             		.loc 1 76 9 is_stmt 1
 420                             	.LVL33:
 421                             		.balign 8,3,2
 422                             	.L1:
  77:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     }
  78:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c **** }
 423                             		.loc 1 78 1 is_stmt 0
 424 00dd 3F 6C 07                		rtsd	#28, r6-r12
 425                             	.LVL34:
 426                             	.L5:
  46:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_accumulate_q7_to_q15.c ****     q31_t v1, v2, vo1, vo2;
 427                             		.loc 1 46 17
 428 00e0 EF 26                   		mov.L	r2, r6
 429 00e2 2E D6                   		bra	.L2
 430                             	.LFE82:
 476                             	.Letext0:
 477                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 478                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 479                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 480                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 481                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 482                             		.file 10 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\ree
 483                             		.file 11 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 484                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 485                             		.file 13 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
