   1                             		.file	"arm_depthwise_conv_3x3_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_depthwise_conv_3x3_s8,"ax",@progbits
   5                             		.global	_arm_depthwise_conv_3x3_s8
   7                             	_arm_depthwise_conv_3x3_s8:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c"
   1:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** /*
   2:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Copyright (C) 2010-2020 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
   4:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
   6:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
  10:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
  12:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  */
  18:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  19:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Title:        arm_depthwise_conv_3x3_s8.c
  22:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Description:  Optimized s8 depthwise convolution function for channel
  23:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *               multiplier of 1 and 3x3 kernel size.
  24:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
  25:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * $Date:        09. October 2020
  26:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * $Revision:    V.2.0.1
  27:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
  28:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Target Processor:  Cortex-M CPUs
  29:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
  30:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * -------------------------------------------------------------------- */
  31:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  32:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** #include "arm_nnfunctions.h"
  33:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** #include "arm_nnsupportfunctions.h"
  34:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  35:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** /**
  36:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *  @ingroup groupNN
  37:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  */
  38:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  39:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** /**
  40:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * @addtogroup NNConv
  41:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * @{
  42:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  */
  43:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  44:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** /*
  45:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * Optimized s8 depthwise convolution function with constraint that
  46:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  * in_channel == out_channel and kernel_x == kernel_y == 3 with pads at most 1
  47:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
  48:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *  Refer prototype header file for details.
  49:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  *
  50:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****  */
  51:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  52:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** arm_status arm_depthwise_conv_3x3_s8(const cmsis_nn_context *ctx,
  53:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const cmsis_nn_dw_conv_params *dw_conv_params,
  54:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const cmsis_nn_per_channel_quant_params *quant_params,
  55:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const cmsis_nn_dims *input_dims,
  56:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const q7_t *input,
  57:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const cmsis_nn_dims *filter_dims,
  58:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const q7_t *kernel,
  59:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const cmsis_nn_dims *bias_dims,
  60:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const int32_t *bias,
  61:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      const cmsis_nn_dims *output_dims,
  62:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                                      q7_t *output)
  63:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** {
  10                             		.loc 1 63 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 72 00 F4 FE             		add	#-268, r0
  15                             	.LCFI1:
  64:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     (void)ctx;
  16                             		.loc 1 64 5
  65:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     (void)bias_dims;
  17                             		.loc 1 65 5
  66:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t input_x = input_dims->w;
  18                             		.loc 1 67 5
  63:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     (void)ctx;
  19                             		.loc 1 63 1 is_stmt 0
  20 0006 FB 7A 30 01             		mov.L	#0x130, r7
  21 000a 4B 07                   		add	r0, r7
  22 000c ED 7A 05                		mov.L	20[r7], r10
  68:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t input_y = input_dims->h;
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t input_ch = input_dims->c;
  23                             		.loc 1 69 19
  24 000f E5 40 03 19             		mov.L	12[r4], 100[r0]
  63:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     (void)ctx;
  25                             		.loc 1 63 1
  26 0013 E4 70 1F                		mov.L	[r7], 124[r0]
  27 0016 A8 7D                   		mov.L	4[r7], r5
  28 0018 E5 70 02 1B             		mov.L	8[r7], 108[r0]
  29 001c E5 70 04 1C             		mov.L	16[r7], 112[r0]
  30 0020 E5 70 06 24             		mov.L	24[r7], 144[r0]
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t input_y = input_dims->h;
  31                             		.loc 1 67 19
  32 0024 E5 40 02 2F             		mov.L	8[r4], 188[r0]
  33                             	.LVL1:
  68:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t input_y = input_dims->h;
  34                             		.loc 1 68 5 is_stmt 1
  68:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t input_y = input_dims->h;
  35                             		.loc 1 68 19 is_stmt 0
  36 0028 E5 40 01 37             		mov.L	4[r4], 220[r0]
  37                             	.LVL2:
  38                             		.loc 1 69 5 is_stmt 1
  70:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t output_ch = output_dims->c;
  39                             		.loc 1 70 5
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t pad_x = dw_conv_params->padding.w;
  40                             		.loc 1 71 5
  41                             		.loc 1 71 19 is_stmt 0
  42 002c E5 20 05 32             		mov.L	20[r2], 200[r0]
  43                             	.LVL3:
  72:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t pad_y = dw_conv_params->padding.h;
  44                             		.loc 1 72 5 is_stmt 1
  45                             		.loc 1 72 19 is_stmt 0
  46 0030 A9 A4                   		mov.L	24[r2], r4
  47                             	.LVL4:
  73:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t stride_x = dw_conv_params->stride.w;
  48                             		.loc 1 73 5 is_stmt 1
  49                             		.loc 1 73 19 is_stmt 0
  50 0032 E5 20 03 22             		mov.L	12[r2], 136[r0]
  51                             	.LVL5:
  74:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t stride_y = dw_conv_params->stride.h;
  52                             		.loc 1 74 5 is_stmt 1
  53                             		.loc 1 74 19 is_stmt 0
  54 0036 E5 20 04 34             		mov.L	16[r2], 208[r0]
  55                             	.LVL6:
  75:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t *output_shift = quant_params->shift;
  56                             		.loc 1 75 5 is_stmt 1
  57                             		.loc 1 75 20 is_stmt 0
  58 003a E5 30 01 1D             		mov.L	4[r3], 116[r0]
  59                             	.LVL7:
  76:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t *output_mult = quant_params->multiplier;
  60                             		.loc 1 76 5 is_stmt 1
  61                             		.loc 1 76 20 is_stmt 0
  62 003e E4 30 1E                		mov.L	[r3], 120[r0]
  63                             	.LVL8:
  77:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t output_x = output_dims->w;
  64                             		.loc 1 77 5 is_stmt 1
  65                             		.loc 1 77 19 is_stmt 0
  66 0041 E5 A0 02 26             		mov.L	8[r10], 152[r0]
  67                             	.LVL9:
  78:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t output_y = output_dims->h;
  68                             		.loc 1 78 5 is_stmt 1
  69                             		.loc 1 78 19 is_stmt 0
  70 0045 E5 A0 01 35             		mov.L	4[r10], 212[r0]
  71                             	.LVL10:
  79:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t output_offset = dw_conv_params->output_offset;
  72                             		.loc 1 79 5 is_stmt 1
  73                             		.loc 1 79 19 is_stmt 0
  74 0049 E5 20 01 04             		mov.L	4[r2], 16[r0]
  75                             	.LVL11:
  80:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t input_offset = dw_conv_params->input_offset;
  76                             		.loc 1 80 5 is_stmt 1
  77                             		.loc 1 80 19 is_stmt 0
  78 004d EC 28                   		mov.L	[r2], r8
  79                             	.LVL12:
  81:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t output_activation_min = dw_conv_params->activation.min;
  80                             		.loc 1 81 5 is_stmt 1
  81                             		.loc 1 81 19 is_stmt 0
  82 004f E5 20 09 05             		mov.L	36[r2], 20[r0]
  83                             	.LVL13:
  82:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     const int32_t output_activation_max = dw_conv_params->activation.max;
  84                             		.loc 1 82 5 is_stmt 1
  85                             		.loc 1 82 19 is_stmt 0
  86 0053 E5 20 0A 06             		mov.L	40[r2], 24[r0]
  87                             	.LVL14:
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  84:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     /* Check input constraints input_ch == output_ch */
  85:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     if (input_ch != output_ch)
  88                             		.loc 1 85 5 is_stmt 1
  89                             		.loc 1 85 8 is_stmt 0
  90 0057 AE 09                   		mov.L	100[r0], r1
  91                             	.LVL15:
  92 0059 06 85 A1 03             		cmp	12[r10].L, r1
  93 005d 3B 16 09                		bne	.L46
  86:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
  87:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         return ARM_MATH_SIZE_MISMATCH;
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     }
  89:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     /* Check input constraints pad_x <= 1 */
  90:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
  94                             		.loc 1 90 5 is_stmt 1
  95                             		.loc 1 90 8 is_stmt 0
  96 0060 ED 02 32                		mov.L	200[r0], r2
  97                             	.LVL16:
  98 0063 61 12                   		cmp	#1, r2
  99 0065 2B 05 38 06 09          		bgt	.L49
 100                             		.loc 1 90 19 discriminator 1
 101 006a A8 D7                   		mov.L	8[r5], r7
 102 006c 61 37                   		cmp	#3, r7
 103 006e 3B FF 08                		bne	.L49
 104                             		.loc 1 90 42 discriminator 2
 105 0071 A8 5F                   		mov.L	4[r5], r7
 106 0073 61 37                   		cmp	#3, r7
 107 0075 3B F8 08                		bne	.L49
  91:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         return ARM_MATH_ARGUMENT_ERROR;
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     }
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h
 108                             		.loc 1 95 5 is_stmt 1
 109                             	.LBB32:
 110                             		.loc 1 95 10
 111                             		.loc 1 95 18 is_stmt 0
 112 0078 FC 07 43                		neg	r4, r3
 113                             	.LVL17:
 114 007b E7 03 30                		mov.L	r3, 192[r0]
 115                             	.LVL18:
 116                             		.loc 1 95 5
 117 007e ED 05 35                		mov.L	212[r0], r5
 118 0081 61 05                   		cmp	#0, r5
 119 0083 2A 05 38 18 07          		ble	.L45
 120 0088 EF 17                   		mov.L	r1, r7
 121 008a EF 16                   		mov.L	r1, r6
 122 008c EF 1B                   		mov.L	r1, r11
 123 008e 60 47                   		sub	#4, r7
 124                             	.LBB33:
 125                             	.LBB34:
 126                             	.LBB35:
  96:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w 
  98:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
  99:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             int32_t in_ch = 0;
 100:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             int32_t ker_w_start = MAX(0, -in_w);
 101:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             for (; in_ch <= (input_ch - 4); in_ch += 4)
 103:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 104:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff0 = bias[in_ch + 0];
 105:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff1 = bias[in_ch + 1];
 106:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff2 = bias[in_ch + 2];
 107:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff3 = bias[in_ch + 3];
 108:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 109:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_
 127                             		.loc 1 109 84
 128 0090 ED 0A 2F                		mov.L	188[r0], r10
 129                             	.LVL19:
 130 0093 4F A6                   		mul	r10, r6
 131 0095 A2 0E                   		mov.L	r6, 36[r0]
 132 0097 68 27                   		shlr	#2, r7
 133                             	.LBB36:
 134                             	.LBB37:
 110:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 113:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 114:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     int32_t in_val = 0;
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     int32_t ker_val = 0;
 116:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     if (ker_w_start == 0)
 118:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 119:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         in_val = arm_nn_read_q7x4(input_ptr);
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr);
 121:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 126:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 127:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     in_val = arm_nn_read_q7x4(input_ptr + input_ch);
 129:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 130:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 135:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     if ((input_x - in_w) >= 3)
 137:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 138:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
 135                             		.loc 1 138 73
 136 0099 4B 1B                   		add	r1, r11
 137 009b E7 0B 23                		mov.L	r11, 140[r0]
 139:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 140:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 145:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 146:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 147:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     input_ptr += (input_ch * input_x);
 148:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 138                             		.loc 1 148 45
 139 009e AE 09                   		mov.L	100[r0], r1
 140 00a0 63 31                   		mul	#3, r1
 141 00a2 A3 01                   		mov.L	r1, 48[r0]
 142 00a4 7E 12                   		neg	r2
 143                             	.LVL20:
 144 00a6 E7 02 36                		mov.L	r2, 216[r0]
 145 00a9 AF 05                   		mov.L	112[r0], r5
 146                             	.LVL21:
 147 00ab 71 55 10                		add	#16, r5
 148 00ae FD C4 73                		shll	#4, r7, r3
 149                             	.LVL22:
 150 00b1 AE 0E                   		mov.L	100[r0], r6
 151 00b3 63 66                   		mul	#6, r6
 152 00b5 A5 8E                   		mov.L	r6, 92[r0]
 153 00b7 71 7A 01                		add	#1, r7, r10
 154                             	.LBE37:
 155                             	.LBE36:
 156                             	.LBE35:
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 157                             		.loc 1 102 26
 158 00ba ED 0B 19                		mov.L	100[r0], r11
 159 00bd 60 3B                   		sub	#3, r11
 160 00bf E7 0B 27                		mov.L	r11, 156[r0]
 161 00c2 E7 04 31                		mov.L	r4, 196[r0]
 162 00c5 AE 09                   		mov.L	100[r0], r1
 163 00c7 ED 02 22                		mov.L	136[r0], r2
 164 00ca 4F 21                   		mul	r2, r1
 165 00cc E7 01 29                		mov.L	r1, 164[r0]
 166 00cf ED 04 36                		mov.L	216[r0], r4
 167                             	.LVL23:
 168 00d2 AE 0E                   		mov.L	100[r0], r6
 169 00d4 4F 64                   		mul	r6, r4
 170 00d6 E7 04 38                		mov.L	r4, 224[r0]
 171 00d9 4B 53                   		add	r5, r3
 172 00db A4 83                   		mov.L	r3, 72[r0]
 173 00dd ED 0B 09                		mov.L	36[r0], r11
 174 00e0 4B BB                   		add	r11, r11
 175 00e2 E7 0B 16                		mov.L	r11, 88[r0]
 176 00e5 6C 27                   		shll	#2, r7
 177 00e7 E7 07 2B                		mov.L	r7, 172[r0]
 178 00ea FD C2 A1                		shll	#2, r10, r1
 179 00ed E7 01 2C                		mov.L	r1, 176[r0]
 180                             	.LBE34:
 181                             	.LBE33:
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
 182                             		.loc 1 95 44
 183 00f0 3E 8A 00                		mov.L	#0, 104[r0]
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
 184                             		.loc 1 95 33
 185 00f3 F9 06 33 00             		mov.L	#0, 204[r0]
 186 00f7 ED 02 23                		mov.L	140[r0], r2
 187 00fa 06 89 02 0C             		add	48[r0], r2
 188 00fe E7 02 39                		mov.L	r2, 228[r0]
 189 0101 AA 0B                   		mov.L	36[r0], r3
 190 0103 7E 13                   		neg	r3
 191 0105 A4 8B                   		mov.L	r3, 76[r0]
 192 0107 E5 00 23 3A             		mov.L	140[r0], 232[r0]
 193 010b 06 89 06 17             		add	92[r0], r6
 194 010f E7 06 3B                		mov.L	r6, 236[r0]
 195 0112 AB 04                   		mov.L	48[r0], r4
 196 0114 7E 14                   		neg	r4
 197 0116 A5 04                   		mov.L	r4, 80[r0]
 198 0118 EF 89                   		mov.L	r8, r9
 199                             	.LVL24:
 200                             		.balign 8,3,2
 201                             	.L44:
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 202                             		.loc 1 97 9 is_stmt 1
 203                             	.LBB131:
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 204                             		.loc 1 97 14
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 205                             		.loc 1 97 62 is_stmt 0
 206 011a ED 05 31                		mov.L	196[r0], r5
 207 011d ED 06 30                		mov.L	192[r0], r6
 208 0120 61 06                   		cmp	#0, r6
 209 0122 2B 04                   		ble 1f
 210 0124 66 05                   		mov #0, r5
 211                             	1:
 212 0126 A4 05                   		mov.L	r5, 64[r0]
 213                             	.LVL25:
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 214                             		.loc 1 97 9
 215 0128 ED 07 26                		mov.L	152[r0], r7
 216 012b 61 07                   		cmp	#0, r7
 217 012d 2A 05 38 49 06          		ble	.L5
 218 0132 EF 54                   		mov.L	r5, r4
 219                             	.LBB128:
 220                             	.LBB113:
 109:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 221                             		.loc 1 109 57
 222 0134 EF 67                   		mov.L	r6, r7
 223 0136 4B 57                   		add	r5, r7
 110:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 224                             		.loc 1 110 65
 225 0138 ED 0A 0C                		mov.L	48[r0], r10
 226 013b 4F A5                   		mul	r10, r5
 227                             	.LVL26:
 228 013d E7 05 28                		mov.L	r5, 160[r0]
 109:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 229                             		.loc 1 109 72
 230 0140 ED 0A 09                		mov.L	36[r0], r10
 231 0143 4F 7A                   		mul	r7, r10
 232 0145 AA 0F                   		mov.L	36[r0], r7
 233 0147 06 89 07 38             		add	224[r0], r7
 234                             	.LBB93:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 235                             		.loc 1 112 59
 236 014b ED 0B 37                		mov.L	220[r0], r11
 237 014e 06 89 0B 31             		add	196[r0], r11
 238 0152 4B A7                   		add	r10, r7
 239 0154 FD 74 5B 03             		min	#3, r11
 240 0158 E7 0B 0F                		mov.L	r11, 60[r0]
 241 015b 06 89 05 0C             		add	48[r0], r5
 242 015f E7 05 2A                		mov.L	r5, 168[r0]
 243 0162 ED 01 32                		mov.L	200[r0], r1
 244 0165 06 89 01 2F             		add	188[r0], r1
 245 0169 A3 09                   		mov.L	r1, 52[r0]
 246 016b 06 89 07 1F             		add	124[r0], r7
 247 016f A6 07                   		mov.L	r7, 96[r0]
 248                             	.LBE93:
 249                             	.LBE113:
 250                             	.LBE128:
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 251                             		.loc 1 97 22
 252 0171 E5 00 36 20             		mov.L	216[r0], 128[r0]
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 253                             		.loc 1 97 37
 254 0175 F9 06 21 00             		mov.L	#0, 132[r0]
 255 0179 ED 02 39                		mov.L	228[r0], r2
 256 017c 06 89 02 28             		add	160[r0], r2
 257 0180 E7 02 25                		mov.L	r2, 148[r0]
 258 0183 ED 03 3A                		mov.L	232[r0], r3
 259 0186 43 35                   		sub	r3, r5
 260 0188 E7 05 2D                		mov.L	r5, 180[r0]
 261                             	.LBB129:
 262                             	.LBB114:
 263                             	.LBB94:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 264                             		.loc 1 112 83
 265 018b 62 14                   		add	#1, r4
 266                             	.LVL27:
 267 018d A4 0C                   		mov.L	r4, 68[r0]
 268 018f ED 05 3B                		mov.L	236[r0], r5
 269 0192 06 89 05 28             		add	160[r0], r5
 270 0196 E7 05 2E                		mov.L	r5, 184[r0]
 271                             	.LVL28:
 272                             		.balign 8,3,2
 273                             	.L43:
 274                             	.LBE94:
 275                             	.LBE114:
  99:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             int32_t ker_w_start = MAX(0, -in_w);
 276                             		.loc 1 99 13 is_stmt 1
 100:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 277                             		.loc 1 100 13
 100:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 278                             		.loc 1 100 35 is_stmt 0
 279 0199 ED 06 20                		mov.L	128[r0], r6
 280 019c 61 06                   		cmp	#0, r6
 281 019e 2A 05 38 B4 07          		ble	.L64
 282 01a3 3E 0E 00                		mov.L	#0, 56[r0]
 283                             	.LVL29:
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 284                             		.loc 1 102 13 is_stmt 1
 285 01a6 ED 0B 27                		mov.L	156[r0], r11
 286 01a9 61 0B                   		cmp	#0, r11
 287 01ab 2A 05 38 BB 07          		ble	.L52
 288                             	.LVL30:
 289                             		.balign 8,3,1
 290                             	.L75:
 291 01b0 AE 0F                   		mov.L	100[r0], r7
 292 01b2 AA 09                   		mov.L	36[r0], r1
 293 01b4 43 17                   		sub	r1, r7
 294 01b6 ED 02 24                		mov.L	144[r0], r2
 295 01b9 06 89 02 1A             		add	104[r0], r2
 296 01bd E3 02                   		mov.L	r2, [r0]
 297 01bf ED 0C 1E                		mov.L	120[r0], r12
 298 01c2 E5 00 1D 01             		mov.L	116[r0], 4[r0]
 299 01c6 ED 03 23                		mov.L	140[r0], r3
 300 01c9 06 89 03 18             		add	96[r0], r3
 301 01cd A2 83                   		mov.L	r3, 40[r0]
 302 01cf AE 8C                   		mov.L	108[r0], r4
 303 01d1 06 89 04 25             		add	148[r0], r4
 304 01d5 A2 8C                   		mov.L	r4, 44[r0]
 305 01d7 AE 8D                   		mov.L	108[r0], r5
 306 01d9 06 89 05 2A             		add	168[r0], r5
 307 01dd A2 05                   		mov.L	r5, 32[r0]
 308 01df 06 89 07 18             		add	96[r0], r7
 309 01e3 A0 87                   		mov.L	r7, 8[r0]
 310 01e5 AE 8E                   		mov.L	108[r0], r6
 311 01e7 06 89 06 2D             		add	180[r0], r6
 312 01eb A0 8E                   		mov.L	r6, 12[r0]
 313 01ed E5 00 18 07             		mov.L	96[r0], 28[r0]
 314 01f1 AF 02                   		mov.L	112[r0], r2
 315                             	.LBB115:
 316                             	.LBB95:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 317                             		.loc 1 112 83 is_stmt 0
 318 01f3 AC 07                   		mov.L	64[r0], r7
 319 01f5 62 27                   		add	#2, r7
 320 01f7 A5 0F                   		mov.L	r7, 84[r0]
 321 01f9 38 1B 01                		bra	.L28
 322                             	.LVL31:
 323                             	.L53:
 324                             	.LBE95:
 325                             	.LBB96:
 326                             	.LBB97:
 327                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
 328                             		.loc 2 823 22
 329 01fc 66 03                   		mov.L	#0, r3
 330                             	.LVL32:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 331                             		.loc 2 824 5 is_stmt 1
 332                             		.loc 2 824 8 is_stmt 0
 333 01fe 61 04                   		cmp	#0, r4
 334 0200 28 05 38 DA 03          		blt	.L65
 335                             	.L17:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 336                             		.loc 2 833 9 is_stmt 1
 337                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 338 0205 FD 60 34                		shlr r3, r4
 339 0208 FD 74 24 00             	adc #0, r4
 340                             	
 341                             	 ; 0 "" 2
 342                             	.LVL33:
 343                             		.balign 8,3,1
 344                             	.L18:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 345                             		.loc 2 839 5
 346                             	.LBE97:
 347                             	.LBE96:
 149:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 150:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 151:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch
 152:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch
 348                             		.loc 1 152 17
 349                             		.loc 1 152 29 is_stmt 0
 350 020c A8 0E                   		mov.L	4[r0], r6
 351 020e A8 6B                   		mov.L	4[r6], r3
 352                             	.LVL34:
 353                             	.LBB99:
 354                             	.LBB100:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 355                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 356                             		.loc 2 817 5 is_stmt 0
 357 0210 ED C6 01                		mov.L	4[r12], r6
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 358                             		.loc 2 816 25
 359 0213 66 01                   		mov.L	#0, r1
 360 0215 FC 13 31                		max	r3, r1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 361                             		.loc 2 816 11
 362 0218 FD 62 15                		shll	r1, r5
 363                             	.LVL35:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 364                             		.loc 2 817 5 is_stmt 1
 365                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 366 021b FD 03 56                		emula r5, r6, a0
 367 021e FD 19 00                	racl #1, a0
 368 0221 FD 1F 05                	mvfachi #0, a0, r5
 369                             	
 370                             	 ; 0 "" 2
 371                             	.LVL36:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 372                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 373                             		.loc 2 823 22 is_stmt 0
 374 0224 61 03                   		cmp	#0, r3
 375 0226 2A 05 38 F6 03          		ble	.L66
 376                             	.LVL37:
 377 022b 66 03                   		mov.L	#0, r3
 378                             	.LVL38:
 379                             		.balign 8,3,1
 380                             	.L19:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 381                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 382                             		.loc 2 824 8 is_stmt 0
 383 022d 61 05                   		cmp	#0, r5
 384 022f 28 05 38 DF 03          		blt	.L67
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 385                             		.loc 2 833 9 is_stmt 1
 386                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 387 0234 FD 60 35                		shlr r3, r5
 388 0237 FD 74 25 00             	adc #0, r5
 389                             	
 390                             	 ; 0 "" 2
 391                             	.LVL39:
 392                             		.balign 8,3,1
 393                             	.L21:
 394                             		.loc 2 839 5
 395                             	.LBE100:
 396                             	.LBE99:
 153:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch
 397                             		.loc 1 153 17
 398                             		.loc 1 153 29 is_stmt 0
 399 023b ED 0B 01                		mov.L	4[r0], r11
 400 023e ED B3 02                		mov.L	8[r11], r3
 401                             	.LVL40:
 402                             	.LBB102:
 403                             	.LBB103:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 404                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 405                             		.loc 2 817 5 is_stmt 0
 406 0241 ED C6 02                		mov.L	8[r12], r6
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 407                             		.loc 2 816 25
 408 0244 66 01                   		mov.L	#0, r1
 409 0246 FC 13 31                		max	r3, r1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 410                             		.loc 2 816 11
 411 0249 FD 62 1A                		shll	r1, r10
 412                             	.LVL41:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 413                             		.loc 2 817 5 is_stmt 1
 414                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 415 024c FD 03 A6                		emula r10, r6, a0
 416 024f FD 19 00                	racl #1, a0
 417 0252 FD 1F 0A                	mvfachi #0, a0, r10
 418                             	
 419                             	 ; 0 "" 2
 420                             	.LVL42:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 421                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 422                             		.loc 2 823 22 is_stmt 0
 423 0255 61 03                   		cmp	#0, r3
 424 0257 2A 05 38 B2 03          		ble	.L68
 425 025c 66 03                   		mov.L	#0, r3
 426                             	.LVL43:
 427                             		.balign 8,3,1
 428                             	.L22:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 429                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 430                             		.loc 2 824 8 is_stmt 0
 431 025e 61 0A                   		cmp	#0, r10
 432 0260 28 05 38 9B 03          		blt	.L69
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 433                             		.loc 2 833 9 is_stmt 1
 434                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 435 0265 FD 60 3A                		shlr r3, r10
 436 0268 FD 74 2A 00             	adc #0, r10
 437                             	
 438                             	 ; 0 "" 2
 439                             	.LVL44:
 440                             		.balign 8,3,1
 441                             	.L24:
 442                             		.loc 2 839 5
 443                             	.LBE103:
 444                             	.LBE102:
 154:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch
 445                             		.loc 1 154 17
 446                             		.loc 1 154 29 is_stmt 0
 447 026c A8 09                   		mov.L	4[r0], r1
 448 026e A8 9B                   		mov.L	12[r1], r3
 449                             	.LVL45:
 450                             	.LBB105:
 451                             	.LBB106:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 452                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 453                             		.loc 2 817 5 is_stmt 0
 454 0270 ED C6 03                		mov.L	12[r12], r6
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 455                             		.loc 2 816 25
 456 0273 66 01                   		mov.L	#0, r1
 457 0275 FC 13 31                		max	r3, r1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 458                             		.loc 2 816 11
 459 0278 FD 62 17                		shll	r1, r7
 460                             	.LVL46:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 461                             		.loc 2 817 5 is_stmt 1
 462                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 463 027b FD 03 76                		emula r7, r6, a0
 464 027e FD 19 00                	racl #1, a0
 465 0281 FD 1F 07                	mvfachi #0, a0, r7
 466                             	
 467                             	 ; 0 "" 2
 468                             	.LVL47:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 469                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 470                             		.loc 2 823 22 is_stmt 0
 471 0284 61 03                   		cmp	#0, r3
 472 0286 2A 05 38 70 03          		ble	.L70
 473 028b 66 03                   		mov.L	#0, r3
 474                             	.LVL48:
 475                             		.balign 8,3,1
 476                             	.L25:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 477                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 478                             		.loc 2 824 8 is_stmt 0
 479 028d 61 07                   		cmp	#0, r7
 480 028f 28 05 38 59 03          		blt	.L71
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 481                             		.loc 2 833 9 is_stmt 1
 482                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 483 0294 FD 60 37                		shlr r3, r7
 484 0297 FD 74 27 00             	adc #0, r7
 485                             	
 486                             	 ; 0 "" 2
 487                             	.LVL49:
 488                             		.balign 8,3,1
 489                             	.L27:
 490                             		.loc 2 839 5
 491                             	.LBE106:
 492                             	.LBE105:
 155:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 156:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff0 += output_offset;
 493                             		.loc 1 156 17
 157:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff1 += output_offset;
 494                             		.loc 1 157 17
 158:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff2 += output_offset;
 495                             		.loc 1 158 17
 159:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff3 += output_offset;
 496                             		.loc 1 159 17
 160:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 161:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
 497                             		.loc 1 161 17
 156:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff1 += output_offset;
 498                             		.loc 1 156 27 is_stmt 0
 499 029b 06 89 04 04             		add	16[r0], r4
 500                             	.LVL50:
 157:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff2 += output_offset;
 501                             		.loc 1 157 27
 502 029f 06 89 05 04             		add	16[r0], r5
 503                             	.LVL51:
 158:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff3 += output_offset;
 504                             		.loc 1 158 27
 505 02a3 06 89 0A 04             		add	16[r0], r10
 506                             	.LVL52:
 159:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 507                             		.loc 1 159 27
 508 02a7 06 89 07 04             		add	16[r0], r7
 509                             	.LVL53:
 510                             		.loc 1 161 29
 511 02ab A9 0B                   		mov.L	20[r0], r3
 512                             	.LVL54:
 513 02ad FC 13 34                		max	r3, r4
 514                             	.LVL55:
 162:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 515                             		.loc 1 162 17 is_stmt 1
 516                             		.loc 1 162 29 is_stmt 0
 517 02b0 FC 13 35                		max	r3, r5
 518                             	.LVL56:
 163:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 519                             		.loc 1 163 17 is_stmt 1
 520                             		.loc 1 163 29 is_stmt 0
 521 02b3 FC 13 3A                		max	r3, r10
 522                             	.LVL57:
 164:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 523                             		.loc 1 164 17 is_stmt 1
 524                             		.loc 1 164 29 is_stmt 0
 525 02b6 FC 13 37                		max	r3, r7
 526                             	.LVL58:
 165:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 166:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 output[out_idx++] = (int8_t)out_buff0;
 527                             		.loc 1 166 17 is_stmt 1
 161:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 528                             		.loc 1 161 27 is_stmt 0
 529 02b9 A9 86                   		mov.L	24[r0], r6
 530 02bb FC 17 64                		min	r6, r4
 531                             	.LVL59:
 162:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 532                             		.loc 1 162 27
 533 02be FC 17 65                		min	r6, r5
 534                             	.LVL60:
 163:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 535                             		.loc 1 163 27
 536 02c1 FC 17 6A                		min	r6, r10
 537                             	.LVL61:
 164:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 538                             		.loc 1 164 27
 539 02c4 FC 17 67                		min	r6, r7
 540                             	.LVL62:
 541                             		.loc 1 166 37
 542 02c7 EC 0B                   		mov.L	[r0], r11
 543 02c9 C3 B4                   		mov.B	r4, [r11]
 167:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 output[out_idx++] = (int8_t)out_buff1;
 544                             		.loc 1 167 17 is_stmt 1
 545                             	.LVL63:
 546                             		.loc 1 167 37 is_stmt 0
 547 02cb C7 B5 01                		mov.B	r5, 1[r11]
 168:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 output[out_idx++] = (int8_t)out_buff2;
 548                             		.loc 1 168 17 is_stmt 1
 549                             	.LVL64:
 550                             		.loc 1 168 37 is_stmt 0
 551 02ce C7 BA 02                		mov.B	r10, 2[r11]
 169:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 output[out_idx++] = (int8_t)out_buff3;
 552                             		.loc 1 169 17 is_stmt 1
 553                             	.LVL65:
 554 02d1 71 22 10                		add	#16, r2
 555                             		.loc 1 169 37 is_stmt 0
 556 02d4 C7 B7 03                		mov.B	r7, 3[r11]
 557 02d7 71 CC 10                		add	#16, r12
 558 02da 62 4B                   		add	#4, r11
 559 02dc E3 0B                   		mov.L	r11, [r0]
 560                             	.LVL66:
 561 02de A8 0B                   		mov.L	4[r0], r3
 562 02e0 71 33 10                		add	#16, r3
 563 02e3 A0 0B                   		mov.L	r3, 4[r0]
 564 02e5 AA 84                   		mov.L	40[r0], r4
 565                             	.LVL67:
 566 02e7 62 44                   		add	#4, r4
 567 02e9 A2 84                   		mov.L	r4, 40[r0]
 568 02eb AA 8D                   		mov.L	44[r0], r5
 569                             	.LVL68:
 570 02ed 62 45                   		add	#4, r5
 571 02ef A2 8D                   		mov.L	r5, 44[r0]
 572 02f1 A9 8E                   		mov.L	28[r0], r6
 573 02f3 62 46                   		add	#4, r6
 574 02f5 A1 8E                   		mov.L	r6, 28[r0]
 575 02f7 AA 07                   		mov.L	32[r0], r7
 576                             	.LVL69:
 577 02f9 62 47                   		add	#4, r7
 578 02fb A2 07                   		mov.L	r7, 32[r0]
 579 02fd ED 0A 02                		mov.L	8[r0], r10
 580                             	.LVL70:
 581 0300 62 4A                   		add	#4, r10
 582 0302 E7 0A 02                		mov.L	r10, 8[r0]
 583 0305 ED 0B 03                		mov.L	12[r0], r11
 584                             	.LVL71:
 585 0308 62 4B                   		add	#4, r11
 586 030a E7 0B 03                		mov.L	r11, 12[r0]
 587                             	.LBE115:
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 588                             		.loc 1 102 13
 589 030d AC 81                   		mov.L	72[r0], r1
 590 030f 47 12                   		cmp	r1, r2
 591 0311 3A 12 03                		beq	.L72
 592                             	.LVL72:
 593                             		.balign 8,3,1
 594                             	.L28:
 595                             	.LBB116:
 104:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff1 = bias[in_ch + 1];
 596                             		.loc 1 104 17 is_stmt 1
 104:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff1 = bias[in_ch + 1];
 597                             		.loc 1 104 25 is_stmt 0
 598 0314 EC 24                   		mov.L	[r2], r4
 599                             	.LVL73:
 105:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff2 = bias[in_ch + 2];
 600                             		.loc 1 105 17 is_stmt 1
 105:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff2 = bias[in_ch + 2];
 601                             		.loc 1 105 25 is_stmt 0
 602 0316 A8 2D                   		mov.L	4[r2], r5
 603                             	.LVL74:
 106:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff3 = bias[in_ch + 3];
 604                             		.loc 1 106 17 is_stmt 1
 106:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff3 = bias[in_ch + 3];
 605                             		.loc 1 106 25 is_stmt 0
 606 0318 ED 2A 02                		mov.L	8[r2], r10
 607                             	.LVL75:
 107:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 608                             		.loc 1 107 17 is_stmt 1
 107:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 609                             		.loc 1 107 25 is_stmt 0
 610 031b A8 AF                   		mov.L	12[r2], r7
 611                             	.LVL76:
 109:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 612                             		.loc 1 109 17 is_stmt 1
 613 031d A9 8B                   		mov.L	28[r0], r3
 614 031f ED 0B 09                		mov.L	36[r0], r11
 615 0322 43 B3                   		sub	r11, r3
 616                             	.LVL77:
 110:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 617                             		.loc 1 110 17
 618 0324 AA 01                   		mov.L	32[r0], r1
 619 0326 AB 06                   		mov.L	48[r0], r6
 620 0328 43 61                   		sub	r6, r1
 621                             	.LVL78:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 622                             		.loc 1 112 17
 623                             	.LBB108:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 624                             		.loc 1 112 22
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 625                             		.loc 1 112 17 is_stmt 0
 626 032a ED 0B 10                		mov.L	64[r0], r11
 627 032d AB 8E                   		mov.L	60[r0], r6
 628 032f 47 6B                   		cmp	r6, r11
 629 0331 29 05 38 82 02          		bge	.L8
 630                             	.LBB90:
 114:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     int32_t ker_val = 0;
 631                             		.loc 1 114 21 is_stmt 1
 632                             	.LVL79:
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 633                             		.loc 1 115 21
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 634                             		.loc 1 117 21
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 635                             		.loc 1 117 24 is_stmt 0
 636 0336 ED 0B 0E                		mov.L	56[r0], r11
 637 0339 61 0B                   		cmp	#0, r11
 638 033b 21 3A                   		bne	.L9
 119:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr);
 639                             		.loc 1 119 25 is_stmt 1
 640                             	.LVL80:
 641                             	.LBB38:
 642                             	.LBB39:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 643                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 644                             		.loc 2 554 5
 645 033d EC 33                   		mov.L	[r3], r3
 646                             	.LVL81:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 647                             		.loc 2 556 5
 648                             	.LBE39:
 649                             	.LBE38:
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 650                             		.loc 1 120 25
 651                             	.LBB42:
 652                             	.LBB43:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 653                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654                             		.loc 2 554 5
 655 033f EC 1B                   		mov.L	[r1], r11
 656                             	.LVL82:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 657                             		.loc 2 556 5
 658                             	.LBE43:
 659                             	.LBE42:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 660                             		.loc 1 122 25
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 661                             		.loc 1 123 55 is_stmt 0
 662 0341 FD A8 36                		shar	#8, r3, r6
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 663                             		.loc 1 124 55
 664 0344 FD B0 31                		shar	#16, r3, r1
 665                             	.LVL83:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 666                             		.loc 1 122 39
 667 0347 CF 38                   		mov.B	r3, r8
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 668                             		.loc 1 123 39
 669 0349 CF 66                   		mov.B	r6, r6
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 670                             		.loc 1 123 96
 671 034b FD A8 BE                		shar	#8, r11, r14
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 672                             		.loc 1 124 39
 673 034e CF 11                   		mov.B	r1, r1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 674                             		.loc 1 124 97
 675 0350 FD B0 BD                		shar	#16, r11, r13
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 676                             		.loc 1 125 55
 677 0353 6B 83                   		shar	#24, r3
 678                             	.LVL84:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 679                             		.loc 1 122 54
 680 0355 4B 98                   		add	r9, r8
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 681                             		.loc 1 122 72
 682 0357 CF BF                   		mov.B	r11, r15
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 683                             		.loc 1 123 61
 684 0359 4B 96                   		add	r9, r6
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 685                             		.loc 1 123 79
 686 035b CF EE                   		mov.B	r14, r14
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 687                             		.loc 1 124 62
 688 035d 4B 91                   		add	r9, r1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 689                             		.loc 1 124 80
 690 035f CF DD                   		mov.B	r13, r13
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 691                             		.loc 1 125 62
 692 0361 4B 93                   		add	r9, r3
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 693                             		.loc 1 125 97
 694 0363 6B 8B                   		shar	#24, r11
 695                             	.LVL85:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 696                             		.loc 1 122 70
 697 0365 4F F8                   		mul	r15, r8
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 698                             		.loc 1 123 77
 699 0367 4F E6                   		mul	r14, r6
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 700                             		.loc 1 124 78
 701 0369 4F D1                   		mul	r13, r1
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 702                             		.loc 1 125 78
 703 036b 4F 3B                   		mul	r3, r11
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 704                             		.loc 1 122 35
 705 036d 4B 84                   		add	r8, r4
 706                             	.LVL86:
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 707                             		.loc 1 123 25 is_stmt 1
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 708                             		.loc 1 123 35 is_stmt 0
 709 036f 4B 65                   		add	r6, r5
 710                             	.LVL87:
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 711                             		.loc 1 124 25 is_stmt 1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 712                             		.loc 1 124 35 is_stmt 0
 713 0371 4B 1A                   		add	r1, r10
 714                             	.LVL88:
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 715                             		.loc 1 125 25 is_stmt 1
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 716                             		.loc 1 125 35 is_stmt 0
 717 0373 4B B7                   		add	r11, r7
 718                             	.LVL89:
 719                             		.balign 8,3,1
 720                             	.L9:
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 721                             		.loc 1 128 21 is_stmt 1
 722                             	.LBB46:
 723                             	.LBB47:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 724                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 725                             		.loc 2 554 5
 726 0375 A8 81                   		mov.L	8[r0], r1
 727 0377 EC 13                   		mov.L	[r1], r3
 728                             	.LVL90:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 729                             		.loc 2 556 5
 730                             	.LBE47:
 731                             	.LBE46:
 129:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 732                             		.loc 1 129 21
 733                             	.LBB52:
 734                             	.LBB53:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 735                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 736                             		.loc 2 554 5
 737 0379 A8 8E                   		mov.L	12[r0], r6
 738 037b EC 6B                   		mov.L	[r6], r11
 739                             	.LVL91:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 740                             		.loc 2 556 5
 741                             	.LBE53:
 742                             	.LBE52:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 743                             		.loc 1 131 21
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 744                             		.loc 1 132 51 is_stmt 0
 745 037d FD A8 36                		shar	#8, r3, r6
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 746                             		.loc 1 133 51
 747 0380 FD B0 31                		shar	#16, r3, r1
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 748                             		.loc 1 131 35
 749 0383 CF 38                   		mov.B	r3, r8
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 750                             		.loc 1 132 35
 751 0385 CF 66                   		mov.B	r6, r6
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 752                             		.loc 1 132 92
 753 0387 FD A8 BE                		shar	#8, r11, r14
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 754                             		.loc 1 133 35
 755 038a CF 11                   		mov.B	r1, r1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 756                             		.loc 1 133 93
 757 038c FD B0 BD                		shar	#16, r11, r13
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 758                             		.loc 1 134 51
 759 038f 6B 83                   		shar	#24, r3
 760                             	.LVL92:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 761                             		.loc 1 131 50
 762 0391 4B 98                   		add	r9, r8
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 763                             		.loc 1 131 68
 764 0393 CF BF                   		mov.B	r11, r15
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 765                             		.loc 1 132 57
 766 0395 4B 96                   		add	r9, r6
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 767                             		.loc 1 132 75
 768 0397 CF EE                   		mov.B	r14, r14
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 769                             		.loc 1 133 58
 770 0399 4B 91                   		add	r9, r1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 771                             		.loc 1 133 76
 772 039b CF DD                   		mov.B	r13, r13
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 773                             		.loc 1 134 58
 774 039d 4B 93                   		add	r9, r3
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 775                             		.loc 1 134 93
 776 039f 6B 8B                   		shar	#24, r11
 777                             	.LVL93:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 778                             		.loc 1 131 66
 779 03a1 4F F8                   		mul	r15, r8
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 780                             		.loc 1 132 73
 781 03a3 4F E6                   		mul	r14, r6
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 782                             		.loc 1 133 74
 783 03a5 4F D1                   		mul	r13, r1
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 784                             		.loc 1 134 74
 785 03a7 4F 3B                   		mul	r3, r11
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 786                             		.loc 1 131 31
 787 03a9 4B 84                   		add	r8, r4
 788                             	.LVL94:
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 789                             		.loc 1 132 21 is_stmt 1
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 790                             		.loc 1 132 31 is_stmt 0
 791 03ab 4B 65                   		add	r6, r5
 792                             	.LVL95:
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 793                             		.loc 1 133 21 is_stmt 1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 794                             		.loc 1 133 31 is_stmt 0
 795 03ad 4B 1A                   		add	r1, r10
 796                             	.LVL96:
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 797                             		.loc 1 134 21 is_stmt 1
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 798                             		.loc 1 134 31 is_stmt 0
 799 03af 4B B7                   		add	r11, r7
 800                             	.LVL97:
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 801                             		.loc 1 136 21 is_stmt 1
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 802                             		.loc 1 136 24 is_stmt 0
 803 03b1 ED 0B 0D                		mov.L	52[r0], r11
 804 03b4 61 2B                   		cmp	#2, r11
 805 03b6 2B 46                   		ble	.L10
 138:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 806                             		.loc 1 138 25 is_stmt 1
 807                             	.LVL98:
 808                             	.LBB58:
 809                             	.LBB59:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 810                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 811                             		.loc 2 554 5
 812 03b8 AA 83                   		mov.L	40[r0], r3
 813 03ba 06 89 03 13             		add	76[r0], r3
 814                             	.LBE59:
 815                             	.LBE58:
 816                             	.LBB64:
 817                             	.LBB65:
 818 03be AA 89                   		mov.L	44[r0], r1
 819 03c0 06 89 01 14             		add	80[r0], r1
 820                             	.LBE65:
 821                             	.LBE64:
 822                             	.LBB70:
 823                             	.LBB60:
 824 03c4 EC 33                   		mov.L	[r3], r3
 825                             	.LVL99:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 826                             		.loc 2 556 5
 827                             	.LBE60:
 828                             	.LBE70:
 139:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 829                             		.loc 1 139 25
 830                             	.LBB71:
 831                             	.LBB66:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 832                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 833                             		.loc 2 554 5
 834 03c6 EC 1B                   		mov.L	[r1], r11
 835                             	.LVL100:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 836                             		.loc 2 556 5
 837                             	.LBE66:
 838                             	.LBE71:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 839                             		.loc 1 141 25
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 840                             		.loc 1 142 55 is_stmt 0
 841 03c8 FD A8 36                		shar	#8, r3, r6
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 842                             		.loc 1 143 55
 843 03cb FD B0 31                		shar	#16, r3, r1
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 844                             		.loc 1 141 39
 845 03ce CF 38                   		mov.B	r3, r8
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 846                             		.loc 1 142 39
 847 03d0 CF 66                   		mov.B	r6, r6
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 848                             		.loc 1 142 96
 849 03d2 FD A8 BE                		shar	#8, r11, r14
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 850                             		.loc 1 143 39
 851 03d5 CF 11                   		mov.B	r1, r1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 852                             		.loc 1 143 97
 853 03d7 FD B0 BD                		shar	#16, r11, r13
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 854                             		.loc 1 144 55
 855 03da 6B 83                   		shar	#24, r3
 856                             	.LVL101:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 857                             		.loc 1 141 54
 858 03dc 4B 98                   		add	r9, r8
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 859                             		.loc 1 141 72
 860 03de CF BF                   		mov.B	r11, r15
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 861                             		.loc 1 142 61
 862 03e0 4B 96                   		add	r9, r6
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 863                             		.loc 1 142 79
 864 03e2 CF EE                   		mov.B	r14, r14
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 865                             		.loc 1 143 62
 866 03e4 4B 91                   		add	r9, r1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 867                             		.loc 1 143 80
 868 03e6 CF DD                   		mov.B	r13, r13
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 869                             		.loc 1 144 62
 870 03e8 4B 93                   		add	r9, r3
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 871                             		.loc 1 144 97
 872 03ea 6B 8B                   		shar	#24, r11
 873                             	.LVL102:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 874                             		.loc 1 141 70
 875 03ec 4F F8                   		mul	r15, r8
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 876                             		.loc 1 142 77
 877 03ee 4F E6                   		mul	r14, r6
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 878                             		.loc 1 143 78
 879 03f0 4F D1                   		mul	r13, r1
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 880                             		.loc 1 144 78
 881 03f2 4F 3B                   		mul	r3, r11
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 882                             		.loc 1 141 35
 883 03f4 4B 84                   		add	r8, r4
 884                             	.LVL103:
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 885                             		.loc 1 142 25 is_stmt 1
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 886                             		.loc 1 142 35 is_stmt 0
 887 03f6 4B 65                   		add	r6, r5
 888                             	.LVL104:
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 889                             		.loc 1 143 25 is_stmt 1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 890                             		.loc 1 143 35 is_stmt 0
 891 03f8 4B 1A                   		add	r1, r10
 892                             	.LVL105:
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 893                             		.loc 1 144 25 is_stmt 1
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 894                             		.loc 1 144 35 is_stmt 0
 895 03fa 4B B7                   		add	r11, r7
 896                             	.LVL106:
 897                             		.balign 8,3,1
 898                             	.L10:
 147:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 899                             		.loc 1 147 21 is_stmt 1
 148:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 900                             		.loc 1 148 21
 901                             	.LBE90:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 902                             		.loc 1 112 17 is_stmt 0
 903 03fc AB 89                   		mov.L	60[r0], r1
 904 03fe AC 0B                   		mov.L	68[r0], r3
 905 0400 47 31                   		cmp	r3, r1
 906 0402 2A 05 38 B1 01          		ble	.L8
 907                             	.LBB91:
 114:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     int32_t ker_val = 0;
 908                             		.loc 1 114 21 is_stmt 1
 909                             	.LVL107:
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 910                             		.loc 1 115 21
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 911                             		.loc 1 117 21
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 912                             		.loc 1 117 24 is_stmt 0
 913 0407 AB 86                   		mov.L	56[r0], r6
 914 0409 61 06                   		cmp	#0, r6
 915 040b 21 3F                   		bne	.L12
 119:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr);
 916                             		.loc 1 119 25 is_stmt 1
 917                             	.LVL108:
 918                             	.LBB72:
 919                             	.LBB40:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 920                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 921                             		.loc 2 554 5
 922 040d ED 0B 07                		mov.L	28[r0], r11
 923 0410 EC B3                   		mov.L	[r11], r3
 924                             	.LVL109:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 925                             		.loc 2 556 5
 926                             	.LBE40:
 927                             	.LBE72:
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 928                             		.loc 1 120 25
 929                             	.LBB73:
 930                             	.LBB44:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 931                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 932                             		.loc 2 554 5
 933 0412 AA 01                   		mov.L	32[r0], r1
 934 0414 EC 1B                   		mov.L	[r1], r11
 935                             	.LVL110:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 936                             		.loc 2 556 5
 937                             	.LBE44:
 938                             	.LBE73:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 939                             		.loc 1 122 25
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 940                             		.loc 1 123 55 is_stmt 0
 941 0416 FD A8 36                		shar	#8, r3, r6
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 942                             		.loc 1 124 55
 943 0419 FD B0 31                		shar	#16, r3, r1
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 944                             		.loc 1 122 39
 945 041c CF 38                   		mov.B	r3, r8
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 946                             		.loc 1 123 39
 947 041e CF 66                   		mov.B	r6, r6
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 948                             		.loc 1 123 96
 949 0420 FD A8 BE                		shar	#8, r11, r14
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 950                             		.loc 1 124 39
 951 0423 CF 11                   		mov.B	r1, r1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 952                             		.loc 1 124 97
 953 0425 FD B0 BD                		shar	#16, r11, r13
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 954                             		.loc 1 125 55
 955 0428 6B 83                   		shar	#24, r3
 956                             	.LVL111:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 957                             		.loc 1 122 54
 958 042a 4B 98                   		add	r9, r8
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 959                             		.loc 1 122 72
 960 042c CF BF                   		mov.B	r11, r15
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 961                             		.loc 1 123 61
 962 042e 4B 96                   		add	r9, r6
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 963                             		.loc 1 123 79
 964 0430 CF EE                   		mov.B	r14, r14
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 965                             		.loc 1 124 62
 966 0432 4B 91                   		add	r9, r1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 967                             		.loc 1 124 80
 968 0434 CF DD                   		mov.B	r13, r13
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 969                             		.loc 1 125 62
 970 0436 4B 93                   		add	r9, r3
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 971                             		.loc 1 125 97
 972 0438 6B 8B                   		shar	#24, r11
 973                             	.LVL112:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 974                             		.loc 1 122 70
 975 043a 4F F8                   		mul	r15, r8
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 976                             		.loc 1 123 77
 977 043c 4F E6                   		mul	r14, r6
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 978                             		.loc 1 124 78
 979 043e 4F D1                   		mul	r13, r1
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 980                             		.loc 1 125 78
 981 0440 4F 3B                   		mul	r3, r11
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 982                             		.loc 1 122 35
 983 0442 4B 84                   		add	r8, r4
 984                             	.LVL113:
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 985                             		.loc 1 123 25 is_stmt 1
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 986                             		.loc 1 123 35 is_stmt 0
 987 0444 4B 65                   		add	r6, r5
 988                             	.LVL114:
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 989                             		.loc 1 124 25 is_stmt 1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 990                             		.loc 1 124 35 is_stmt 0
 991 0446 4B 1A                   		add	r1, r10
 992                             	.LVL115:
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 993                             		.loc 1 125 25 is_stmt 1
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 994                             		.loc 1 125 35 is_stmt 0
 995 0448 4B B7                   		add	r11, r7
 996                             	.LVL116:
 997                             		.balign 8,3,1
 998                             	.L12:
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 999                             		.loc 1 128 21 is_stmt 1
 1000                             	.LBB74:
 1001                             	.LBB48:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1002                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1003                             		.loc 2 554 5
 1004 044a A8 83                   		mov.L	8[r0], r3
 1005 044c 06 89 03 09             		add	36[r0], r3
 1006                             	.LBE48:
 1007                             	.LBE74:
 1008                             	.LBB75:
 1009                             	.LBB54:
 1010 0450 A8 89                   		mov.L	12[r0], r1
 1011 0452 06 89 01 0C             		add	48[r0], r1
 1012                             	.LBE54:
 1013                             	.LBE75:
 1014                             	.LBB76:
 1015                             	.LBB49:
 1016 0456 EC 33                   		mov.L	[r3], r3
 1017                             	.LVL117:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1018                             		.loc 2 556 5
 1019                             	.LBE49:
 1020                             	.LBE76:
 129:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1021                             		.loc 1 129 21
 1022                             	.LBB77:
 1023                             	.LBB55:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1024                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1025                             		.loc 2 554 5
 1026 0458 EC 1B                   		mov.L	[r1], r11
 1027                             	.LVL118:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1028                             		.loc 2 556 5
 1029                             	.LBE55:
 1030                             	.LBE77:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1031                             		.loc 1 131 21
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1032                             		.loc 1 132 51 is_stmt 0
 1033 045a FD A8 36                		shar	#8, r3, r6
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1034                             		.loc 1 133 51
 1035 045d FD B0 31                		shar	#16, r3, r1
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1036                             		.loc 1 131 35
 1037 0460 CF 38                   		mov.B	r3, r8
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1038                             		.loc 1 132 35
 1039 0462 CF 66                   		mov.B	r6, r6
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1040                             		.loc 1 132 92
 1041 0464 FD A8 BE                		shar	#8, r11, r14
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1042                             		.loc 1 133 35
 1043 0467 CF 11                   		mov.B	r1, r1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1044                             		.loc 1 133 93
 1045 0469 FD B0 BD                		shar	#16, r11, r13
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1046                             		.loc 1 134 51
 1047 046c 6B 83                   		shar	#24, r3
 1048                             	.LVL119:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1049                             		.loc 1 131 50
 1050 046e 4B 98                   		add	r9, r8
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1051                             		.loc 1 131 68
 1052 0470 CF BF                   		mov.B	r11, r15
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1053                             		.loc 1 132 57
 1054 0472 4B 96                   		add	r9, r6
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1055                             		.loc 1 132 75
 1056 0474 CF EE                   		mov.B	r14, r14
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1057                             		.loc 1 133 58
 1058 0476 4B 91                   		add	r9, r1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1059                             		.loc 1 133 76
 1060 0478 CF DD                   		mov.B	r13, r13
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1061                             		.loc 1 134 58
 1062 047a 4B 93                   		add	r9, r3
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1063                             		.loc 1 134 93
 1064 047c 6B 8B                   		shar	#24, r11
 1065                             	.LVL120:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1066                             		.loc 1 131 66
 1067 047e 4F F8                   		mul	r15, r8
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1068                             		.loc 1 132 73
 1069 0480 4F E6                   		mul	r14, r6
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1070                             		.loc 1 133 74
 1071 0482 4F D1                   		mul	r13, r1
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1072                             		.loc 1 134 74
 1073 0484 4F 3B                   		mul	r3, r11
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1074                             		.loc 1 131 31
 1075 0486 4B 84                   		add	r8, r4
 1076                             	.LVL121:
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1077                             		.loc 1 132 21 is_stmt 1
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1078                             		.loc 1 132 31 is_stmt 0
 1079 0488 4B 65                   		add	r6, r5
 1080                             	.LVL122:
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1081                             		.loc 1 133 21 is_stmt 1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1082                             		.loc 1 133 31 is_stmt 0
 1083 048a 4B 1A                   		add	r1, r10
 1084                             	.LVL123:
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1085                             		.loc 1 134 21 is_stmt 1
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1086                             		.loc 1 134 31 is_stmt 0
 1087 048c 4B B7                   		add	r11, r7
 1088                             	.LVL124:
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1089                             		.loc 1 136 21 is_stmt 1
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1090                             		.loc 1 136 24 is_stmt 0
 1091 048e AB 0B                   		mov.L	52[r0], r3
 1092 0490 61 23                   		cmp	#2, r3
 1093 0492 2B 3E                   		ble	.L13
 138:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 1094                             		.loc 1 138 25 is_stmt 1
 1095                             	.LBB78:
 1096                             	.LBB61:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1097                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1098                             		.loc 2 554 5
 1099 0494 AA 86                   		mov.L	40[r0], r6
 1100 0496 EC 63                   		mov.L	[r6], r3
 1101                             	.LVL125:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1102                             		.loc 2 556 5
 1103                             	.LBE61:
 1104                             	.LBE78:
 139:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1105                             		.loc 1 139 25
 1106                             	.LBB79:
 1107                             	.LBB67:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1108                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1109                             		.loc 2 554 5
 1110 0498 AA 89                   		mov.L	44[r0], r1
 1111 049a EC 1B                   		mov.L	[r1], r11
 1112                             	.LVL126:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1113                             		.loc 2 556 5
 1114                             	.LBE67:
 1115                             	.LBE79:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1116                             		.loc 1 141 25
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1117                             		.loc 1 142 55 is_stmt 0
 1118 049c FD A8 36                		shar	#8, r3, r6
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1119                             		.loc 1 143 55
 1120 049f FD B0 31                		shar	#16, r3, r1
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1121                             		.loc 1 141 39
 1122 04a2 CF 38                   		mov.B	r3, r8
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1123                             		.loc 1 142 39
 1124 04a4 CF 66                   		mov.B	r6, r6
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1125                             		.loc 1 142 96
 1126 04a6 FD A8 BE                		shar	#8, r11, r14
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1127                             		.loc 1 143 39
 1128 04a9 CF 11                   		mov.B	r1, r1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1129                             		.loc 1 143 97
 1130 04ab FD B0 BD                		shar	#16, r11, r13
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1131                             		.loc 1 144 55
 1132 04ae 6B 83                   		shar	#24, r3
 1133                             	.LVL127:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1134                             		.loc 1 141 54
 1135 04b0 4B 98                   		add	r9, r8
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1136                             		.loc 1 141 72
 1137 04b2 CF BF                   		mov.B	r11, r15
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1138                             		.loc 1 142 61
 1139 04b4 4B 96                   		add	r9, r6
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1140                             		.loc 1 142 79
 1141 04b6 CF EE                   		mov.B	r14, r14
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1142                             		.loc 1 143 62
 1143 04b8 4B 91                   		add	r9, r1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1144                             		.loc 1 143 80
 1145 04ba CF DD                   		mov.B	r13, r13
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1146                             		.loc 1 144 62
 1147 04bc 4B 93                   		add	r9, r3
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1148                             		.loc 1 144 97
 1149 04be 6B 8B                   		shar	#24, r11
 1150                             	.LVL128:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1151                             		.loc 1 141 70
 1152 04c0 4F F8                   		mul	r15, r8
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1153                             		.loc 1 142 77
 1154 04c2 4F E6                   		mul	r14, r6
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1155                             		.loc 1 143 78
 1156 04c4 4F D1                   		mul	r13, r1
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1157                             		.loc 1 144 78
 1158 04c6 4F 3B                   		mul	r3, r11
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1159                             		.loc 1 141 35
 1160 04c8 4B 84                   		add	r8, r4
 1161                             	.LVL129:
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1162                             		.loc 1 142 25 is_stmt 1
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1163                             		.loc 1 142 35 is_stmt 0
 1164 04ca 4B 65                   		add	r6, r5
 1165                             	.LVL130:
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1166                             		.loc 1 143 25 is_stmt 1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1167                             		.loc 1 143 35 is_stmt 0
 1168 04cc 4B 1A                   		add	r1, r10
 1169                             	.LVL131:
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1170                             		.loc 1 144 25 is_stmt 1
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1171                             		.loc 1 144 35 is_stmt 0
 1172 04ce 4B B7                   		add	r11, r7
 1173                             	.LVL132:
 1174                             		.balign 8,3,1
 1175                             	.L13:
 147:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1176                             		.loc 1 147 21 is_stmt 1
 1177 04d0 AA 0B                   		mov.L	36[r0], r3
 1178 04d2 06 89 03 07             		add	28[r0], r3
 1179                             	.LVL133:
 148:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 1180                             		.loc 1 148 21
 1181 04d6 AB 01                   		mov.L	48[r0], r1
 1182 04d8 06 89 01 08             		add	32[r0], r1
 1183                             	.LVL134:
 1184                             	.LBE91:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 1185                             		.loc 1 112 17 is_stmt 0
 1186 04dc AB 8E                   		mov.L	60[r0], r6
 1187 04de ED 0B 15                		mov.L	84[r0], r11
 1188 04e1 47 B6                   		cmp	r11, r6
 1189 04e3 2A 05 38 D0 00          		ble	.L8
 1190                             	.LVL135:
 1191                             	.LBB92:
 114:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     int32_t ker_val = 0;
 1192                             		.loc 1 114 21 is_stmt 1
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1193                             		.loc 1 115 21
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1194                             		.loc 1 117 21
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1195                             		.loc 1 117 24 is_stmt 0
 1196 04e8 AB 86                   		mov.L	56[r0], r6
 1197 04ea 61 06                   		cmp	#0, r6
 1198 04ec 21 3A                   		bne	.L14
 119:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr);
 1199                             		.loc 1 119 25 is_stmt 1
 1200                             	.LVL136:
 1201                             	.LBB80:
 1202                             	.LBB41:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1203                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1204                             		.loc 2 554 5
 1205 04ee EC 33                   		mov.L	[r3], r3
 1206                             	.LVL137:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1207                             		.loc 2 556 5
 1208                             	.LBE41:
 1209                             	.LBE80:
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1210                             		.loc 1 120 25
 1211                             	.LBB81:
 1212                             	.LBB45:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1213                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1214                             		.loc 2 554 5
 1215 04f0 EC 1B                   		mov.L	[r1], r11
 1216                             	.LVL138:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1217                             		.loc 2 556 5
 1218                             	.LBE45:
 1219                             	.LBE81:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1220                             		.loc 1 122 25
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1221                             		.loc 1 123 55 is_stmt 0
 1222 04f2 FD A8 36                		shar	#8, r3, r6
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1223                             		.loc 1 124 55
 1224 04f5 FD B0 31                		shar	#16, r3, r1
 1225                             	.LVL139:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1226                             		.loc 1 122 39
 1227 04f8 CF 38                   		mov.B	r3, r8
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1228                             		.loc 1 123 39
 1229 04fa CF 66                   		mov.B	r6, r6
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1230                             		.loc 1 123 96
 1231 04fc FD A8 BE                		shar	#8, r11, r14
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1232                             		.loc 1 124 39
 1233 04ff CF 11                   		mov.B	r1, r1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1234                             		.loc 1 124 97
 1235 0501 FD B0 BD                		shar	#16, r11, r13
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1236                             		.loc 1 125 55
 1237 0504 6B 83                   		shar	#24, r3
 1238                             	.LVL140:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1239                             		.loc 1 122 54
 1240 0506 4B 98                   		add	r9, r8
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1241                             		.loc 1 122 72
 1242 0508 CF BF                   		mov.B	r11, r15
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1243                             		.loc 1 123 61
 1244 050a 4B 96                   		add	r9, r6
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1245                             		.loc 1 123 79
 1246 050c CF EE                   		mov.B	r14, r14
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1247                             		.loc 1 124 62
 1248 050e 4B 91                   		add	r9, r1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1249                             		.loc 1 124 80
 1250 0510 CF DD                   		mov.B	r13, r13
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1251                             		.loc 1 125 62
 1252 0512 4B 93                   		add	r9, r3
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1253                             		.loc 1 125 97
 1254 0514 6B 8B                   		shar	#24, r11
 1255                             	.LVL141:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1256                             		.loc 1 122 70
 1257 0516 4F F8                   		mul	r15, r8
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1258                             		.loc 1 123 77
 1259 0518 4F E6                   		mul	r14, r6
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1260                             		.loc 1 124 78
 1261 051a 4F D1                   		mul	r13, r1
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1262                             		.loc 1 125 78
 1263 051c 4F 3B                   		mul	r3, r11
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1264                             		.loc 1 122 35
 1265 051e 4B 84                   		add	r8, r4
 1266                             	.LVL142:
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1267                             		.loc 1 123 25 is_stmt 1
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1268                             		.loc 1 123 35 is_stmt 0
 1269 0520 4B 65                   		add	r6, r5
 1270                             	.LVL143:
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1271                             		.loc 1 124 25 is_stmt 1
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1272                             		.loc 1 124 35 is_stmt 0
 1273 0522 4B 1A                   		add	r1, r10
 1274                             	.LVL144:
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1275                             		.loc 1 125 25 is_stmt 1
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1276                             		.loc 1 125 35 is_stmt 0
 1277 0524 4B B7                   		add	r11, r7
 1278                             	.LVL145:
 1279                             		.balign 8,3,1
 1280                             	.L14:
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 1281                             		.loc 1 128 21 is_stmt 1
 1282                             	.LBB82:
 1283                             	.LBB50:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1284                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1285                             		.loc 2 554 5
 1286 0526 A8 83                   		mov.L	8[r0], r3
 1287 0528 06 89 03 16             		add	88[r0], r3
 1288                             	.LBE50:
 1289                             	.LBE82:
 1290                             	.LBB83:
 1291                             	.LBB56:
 1292 052c A8 89                   		mov.L	12[r0], r1
 1293 052e 06 89 01 17             		add	92[r0], r1
 1294                             	.LBE56:
 1295                             	.LBE83:
 1296                             	.LBB84:
 1297                             	.LBB51:
 1298 0532 EC 33                   		mov.L	[r3], r3
 1299                             	.LVL146:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1300                             		.loc 2 556 5
 1301                             	.LBE51:
 1302                             	.LBE84:
 129:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1303                             		.loc 1 129 21
 1304                             	.LBB85:
 1305                             	.LBB57:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1306                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1307                             		.loc 2 554 5
 1308 0534 EC 1B                   		mov.L	[r1], r11
 1309                             	.LVL147:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1310                             		.loc 2 556 5
 1311                             	.LBE57:
 1312                             	.LBE85:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1313                             		.loc 1 131 21
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1314                             		.loc 1 132 51 is_stmt 0
 1315 0536 FD A8 36                		shar	#8, r3, r6
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1316                             		.loc 1 133 51
 1317 0539 FD B0 31                		shar	#16, r3, r1
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1318                             		.loc 1 131 35
 1319 053c CF 38                   		mov.B	r3, r8
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1320                             		.loc 1 132 35
 1321 053e CF 66                   		mov.B	r6, r6
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1322                             		.loc 1 132 92
 1323 0540 FD A8 BE                		shar	#8, r11, r14
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1324                             		.loc 1 133 35
 1325 0543 CF 11                   		mov.B	r1, r1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1326                             		.loc 1 133 93
 1327 0545 FD B0 BD                		shar	#16, r11, r13
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1328                             		.loc 1 134 51
 1329 0548 6B 83                   		shar	#24, r3
 1330                             	.LVL148:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1331                             		.loc 1 131 50
 1332 054a 4B 98                   		add	r9, r8
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1333                             		.loc 1 131 68
 1334 054c CF BF                   		mov.B	r11, r15
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1335                             		.loc 1 132 57
 1336 054e 4B 96                   		add	r9, r6
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1337                             		.loc 1 132 75
 1338 0550 CF EE                   		mov.B	r14, r14
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1339                             		.loc 1 133 58
 1340 0552 4B 91                   		add	r9, r1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1341                             		.loc 1 133 76
 1342 0554 CF DD                   		mov.B	r13, r13
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1343                             		.loc 1 134 58
 1344 0556 4B 93                   		add	r9, r3
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1345                             		.loc 1 134 93
 1346 0558 6B 8B                   		shar	#24, r11
 1347                             	.LVL149:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1348                             		.loc 1 131 66
 1349 055a 4F F8                   		mul	r15, r8
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1350                             		.loc 1 132 73
 1351 055c 4F E6                   		mul	r14, r6
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1352                             		.loc 1 133 74
 1353 055e 4F D1                   		mul	r13, r1
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1354                             		.loc 1 134 74
 1355 0560 4F 3B                   		mul	r3, r11
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 1356                             		.loc 1 131 31
 1357 0562 4B 84                   		add	r8, r4
 1358                             	.LVL150:
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1359                             		.loc 1 132 21 is_stmt 1
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 1360                             		.loc 1 132 31 is_stmt 0
 1361 0564 4B 65                   		add	r6, r5
 1362                             	.LVL151:
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1363                             		.loc 1 133 21 is_stmt 1
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 1364                             		.loc 1 133 31 is_stmt 0
 1365 0566 4B 1A                   		add	r1, r10
 1366                             	.LVL152:
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1367                             		.loc 1 134 21 is_stmt 1
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1368                             		.loc 1 134 31 is_stmt 0
 1369 0568 4B B7                   		add	r11, r7
 1370                             	.LVL153:
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1371                             		.loc 1 136 21 is_stmt 1
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1372                             		.loc 1 136 24 is_stmt 0
 1373 056a ED 0B 0D                		mov.L	52[r0], r11
 1374 056d 61 2B                   		cmp	#2, r11
 1375 056f 2B 46                   		ble	.L8
 138:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 1376                             		.loc 1 138 25 is_stmt 1
 1377                             	.LBB86:
 1378                             	.LBB62:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1379                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1380                             		.loc 2 554 5
 1381 0571 AA 83                   		mov.L	40[r0], r3
 1382 0573 06 89 03 09             		add	36[r0], r3
 1383                             	.LBE62:
 1384                             	.LBE86:
 1385                             	.LBB87:
 1386                             	.LBB68:
 1387 0577 AA 89                   		mov.L	44[r0], r1
 1388 0579 06 89 01 0C             		add	48[r0], r1
 1389                             	.LBE68:
 1390                             	.LBE87:
 1391                             	.LBB88:
 1392                             	.LBB63:
 1393 057d EC 33                   		mov.L	[r3], r3
 1394                             	.LVL154:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1395                             		.loc 2 556 5
 1396                             	.LBE63:
 1397                             	.LBE88:
 139:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1398                             		.loc 1 139 25
 1399                             	.LBB89:
 1400                             	.LBB69:
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 1401                             		.loc 2 553 5
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 1402                             		.loc 2 554 5
 1403 057f EC 1B                   		mov.L	[r1], r11
 1404                             	.LVL155:
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 1405                             		.loc 2 556 5
 1406                             	.LBE69:
 1407                             	.LBE89:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1408                             		.loc 1 141 25
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1409                             		.loc 1 142 55 is_stmt 0
 1410 0581 FD A8 36                		shar	#8, r3, r6
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1411                             		.loc 1 143 55
 1412 0584 FD B0 31                		shar	#16, r3, r1
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1413                             		.loc 1 141 39
 1414 0587 CF 38                   		mov.B	r3, r8
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1415                             		.loc 1 142 39
 1416 0589 CF 66                   		mov.B	r6, r6
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1417                             		.loc 1 142 96
 1418 058b FD A8 BE                		shar	#8, r11, r14
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1419                             		.loc 1 143 39
 1420 058e CF 11                   		mov.B	r1, r1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1421                             		.loc 1 143 97
 1422 0590 FD B0 BD                		shar	#16, r11, r13
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1423                             		.loc 1 144 55
 1424 0593 6B 83                   		shar	#24, r3
 1425                             	.LVL156:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1426                             		.loc 1 141 54
 1427 0595 4B 98                   		add	r9, r8
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1428                             		.loc 1 141 72
 1429 0597 CF BF                   		mov.B	r11, r15
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1430                             		.loc 1 142 61
 1431 0599 4B 96                   		add	r9, r6
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1432                             		.loc 1 142 79
 1433 059b CF EE                   		mov.B	r14, r14
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1434                             		.loc 1 143 62
 1435 059d 4B 91                   		add	r9, r1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1436                             		.loc 1 143 80
 1437 059f CF DD                   		mov.B	r13, r13
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1438                             		.loc 1 144 62
 1439 05a1 4B 93                   		add	r9, r3
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1440                             		.loc 1 144 97
 1441 05a3 6B 8B                   		shar	#24, r11
 1442                             	.LVL157:
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1443                             		.loc 1 141 70
 1444 05a5 4F F8                   		mul	r15, r8
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1445                             		.loc 1 142 77
 1446 05a7 4F E6                   		mul	r14, r6
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1447                             		.loc 1 143 78
 1448 05a9 4F D1                   		mul	r13, r1
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1449                             		.loc 1 144 78
 1450 05ab 4F 3B                   		mul	r3, r11
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8
 1451                             		.loc 1 141 35
 1452 05ad 4B 84                   		add	r8, r4
 1453                             	.LVL158:
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1454                             		.loc 1 142 25 is_stmt 1
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 
 1455                             		.loc 1 142 35 is_stmt 0
 1456 05af 4B 65                   		add	r6, r5
 1457                             	.LVL159:
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1458                             		.loc 1 143 25 is_stmt 1
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 
 1459                             		.loc 1 143 35 is_stmt 0
 1460 05b1 4B 1A                   		add	r1, r10
 1461                             	.LVL160:
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1462                             		.loc 1 144 25 is_stmt 1
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1463                             		.loc 1 144 35 is_stmt 0
 1464 05b3 4B B7                   		add	r11, r7
 1465                             	.LVL161:
 147:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1466                             		.loc 1 147 21 is_stmt 1
 148:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 1467                             		.loc 1 148 21
 1468                             		.balign 8,3,1
 1469                             	.L8:
 1470                             	.LBE92:
 1471                             	.LBE108:
 151:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch
 1472                             		.loc 1 151 17
 151:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch
 1473                             		.loc 1 151 29 is_stmt 0
 1474 05b5 A8 09                   		mov.L	4[r0], r1
 1475 05b7 EC 13                   		mov.L	[r1], r3
 1476                             	.LVL162:
 1477                             	.LBB109:
 1478                             	.LBB98:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1479                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1480                             		.loc 2 817 5 is_stmt 0
 1481 05b9 EC C6                   		mov.L	[r12], r6
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1482                             		.loc 2 816 25
 1483 05bb 66 01                   		mov.L	#0, r1
 1484 05bd FC 13 31                		max	r3, r1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1485                             		.loc 2 816 11
 1486 05c0 FD 62 14                		shll	r1, r4
 1487                             	.LVL163:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1488                             		.loc 2 817 5 is_stmt 1
 1489                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1490 05c3 FD 03 46                		emula r4, r6, a0
 1491 05c6 FD 19 00                	racl #1, a0
 1492 05c9 FD 1F 04                	mvfachi #0, a0, r4
 1493                             	
 1494                             	 ; 0 "" 2
 1495                             	.LVL164:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1496                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1497                             		.loc 2 823 22 is_stmt 0
 1498 05cc 61 03                   		cmp	#0, r3
 1499 05ce 2B 05 38 2C FC          		bgt	.L53
 1500 05d3 7E 13                   		neg	r3
 1501                             	.LVL165:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1502                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1503                             		.loc 2 824 8 is_stmt 0
 1504 05d5 61 04                   		cmp	#0, r4
 1505 05d7 29 05 38 2C FC          		bge	.L17
 1506                             	.L65:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1507                             		.loc 2 825 9 is_stmt 1
 1508                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1509 05dc 7E 14                   		neg r4
 1510 05de FD 60 34                	shlr r3, r4
 1511 05e1 FD 74 24 00             	adc #0, r4
 1512 05e5 7E 14                   	neg r4
 1513                             	
 1514                             	 ; 0 "" 2
 1515                             	.LVL166:
 1516 05e7 38 25 FC                		bra	.L18
 1517                             	.LVL167:
 1518                             	.L71:
 1519                             	.LBE98:
 1520                             	.LBE109:
 1521                             	.LBB110:
 1522                             	.LBB107:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1523                             		.loc 2 825 9
 1524                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1525 05ea 7E 17                   		neg r7
 1526 05ec FD 60 37                	shlr r3, r7
 1527 05ef FD 74 27 00             	adc #0, r7
 1528 05f3 7E 17                   	neg r7
 1529                             	
 1530                             	 ; 0 "" 2
 1531                             	.LVL168:
 1532 05f5 38 A6 FC                		bra	.L27
 1533                             	.LVL169:
 1534                             	.L70:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1535                             		.loc 2 823 22 is_stmt 0
 1536 05f8 7E 13                   		neg	r3
 1537                             	.LVL170:
 1538 05fa 38 93 FC                		bra	.L25
 1539                             	.LVL171:
 1540                             	.L69:
 1541                             	.LBE107:
 1542                             	.LBE110:
 1543                             	.LBB111:
 1544                             	.LBB104:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1545                             		.loc 2 825 9 is_stmt 1
 1546                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1547 05fd 7E 1A                   		neg r10
 1548 05ff FD 60 3A                	shlr r3, r10
 1549 0602 FD 74 2A 00             	adc #0, r10
 1550 0606 7E 1A                   	neg r10
 1551                             	
 1552                             	 ; 0 "" 2
 1553                             	.LVL172:
 1554 0608 38 64 FC                		bra	.L24
 1555                             	.LVL173:
 1556                             	.L68:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1557                             		.loc 2 823 22 is_stmt 0
 1558 060b 7E 13                   		neg	r3
 1559                             	.LVL174:
 1560 060d 38 51 FC                		bra	.L22
 1561                             	.LVL175:
 1562                             	.L67:
 1563                             	.LBE104:
 1564                             	.LBE111:
 1565                             	.LBB112:
 1566                             	.LBB101:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1567                             		.loc 2 825 9 is_stmt 1
 1568                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1569 0610 7E 15                   		neg r5
 1570 0612 FD 60 35                	shlr r3, r5
 1571 0615 FD 74 25 00             	adc #0, r5
 1572 0619 7E 15                   	neg r5
 1573                             	
 1574                             	 ; 0 "" 2
 1575                             	.LVL176:
 1576 061b 38 20 FC                		bra	.L21
 1577                             	.LVL177:
 1578                             	.L66:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1579                             		.loc 2 823 22 is_stmt 0
 1580 061e 7E 13                   		neg	r3
 1581                             	.LVL178:
 1582 0620 38 0D FC                		bra	.L19
 1583                             	.LVL179:
 1584                             	.L72:
 1585 0623 AE 87                   		mov.L	104[r0], r7
 1586 0625 62 47                   		add	#4, r7
 1587                             	.LVL180:
 1588                             	.LBE101:
 1589                             	.LBE112:
 1590                             	.LBE116:
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 1591                             		.loc 1 102 51
 1592 0627 ED 0A 2C                		mov.L	176[r0], r10
 1593 062a 06 89 07 2B             		add	172[r0], r7
 1594                             	.LVL181:
 1595 062e A6 87                   		mov.L	r7, 104[r0]
 1596                             	.LVL182:
 1597                             		.balign 8,3,1
 1598                             	.L7:
 170:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             }
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 172:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             // Leftover
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             for (; in_ch < input_ch; ++in_ch)
 1599                             		.loc 1 173 13
 1600 0630 AE 0C                   		mov.L	100[r0], r4
 1601 0632 47 A4                   		cmp	r10, r4
 1602 0634 2A 05 38 14 01          		ble	.L29
 1603 0639 AF 8F                   		mov.L	124[r0], r7
 1604 063b 06 89 07 09             		add	36[r0], r7
 1605 063f 06 89 04 16             		add	88[r0], r4
 1606 0643 AE 05                   		mov.L	96[r0], r5
 1607 0645 FF 07 75                		sub	r7, r5, r7
 1608 0648 AA 0D                   		mov.L	36[r0], r5
 1609 064a 06 89 05 23             		add	140[r0], r5
 1610 064e 4B 74                   		add	r7, r4
 1611 0650 4B 75                   		add	r7, r5
 1612 0652 4B A4                   		add	r10, r4
 1613 0654 ED 01 2E                		mov.L	184[r0], r1
 1614 0657 4B A1                   		add	r10, r1
 1615 0659 4B A7                   		add	r10, r7
 1616 065b ED 02 28                		mov.L	160[r0], r2
 1617 065e 4B A2                   		add	r10, r2
 1618 0660 4B A5                   		add	r10, r5
 1619 0662 ED 03 25                		mov.L	148[r0], r3
 1620 0665 4B A3                   		add	r10, r3
 1621 0667 ED 0F 24                		mov.L	144[r0], r15
 1622 066a 06 89 0F 1A             		add	104[r0], r15
 1623 066e E7 0A 01                		mov.L	r10, 4[r0]
 1624 0671 AF 8E                   		mov.L	124[r0], r6
 1625 0673 4B 46                   		add	r4, r6
 1626 0675 ED 0B 1B                		mov.L	108[r0], r11
 1627 0678 4B 1B                   		add	r1, r11
 1628 067a ED 0C 1F                		mov.L	124[r0], r12
 1629 067d 4B 7C                   		add	r7, r12
 1630 067f ED 08 1B                		mov.L	108[r0], r8
 1631 0682 4B 28                   		add	r2, r8
 1632 0684 ED 0D 1F                		mov.L	124[r0], r13
 1633 0687 4B 5D                   		add	r5, r13
 1634 0689 ED 0E 1B                		mov.L	108[r0], r14
 1635 068c 4B 3E                   		add	r3, r14
 1636                             	.LBB117:
 1637                             	.LBB118:
 174:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 175:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 int32_t out_buff = bias[in_ch];
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 177:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_
 178:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 1638                             		.loc 1 180 83
 1639 068e AC 02                   		mov.L	64[r0], r2
 1640 0690 62 22                   		add	#2, r2
 1641 0692 AE 0D                   		mov.L	100[r0], r5
 1642 0694 EF F1                   		mov.L	r15, r1
 1643 0696 ED 0F 0F                		mov.L	60[r0], r15
 1644 0699 E3 02                   		mov.L	r2, [r0]
 1645                             		.balign 8,3,1
 1646                             	.L42:
 1647                             	.LBE118:
 175:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1648                             		.loc 1 175 17 is_stmt 1
 175:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1649                             		.loc 1 175 25 is_stmt 0
 1650 069b AF 02                   		mov.L	112[r0], r2
 1651 069d FE 6A 27                		mov.L	[r10,r2], r7
 1652                             	.LVL183:
 177:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 1653                             		.loc 1 177 17 is_stmt 1
 178:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1654                             		.loc 1 178 17
 1655                             		.loc 1 180 17
 1656                             	.LBB119:
 1657                             		.loc 1 180 22
 1658                             		.loc 1 180 17 is_stmt 0
 1659 06a0 AC 03                   		mov.L	64[r0], r3
 1660 06a2 47 F3                   		cmp	r15, r3
 1661 06a4 28 44                   		bge	.L30
 1662 06a6 AB 84                   		mov.L	56[r0], r4
 1663 06a8 61 04                   		cmp	#0, r4
 1664 06aa 3A F8 00                		beq	.L31
 1665 06ad AB 0A                   		mov.L	52[r0], r2
 181:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     if (ker_w_start == 0)
 183:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
 185:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 186:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch)
 1666                             		.loc 1 187 34
 1667 06af FE 45 C4                		mov.B	[r5,r12], r4
 1668 06b2 61 22                   		cmp	#2, r2
 1669 06b4 2B 05 38 34 02          		bgt	.L32
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1670                             		.loc 1 182 21 is_stmt 1
 1671                             		.loc 1 187 21
 1672                             		.loc 1 187 76 is_stmt 0
 1673 06b9 FE 45 83                		mov.B	[r5,r8], r3
 1674                             		.loc 1 187 58
 1675 06bc 4B 94                   		add	r9, r4
 1676                             		.loc 1 187 74
 1677 06be 4F 34                   		mul	r3, r4
 1678                             		.loc 1 187 30
 1679 06c0 4B 47                   		add	r4, r7
 1680                             	.LVL184:
 188:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     if ((input_x - in_w) >= 3)
 1681                             		.loc 1 189 21 is_stmt 1
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                         out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr 
 192:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     input_ptr += (input_ch * input_x);
 1682                             		.loc 1 194 21
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1683                             		.loc 1 195 21
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 1684                             		.loc 1 180 17 is_stmt 0
 1685 06c2 AC 0B                   		mov.L	68[r0], r3
 1686 06c4 47 3F                   		cmp	r3, r15
 1687 06c6 2B 22                   		ble	.L30
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1688                             		.loc 1 182 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1689                             		.loc 1 187 21
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1690                             		.loc 1 187 34 is_stmt 0
 1691 06c8 AC 8A                   		mov.L	76[r0], r2
 1692 06ca FE 42 64                		mov.B	[r2,r6], r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1693                             		.loc 1 187 76
 1694 06cd AD 02                   		mov.L	80[r0], r2
 1695 06cf FE 42 B3                		mov.B	[r2,r11], r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1696                             		.loc 1 187 58
 1697 06d2 4B 94                   		add	r9, r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1698                             		.loc 1 187 74
 1699 06d4 4F 34                   		mul	r3, r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1700                             		.loc 1 187 30
 1701 06d6 4B 47                   		add	r4, r7
 1702                             	.LVL185:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1703                             		.loc 1 189 21 is_stmt 1
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1704                             		.loc 1 194 21
 1705                             		.loc 1 195 21
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 1706                             		.loc 1 180 17 is_stmt 0
 1707 06d8 EC 03                   		mov.L	[r0], r3
 1708 06da 47 3F                   		cmp	r3, r15
 1709 06dc 2B 0C                   		ble	.L30
 1710                             	.LVL186:
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1711                             		.loc 1 182 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1712                             		.loc 1 187 21
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1713                             		.loc 1 187 34 is_stmt 0
 1714 06de CC 64                   		mov.B	[r6], r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1715                             		.loc 1 187 76
 1716 06e0 CC B3                   		mov.B	[r11], r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1717                             		.loc 1 187 58
 1718 06e2 4B 94                   		add	r9, r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1719                             		.loc 1 187 74
 1720 06e4 4F 34                   		mul	r3, r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1721                             		.loc 1 187 30
 1722 06e6 4B 47                   		add	r4, r7
 1723                             	.LVL187:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1724                             		.loc 1 189 21 is_stmt 1
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1725                             		.loc 1 194 21
 1726                             		.loc 1 195 21
 1727                             		.balign 8,3,1
 1728                             	.L30:
 1729                             	.LBE119:
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 197:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 198:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
 1730                             		.loc 1 198 17
 1731                             		.loc 1 198 28 is_stmt 0
 1732 06e8 AF 0A                   		mov.L	116[r0], r2
 1733 06ea FE 6A 24                		mov.L	[r10,r2], r4
 1734                             	.LVL188:
 1735                             	.LBB120:
 1736                             	.LBB121:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1737                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1738                             		.loc 2 817 5 is_stmt 0
 1739 06ed AF 83                   		mov.L	120[r0], r3
 1740 06ef FE 6A 32                		mov.L	[r10,r3], r2
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1741                             		.loc 2 816 25
 1742 06f2 66 03                   		mov.L	#0, r3
 1743 06f4 FC 13 43                		max	r4, r3
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1744                             		.loc 2 816 11
 1745 06f7 FD 62 37                		shll	r3, r7
 1746                             	.LVL189:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1747                             		.loc 2 817 5 is_stmt 1
 1748                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1749 06fa FD 03 72                		emula r7, r2, a0
 1750 06fd FD 19 00                	racl #1, a0
 1751 0700 FD 1F 07                	mvfachi #0, a0, r7
 1752                             	
 1753                             	 ; 0 "" 2
 1754                             	.LVL190:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1755                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1756                             		.loc 2 823 22 is_stmt 0
 1757 0703 61 04                   		cmp	#0, r4
 1758 0705 2A 05 38 1D 01          		ble	.L73
 1759 070a 66 04                   		mov.L	#0, r4
 1760                             	.LVL191:
 1761                             		.balign 8,3,1
 1762                             	.L39:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1763                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1764                             		.loc 2 824 8 is_stmt 0
 1765 070c 61 07                   		cmp	#0, r7
 1766 070e 28 05 38 06 01          		blt	.L74
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 1767                             		.loc 2 833 9 is_stmt 1
 1768                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1769 0713 FD 60 47                		shlr r4, r7
 1770 0716 FD 74 27 00             	adc #0, r7
 1771                             	
 1772                             	 ; 0 "" 2
 1773                             	.LVL192:
 1774                             		.balign 8,3,1
 1775                             	.L41:
 1776                             		.loc 2 839 5
 1777                             	.LBE121:
 1778                             	.LBE120:
 199:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff += output_offset;
 1779                             		.loc 1 199 17
 200:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 1780                             		.loc 1 200 17
 199:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff += output_offset;
 1781                             		.loc 1 199 26 is_stmt 0
 1782 071a 06 89 07 04             		add	16[r0], r7
 1783                             	.LVL193:
 1784                             	.LBE117:
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 1785                             		.loc 1 173 38
 1786 071e 62 1A                   		add	#1, r10
 1787                             	.LVL194:
 1788                             	.LBB126:
 1789                             		.loc 1 200 28
 1790 0720 A9 0C                   		mov.L	20[r0], r4
 1791                             	.LVL195:
 1792 0722 FC 13 47                		max	r4, r7
 1793                             	.LVL196:
 201:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 output[out_idx++] = (int8_t)out_buff;
 1794                             		.loc 1 201 17 is_stmt 1
 1795 0725 62 16                   		add	#1, r6
 200:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 1796                             		.loc 1 200 26 is_stmt 0
 1797 0727 A9 82                   		mov.L	24[r0], r2
 1798 0729 FC 17 27                		min	r2, r7
 1799                             	.LVL197:
 1800 072c 62 1B                   		add	#1, r11
 1801 072e 62 1C                   		add	#1, r12
 1802                             		.loc 1 201 37
 1803 0730 FD 20 17                		mov.B	r7, [r1+]
 1804 0733 62 18                   		add	#1, r8
 1805 0735 62 1D                   		add	#1, r13
 1806 0737 62 1E                   		add	#1, r14
 1807                             	.LBE126:
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 1808                             		.loc 1 173 13
 1809 0739 47 A5                   		cmp	r10, r5
 1810 073b 3B 60 FF                		bne	.L42
 1811 073e AE 0F                   		mov.L	100[r0], r7
 1812                             	.LVL198:
 1813 0740 06 89 07 1A             		add	104[r0], r7
 1814                             	.LVL199:
 1815 0744 A8 0B                   		mov.L	4[r0], r3
 1816 0746 43 37                   		sub	r3, r7
 1817                             	.LVL200:
 1818 0748 A6 87                   		mov.L	r7, 104[r0]
 1819                             	.LVL201:
 1820                             		.balign 8,3,2
 1821                             	.L29:
 1822                             	.LBE129:
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 1823                             		.loc 1 97 113 discriminator 6
 1824 074a ED 04 21                		mov.L	132[r0], r4
 1825 074d 62 14                   		add	#1, r4
 1826 074f E7 04 21                		mov.L	r4, 132[r0]
 1827                             	.LVL202:
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 1828                             		.loc 1 97 100 discriminator 6
 1829 0752 ED 05 20                		mov.L	128[r0], r5
 1830 0755 06 89 05 22             		add	136[r0], r5
 1831 0759 E7 05 20                		mov.L	r5, 128[r0]
 1832                             	.LVL203:
 1833 075c AB 0E                   		mov.L	52[r0], r6
 1834 075e ED 07 22                		mov.L	136[r0], r7
 1835 0761 43 76                   		sub	r7, r6
 1836 0763 A3 0E                   		mov.L	r6, 52[r0]
 1837 0765 ED 0A 18                		mov.L	96[r0], r10
 1838                             	.LVL204:
 1839 0768 06 89 0A 29             		add	164[r0], r10
 1840 076c E7 0A 18                		mov.L	r10, 96[r0]
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         {
 1841                             		.loc 1 97 9 discriminator 6
 1842 076f ED 0B 26                		mov.L	152[r0], r11
 1843 0772 47 4B                   		cmp	r4, r11
 1844 0774 3B 25 FA                		bne	.L43
 1845                             	.LVL205:
 1846 0777 03                      		.balign 8,3,2
 1847                             	.L5:
 1848                             	.LBE131:
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
 1849                             		.loc 1 95 93 discriminator 2
 1850 0778 ED 01 33                		mov.L	204[r0], r1
 1851 077b 62 11                   		add	#1, r1
 1852 077d E7 01 33                		mov.L	r1, 204[r0]
 1853                             	.LVL206:
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
 1854                             		.loc 1 95 80 discriminator 2
 1855 0780 ED 02 30                		mov.L	192[r0], r2
 1856 0783 06 89 02 34             		add	208[r0], r2
 1857 0787 E7 02 30                		mov.L	r2, 192[r0]
 1858                             	.LVL207:
 1859 078a ED 03 31                		mov.L	196[r0], r3
 1860 078d ED 04 34                		mov.L	208[r0], r4
 1861 0790 43 43                   		sub	r4, r3
 1862 0792 E7 03 31                		mov.L	r3, 196[r0]
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     {
 1863                             		.loc 1 95 5 discriminator 2
 1864 0795 ED 05 35                		mov.L	212[r0], r5
 1865 0798 47 15                   		cmp	r1, r5
 1866 079a 3B 80 F9                		bne	.L44
 1867                             	.LVL208:
 1868                             		.balign 8,3,1
 1869                             	.L45:
 1870                             	.LBE32:
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             }
 203:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****         }
 204:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     }
 205:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 206:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     /* Return to application */
 207:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     return ARM_MATH_SUCCESS;
 1871                             		.loc 1 207 12
 1872 079d 66 01                   		mov.L	#0, r1
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** }
 1873                             		.loc 1 208 1
 1874 079f 3F 6D 4B                		rtsd	#300, r6-r13
 1875                             	.LVL209:
 1876                             	.L31:
 1877 07a2 AB 0C                   		mov.L	52[r0], r4
 1878 07a4 61 24                   		cmp	#2, r4
 1879 07a6 2B 05 38 81 00          		bgt	.L36
 1880                             	.LVL210:
 1881                             	.LBB133:
 1882                             	.LBB132:
 1883                             	.LBB130:
 1884                             	.LBB127:
 1885                             	.LBB123:
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1886                             		.loc 1 182 21 is_stmt 1
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1887                             		.loc 1 184 25
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1888                             		.loc 1 184 38 is_stmt 0
 1889 07ab CC C2                   		mov.B	[r12], r2
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1890                             		.loc 1 184 69
 1891 07ad CC 83                   		mov.B	[r8], r3
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1892                             		.loc 1 184 51
 1893 07af 4B 92                   		add	r9, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1894                             		.loc 1 187 34
 1895 07b1 FE 45 C4                		mov.B	[r5,r12], r4
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1896                             		.loc 1 184 67
 1897 07b4 4F 32                   		mul	r3, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1898                             		.loc 1 187 76
 1899 07b6 FE 45 83                		mov.B	[r5,r8], r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1900                             		.loc 1 187 58
 1901 07b9 4B 94                   		add	r9, r4
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1902                             		.loc 1 184 34
 1903 07bb 4B 27                   		add	r2, r7
 1904                             	.LVL211:
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1905                             		.loc 1 187 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1906                             		.loc 1 187 74 is_stmt 0
 1907 07bd 4F 34                   		mul	r3, r4
 1908 07bf AA 0B                   		mov.L	36[r0], r3
 1909 07c1 4B C3                   		add	r12, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1910                             		.loc 1 187 30
 1911 07c3 4B 47                   		add	r4, r7
 1912                             	.LVL212:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1913                             		.loc 1 189 21 is_stmt 1
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1914                             		.loc 1 194 21
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 1915                             		.loc 1 195 21
 1916 07c5 AB 04                   		mov.L	48[r0], r4
 1917 07c7 4B 84                   		add	r8, r4
 1918                             	.LVL213:
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 1919                             		.loc 1 180 17 is_stmt 0
 1920 07c9 AC 0A                   		mov.L	68[r0], r2
 1921 07cb 47 2F                   		cmp	r2, r15
 1922 07cd 2A 05 38 19 FF          		ble	.L30
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1923                             		.loc 1 182 21 is_stmt 1
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1924                             		.loc 1 184 25
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1925                             		.loc 1 184 38 is_stmt 0
 1926 07d2 CC 32                   		mov.B	[r3], r2
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1927                             		.loc 1 184 69
 1928 07d4 CC 43                   		mov.B	[r4], r3
 1929                             	.LVL214:
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1930                             		.loc 1 184 51
 1931 07d6 4B 92                   		add	r9, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1932                             		.loc 1 187 34
 1933 07d8 AC 8C                   		mov.L	76[r0], r4
 1934                             	.LVL215:
 1935 07da FE 44 64                		mov.B	[r4,r6], r4
 1936 07dd A0 84                   		mov.L	r4, 8[r0]
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1937                             		.loc 1 184 67
 1938 07df 4F 32                   		mul	r3, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1939                             		.loc 1 187 76
 1940 07e1 AD 04                   		mov.L	80[r0], r4
 1941 07e3 FE 44 B3                		mov.B	[r4,r11], r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1942                             		.loc 1 187 58
 1943 07e6 A8 84                   		mov.L	8[r0], r4
 1944 07e8 4B 94                   		add	r9, r4
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1945                             		.loc 1 184 34
 1946 07ea 4B 27                   		add	r2, r7
 1947                             	.LVL216:
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1948                             		.loc 1 187 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1949                             		.loc 1 187 74 is_stmt 0
 1950 07ec 4F 34                   		mul	r3, r4
 1951 07ee FF 02 56                		sub	r5, r6, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1952                             		.loc 1 187 30
 1953 07f1 4B 47                   		add	r4, r7
 1954                             	.LVL217:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1955                             		.loc 1 189 21 is_stmt 1
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1956                             		.loc 1 194 21
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 1957                             		.loc 1 195 21
 1958 07f3 FF 03 5B                		sub	r5, r11, r3
 1959                             	.LVL218:
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 1960                             		.loc 1 180 17 is_stmt 0
 1961 07f6 EC 04                   		mov.L	[r0], r4
 1962 07f8 47 4F                   		cmp	r4, r15
 1963 07fa 2A 05 38 EC FE          		ble	.L30
 1964                             	.LVL219:
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1965                             		.loc 1 182 21 is_stmt 1
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1966                             		.loc 1 184 25
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1967                             		.loc 1 184 38 is_stmt 0
 1968 07ff CC 24                   		mov.B	[r2], r4
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1969                             		.loc 1 184 69
 1970 0801 CC 32                   		mov.B	[r3], r2
 1971                             	.LVL220:
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1972                             		.loc 1 184 51
 1973 0803 4B 94                   		add	r9, r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1974                             		.loc 1 187 34
 1975 0805 CC 63                   		mov.B	[r6], r3
 1976                             	.LVL221:
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1977                             		.loc 1 184 67
 1978 0807 4F 24                   		mul	r2, r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1979                             		.loc 1 187 76
 1980 0809 CC B2                   		mov.B	[r11], r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1981                             		.loc 1 187 58
 1982 080b 4B 93                   		add	r9, r3
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 1983                             		.loc 1 184 34
 1984 080d 4B 47                   		add	r4, r7
 1985                             	.LVL222:
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1986                             		.loc 1 187 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1987                             		.loc 1 187 74 is_stmt 0
 1988 080f 4F 23                   		mul	r2, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 1989                             		.loc 1 187 30
 1990 0811 4B 37                   		add	r3, r7
 1991                             	.LVL223:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 1992                             		.loc 1 189 21 is_stmt 1
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 1993                             		.loc 1 194 21
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 1994                             		.loc 1 195 21
 1995 0813 38 D5 FE                		bra	.L30
 1996                             	.LVL224:
 1997                             	.L74:
 1998                             	.LBE123:
 1999                             	.LBB124:
 2000                             	.LBB122:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 2001                             		.loc 2 825 9
 2002                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 2003 0816 7E 17                   		neg r7
 2004 0818 FD 60 47                	shlr r4, r7
 2005 081b FD 74 27 00             	adc #0, r7
 2006 081f 7E 17                   	neg r7
 2007                             	
 2008                             	 ; 0 "" 2
 2009                             	.LVL225:
 2010 0821 38 F9 FE                		bra	.L41
 2011                             	.LVL226:
 2012                             	.L73:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 2013                             		.loc 2 823 22 is_stmt 0
 2014 0824 7E 14                   		neg	r4
 2015                             	.LVL227:
 2016 0826 38 E6 FE                		bra	.L39
 2017                             	.LVL228:
 2018                             	.L36:
 2019                             	.LBE122:
 2020                             	.LBE124:
 2021                             	.LBB125:
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2022                             		.loc 1 182 21 is_stmt 1
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2023                             		.loc 1 184 25
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2024                             		.loc 1 184 38 is_stmt 0
 2025 0829 CC C3                   		mov.B	[r12], r3
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2026                             		.loc 1 184 69
 2027 082b CC 82                   		mov.B	[r8], r2
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2028                             		.loc 1 184 51
 2029 082d 4B 93                   		add	r9, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2030                             		.loc 1 187 34
 2031 082f FE 45 C4                		mov.B	[r5,r12], r4
 2032 0832 A1 8C                   		mov.L	r4, 28[r0]
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2033                             		.loc 1 187 76
 2034 0834 FE 45 84                		mov.B	[r5,r8], r4
 2035 0837 A0 8C                   		mov.L	r4, 12[r0]
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2036                             		.loc 1 184 67
 2037 0839 4F 32                   		mul	r3, r2
 2038 083b A0 82                   		mov.L	r2, 8[r0]
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2039                             		.loc 1 191 38
 2040 083d AC 8B                   		mov.L	76[r0], r3
 2041 083f FE 43 D2                		mov.B	[r3,r13], r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2042                             		.loc 1 187 58
 2043 0842 A9 8C                   		mov.L	28[r0], r4
 2044 0844 4B 94                   		add	r9, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2045                             		.loc 1 191 87
 2046 0846 AD 03                   		mov.L	80[r0], r3
 2047 0848 FE 43 E3                		mov.B	[r3,r14], r3
 2048 084b A1 8B                   		mov.L	r3, 28[r0]
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2049                             		.loc 1 184 34
 2050 084d 06 89 07 02             		add	8[r0], r7
 2051                             	.LVL229:
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2052                             		.loc 1 187 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2053                             		.loc 1 187 74 is_stmt 0
 2054 0851 A8 8B                   		mov.L	12[r0], r3
 2055 0853 4F 34                   		mul	r3, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2056                             		.loc 1 191 69
 2057 0855 4B 92                   		add	r9, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2058                             		.loc 1 187 30
 2059 0857 4B 47                   		add	r4, r7
 2060                             	.LVL230:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2061                             		.loc 1 189 21 is_stmt 1
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2062                             		.loc 1 191 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2063                             		.loc 1 191 85 is_stmt 0
 2064 0859 A9 8C                   		mov.L	28[r0], r4
 2065 085b 4F 42                   		mul	r4, r2
 2066 085d AA 0B                   		mov.L	36[r0], r3
 2067 085f 4B C3                   		add	r12, r3
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2068                             		.loc 1 191 34
 2069 0861 4B 27                   		add	r2, r7
 2070                             	.LVL231:
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 2071                             		.loc 1 194 21 is_stmt 1
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 2072                             		.loc 1 195 21
 2073 0863 AB 04                   		mov.L	48[r0], r4
 2074 0865 4B 84                   		add	r8, r4
 2075                             	.LVL232:
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 2076                             		.loc 1 180 17 is_stmt 0
 2077 0867 AC 0A                   		mov.L	68[r0], r2
 2078 0869 47 2F                   		cmp	r2, r15
 2079 086b 2A 05 38 7B FE          		ble	.L30
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2080                             		.loc 1 182 21 is_stmt 1
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2081                             		.loc 1 184 25
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2082                             		.loc 1 184 38 is_stmt 0
 2083 0870 CC 33                   		mov.B	[r3], r3
 2084                             	.LVL233:
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2085                             		.loc 1 184 69
 2086 0872 CC 42                   		mov.B	[r4], r2
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2087                             		.loc 1 184 51
 2088 0874 4B 93                   		add	r9, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2089                             		.loc 1 187 34
 2090 0876 AC 8C                   		mov.L	76[r0], r4
 2091                             	.LVL234:
 2092 0878 FE 44 64                		mov.B	[r4,r6], r4
 2093 087b A1 8C                   		mov.L	r4, 28[r0]
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2094                             		.loc 1 187 76
 2095 087d AD 04                   		mov.L	80[r0], r4
 2096 087f FE 44 B4                		mov.B	[r4,r11], r4
 2097 0882 A0 8C                   		mov.L	r4, 12[r0]
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2098                             		.loc 1 184 67
 2099 0884 4F 32                   		mul	r3, r2
 2100 0886 A0 82                   		mov.L	r2, 8[r0]
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2101                             		.loc 1 191 38
 2102 0888 CC D2                   		mov.B	[r13], r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2103                             		.loc 1 187 58
 2104 088a A9 8C                   		mov.L	28[r0], r4
 2105 088c 4B 94                   		add	r9, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2106                             		.loc 1 191 87
 2107 088e CC E3                   		mov.B	[r14], r3
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2108                             		.loc 1 184 34
 2109 0890 06 89 07 02             		add	8[r0], r7
 2110                             	.LVL235:
 2111 0894 A0 87                   		mov.L	r7, 8[r0]
 2112                             	.LVL236:
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2113                             		.loc 1 187 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2114                             		.loc 1 187 74 is_stmt 0
 2115 0896 A8 8F                   		mov.L	12[r0], r7
 2116                             	.LVL237:
 2117 0898 4F 74                   		mul	r7, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2118                             		.loc 1 191 69
 2119 089a 4B 92                   		add	r9, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2120                             		.loc 1 187 30
 2121 089c A8 87                   		mov.L	8[r0], r7
 2122 089e 4B 47                   		add	r4, r7
 2123                             	.LVL238:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2124                             		.loc 1 189 21 is_stmt 1
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2125                             		.loc 1 191 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2126                             		.loc 1 191 85 is_stmt 0
 2127 08a0 4F 32                   		mul	r3, r2
 2128 08a2 FF 03 56                		sub	r5, r6, r3
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2129                             		.loc 1 191 34
 2130 08a5 4B 27                   		add	r2, r7
 2131                             	.LVL239:
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 2132                             		.loc 1 194 21 is_stmt 1
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 2133                             		.loc 1 195 21
 2134 08a7 FF 04 5B                		sub	r5, r11, r4
 2135                             	.LVL240:
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 2136                             		.loc 1 180 17 is_stmt 0
 2137 08aa EC 02                   		mov.L	[r0], r2
 2138 08ac 47 2F                   		cmp	r2, r15
 2139 08ae 2A 05 38 38 FE          		ble	.L30
 2140                             	.LVL241:
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2141                             		.loc 1 182 21 is_stmt 1
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2142                             		.loc 1 184 25
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2143                             		.loc 1 184 38 is_stmt 0
 2144 08b3 CC 33                   		mov.B	[r3], r3
 2145                             	.LVL242:
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2146                             		.loc 1 184 69
 2147 08b5 CC 42                   		mov.B	[r4], r2
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2148                             		.loc 1 184 51
 2149 08b7 4B 93                   		add	r9, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2150                             		.loc 1 187 34
 2151 08b9 CC 64                   		mov.B	[r6], r4
 2152                             	.LVL243:
 2153 08bb A1 8C                   		mov.L	r4, 28[r0]
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2154                             		.loc 1 187 76
 2155 08bd CC B4                   		mov.B	[r11], r4
 2156 08bf A0 8C                   		mov.L	r4, 12[r0]
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2157                             		.loc 1 184 67
 2158 08c1 4F 32                   		mul	r3, r2
 2159 08c3 A0 82                   		mov.L	r2, 8[r0]
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2160                             		.loc 1 191 38
 2161 08c5 AA 0B                   		mov.L	36[r0], r3
 2162 08c7 FE 43 D2                		mov.B	[r3,r13], r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2163                             		.loc 1 187 58
 2164 08ca A9 8C                   		mov.L	28[r0], r4
 2165 08cc 4B 94                   		add	r9, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2166                             		.loc 1 191 87
 2167 08ce AB 03                   		mov.L	48[r0], r3
 2168 08d0 FE 43 E3                		mov.B	[r3,r14], r3
 2169 08d3 A1 8B                   		mov.L	r3, 28[r0]
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2170                             		.loc 1 184 34
 2171 08d5 06 89 07 02             		add	8[r0], r7
 2172                             	.LVL244:
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2173                             		.loc 1 187 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2174                             		.loc 1 187 74 is_stmt 0
 2175 08d9 A8 8B                   		mov.L	12[r0], r3
 2176 08db 4F 34                   		mul	r3, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2177                             		.loc 1 191 69
 2178 08dd 4B 92                   		add	r9, r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2179                             		.loc 1 187 30
 2180 08df 4B 47                   		add	r4, r7
 2181                             	.LVL245:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2182                             		.loc 1 189 21 is_stmt 1
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2183                             		.loc 1 191 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2184                             		.loc 1 191 85 is_stmt 0
 2185 08e1 A9 8C                   		mov.L	28[r0], r4
 2186 08e3 4F 42                   		mul	r4, r2
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2187                             		.loc 1 191 34
 2188 08e5 4B 27                   		add	r2, r7
 2189                             	.LVL246:
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 2190                             		.loc 1 194 21 is_stmt 1
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 2191                             		.loc 1 195 21
 2192 08e7 38 01 FE                		bra	.L30
 2193                             	.LVL247:
 2194                             	.L32:
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2195                             		.loc 1 182 21
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2196                             		.loc 1 187 21
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2197                             		.loc 1 187 76 is_stmt 0
 2198 08ea FE 45 82                		mov.B	[r5,r8], r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2199                             		.loc 1 187 58
 2200 08ed 4B 94                   		add	r9, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2201                             		.loc 1 191 38
 2202 08ef AC 8B                   		mov.L	76[r0], r3
 2203 08f1 FE 43 D3                		mov.B	[r3,r13], r3
 2204 08f4 A0 83                   		mov.L	r3, 8[r0]
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2205                             		.loc 1 187 74
 2206 08f6 4F 24                   		mul	r2, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2207                             		.loc 1 191 87
 2208 08f8 AD 03                   		mov.L	80[r0], r3
 2209 08fa FE 43 E2                		mov.B	[r3,r14], r2
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2210                             		.loc 1 191 69
 2211 08fd A8 83                   		mov.L	8[r0], r3
 2212 08ff 4B 93                   		add	r9, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2213                             		.loc 1 187 30
 2214 0901 4B 47                   		add	r4, r7
 2215                             	.LVL248:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2216                             		.loc 1 189 21 is_stmt 1
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2217                             		.loc 1 191 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2218                             		.loc 1 191 85 is_stmt 0
 2219 0903 4F 23                   		mul	r2, r3
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2220                             		.loc 1 191 34
 2221 0905 4B 37                   		add	r3, r7
 2222                             	.LVL249:
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 2223                             		.loc 1 194 21 is_stmt 1
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 2224                             		.loc 1 195 21
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 2225                             		.loc 1 180 17 is_stmt 0
 2226 0907 AC 0C                   		mov.L	68[r0], r4
 2227 0909 47 4F                   		cmp	r4, r15
 2228 090b 2A 05 38 DB FD          		ble	.L30
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2229                             		.loc 1 182 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2230                             		.loc 1 187 21
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2231                             		.loc 1 187 34 is_stmt 0
 2232 0910 AC 8A                   		mov.L	76[r0], r2
 2233 0912 FE 42 64                		mov.B	[r2,r6], r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2234                             		.loc 1 187 76
 2235 0915 AD 03                   		mov.L	80[r0], r3
 2236 0917 FE 43 B2                		mov.B	[r3,r11], r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2237                             		.loc 1 187 58
 2238 091a 4B 94                   		add	r9, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2239                             		.loc 1 191 38
 2240 091c CC D3                   		mov.B	[r13], r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2241                             		.loc 1 187 74
 2242 091e 4F 24                   		mul	r2, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2243                             		.loc 1 191 87
 2244 0920 CC E2                   		mov.B	[r14], r2
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2245                             		.loc 1 191 69
 2246 0922 4B 93                   		add	r9, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2247                             		.loc 1 187 30
 2248 0924 4B 47                   		add	r4, r7
 2249                             	.LVL250:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2250                             		.loc 1 189 21 is_stmt 1
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2251                             		.loc 1 191 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2252                             		.loc 1 191 85 is_stmt 0
 2253 0926 4F 23                   		mul	r2, r3
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2254                             		.loc 1 191 34
 2255 0928 4B 37                   		add	r3, r7
 2256                             	.LVL251:
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 2257                             		.loc 1 194 21 is_stmt 1
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 2258                             		.loc 1 195 21
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 {
 2259                             		.loc 1 180 17 is_stmt 0
 2260 092a EC 04                   		mov.L	[r0], r4
 2261 092c 47 4F                   		cmp	r4, r15
 2262 092e 2A 05 38 B8 FD          		ble	.L30
 2263                             	.LVL252:
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2264                             		.loc 1 182 21 is_stmt 1
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2265                             		.loc 1 187 21
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2266                             		.loc 1 187 34 is_stmt 0
 2267 0933 CC 64                   		mov.B	[r6], r4
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2268                             		.loc 1 187 76
 2269 0935 CC B2                   		mov.B	[r11], r2
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2270                             		.loc 1 187 58
 2271 0937 4B 94                   		add	r9, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2272                             		.loc 1 191 38
 2273 0939 AA 0B                   		mov.L	36[r0], r3
 2274 093b FE 43 D3                		mov.B	[r3,r13], r3
 2275 093e A0 83                   		mov.L	r3, 8[r0]
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2276                             		.loc 1 187 74
 2277 0940 4F 24                   		mul	r2, r4
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2278                             		.loc 1 191 87
 2279 0942 AB 03                   		mov.L	48[r0], r3
 2280 0944 FE 43 E2                		mov.B	[r3,r14], r2
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2281                             		.loc 1 191 69
 2282 0947 A8 83                   		mov.L	8[r0], r3
 2283 0949 4B 93                   		add	r9, r3
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c **** 
 2284                             		.loc 1 187 30
 2285 094b 4B 47                   		add	r4, r7
 2286                             	.LVL253:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     {
 2287                             		.loc 1 189 21 is_stmt 1
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2288                             		.loc 1 191 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2289                             		.loc 1 191 85 is_stmt 0
 2290 094d 4F 23                   		mul	r2, r3
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     }
 2291                             		.loc 1 191 34
 2292 094f 4B 37                   		add	r3, r7
 2293                             	.LVL254:
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                     kernel_ptr += (input_ch * 3);
 2294                             		.loc 1 194 21 is_stmt 1
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****                 }
 2295                             		.loc 1 195 21
 2296 0951 38 97 FD                		bra	.L30
 2297                             	.LVL255:
 2298                             	.L64:
 2299 0954 AB 0F                   		mov.L	52[r0], r7
 2300 0956 ED 0A 2F                		mov.L	188[r0], r10
 2301 0959 43 A7                   		sub	r10, r7
 2302 095b A3 87                   		mov.L	r7, 56[r0]
 2303                             	.LVL256:
 2304                             	.LBE125:
 2305                             	.LBE127:
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             {
 2306                             		.loc 1 102 13 discriminator 1
 2307 095d ED 0B 27                		mov.L	156[r0], r11
 2308 0960 61 0B                   		cmp	#0, r11
 2309 0962 2B 05 38 4C F8          		bgt	.L75
 2310                             	.LVL257:
 2311 0967 03                      		.balign 8,3,1
 2312                             	.L52:
  99:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****             int32_t ker_w_start = MAX(0, -in_w);
 2313                             		.loc 1 99 21 is_stmt 0
 2314 0968 66 0A                   		mov.L	#0, r10
 2315 096a 38 C6 FC                		bra	.L7
 2316                             	.LVL258:
 2317                             	.L49:
 2318                             	.LBE130:
 2319                             	.LBE132:
 2320                             	.LBE133:
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     }
 2321                             		.loc 1 92 16
 2322 096d FB 16 FF                		mov.L	#-1, r1
 2323                             	.LVL259:
 2324                             		.loc 1 208 1
 2325 0970 3F 6D 4B                		rtsd	#300, r6-r13
 2326                             	.LVL260:
 2327                             	.L46:
  87:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_3x3_s8.c ****     }
 2328                             		.loc 1 87 16
 2329 0973 FB 16 FD                		mov.L	#-3, r1
 2330                             	.LVL261:
 2331                             		.loc 1 208 1
 2332 0976 3F 6D 4B                		rtsd	#300, r6-r13
 2333                             	.LFE82:
 2385                             	.Letext0:
 2386                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 2387                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 2388                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 2389                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 2390                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 2391                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 2392                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 2393                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 2394                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 2395                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
