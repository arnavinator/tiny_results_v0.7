   1                             		.file	"arm_nn_mat_mult_nt_t_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_nn_mat_mult_nt_t_s8,"ax",@progbits
   5                             		.global	_arm_nn_mat_mult_nt_t_s8
   7                             	_arm_nn_mat_mult_nt_t_s8:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c"
   1:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** /*
   2:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Copyright (C) 2020 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
   4:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
   6:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
  10:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
  12:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  */
  18:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  19:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** /**************************************************************************************************
  20:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * DISCLAIMER
  21:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * applicable laws, including copyright laws. 
  24:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * of this software. 
  32:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * 
  33:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * rmpa instruction is applied for RX devices.
  34:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** ***************************************************************************************************
  36:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  37:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** /* ----------------------------------------------------------------------
  38:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Project:      CMSIS NN Library
  39:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Title:        arm_nn_mat_mult_s8_nt_t_s8
  40:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Description:  Matrix multiplication support function with the right-hand-side (rhs) matrix trans
  41:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
  42:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * $Date:        09. October 2020
  43:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * $Revision:    V.1.0.3
  44:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
  45:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Target Processor:  Cortex-M
  46:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
  47:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * -------------------------------------------------------------------- */
  48:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  49:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #include "arm_nnsupportfunctions.h"
  50:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  51:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** /**
  52:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * @ingroup groupSupport
  53:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  */
  54:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  55:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** /**
  56:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * @addtogroup NNBasicMath
  57:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * @{
  58:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  */
  59:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  60:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** /*
  61:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * s8 matrix multiplication with the right-hand-side matrix transposed
  62:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
  63:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  * Refer header file for details.
  64:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  *
  65:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****  */
  66:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
  67:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const q7_t *rhs,
  68:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const q31_t *bias,
  69:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    q7_t *dst,
  70:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t *dst_multipliers,
  71:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t *dst_shifts,
  72:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t lhs_rows,
  73:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t rhs_rows,
  74:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t rhs_cols,
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t lhs_offset,
  76:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t dst_offset,
  77:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t activation_min,
  78:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                                    const int32_t activation_max)
  79:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** {
  10                             		.loc 1 79 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 72 00 6C FF             		add	#-148, r0
  15                             	.LCFI1:
  80:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  81:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #if defined(ARM_MATH_DSP)
  82:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     const int32_t off0 = rhs_cols - 4;
  83:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  84:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
  85:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
  86:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
  87:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
  88:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  89:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q31_t lhs_offset_contribution0 = 0;
  90:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q31_t lhs_offset_contribution1 = 0;
  91:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  92:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         for (int32_t x = 0; x < rhs_cols; ++x)
  93:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
  94:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution0 += rhs[x];
  95:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += rhs[x + rhs_cols];
  96:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
  97:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  98:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         lhs_offset_contribution0 *= lhs_offset;
  99:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         lhs_offset_contribution1 *= lhs_offset;
 100:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         if (bias)
 101:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 102:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution0 += bias[rhs_rows_idx];
 103:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 104:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 105:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 106:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         int32_t lhs_rows_idx = lhs_rows >> 1;
 107:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 108:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         while (lhs_rows_idx)
 109:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 110:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 111:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 112:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = lhs_offset_contribution0;
 113:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res01 = lhs_offset_contribution1;
 114:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res10 = lhs_offset_contribution0;
 115:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res11 = lhs_offset_contribution1;
 116:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 117:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             int32_t rhs_cols_idx = 0;
 118:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 119:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t val0, val1, val2, val3, val4, val5;
 120:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 121:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 122:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 123:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 124:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16(val1);
 125:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 126:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 127:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 128:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 129:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 130:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 131:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 132:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val3, val2, res00);
 133:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val4);
 134:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val0, val1, res00);
 135:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16_RORn(val4, 8);
 136:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val3, val5, res01);
 137:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val0, val4, res01);
 138:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 139:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res10, res11
 140:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 141:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 142:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 143:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val3, val2, res10);
 144:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val3, val5, res11);
 145:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val0, val1, res10);
 146:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 147:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val0, val4, res11);
 148:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 149:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 150:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16(val1);
 151:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 152:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 153:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 154:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 155:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 156:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 157:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val3, val2, res00);
 158:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val4);
 159:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val0, val1, res00);
 160:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16_RORn(val4, 8);
 161:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val3, val5, res01);
 162:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val0, val4, res01);
 163:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 164:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res10, res11
 165:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 166:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 167:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 168:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val3, val2, res10);
 169:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val3, val5, res11);
 170:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val0, val1, res10);
 171:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 172:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val0, val4, res11);
 173:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 174:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 175:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16(val1);
 176:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 177:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 178:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 179:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 180:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 181:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 182:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val3, val2, res00);
 183:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val4);
 184:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val0, val1, res00);
 185:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16_RORn(val4, 8);
 186:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val3, val5, res01);
 187:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val0, val4, res01);
 188:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 189:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res10, res11
 190:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 191:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 192:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 193:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val3, val2, res10);
 194:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val3, val5, res11);
 195:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val0, val1, res10);
 196:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 197:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val0, val4, res11);
 198:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 199:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 200:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16(val1);
 201:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 202:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 203:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 204:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 205:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 206:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 207:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val3, val2, res00);
 208:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val4);
 209:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val0, val1, res00);
 210:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16_RORn(val4, 8);
 211:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val3, val5, res01);
 212:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val0, val4, res01);
 213:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 214:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res10, res11
 215:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 216:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 217:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 218:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val3, val2, res10);
 219:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val3, val5, res11);
 220:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 = __SMLAD(val0, val1, res10);
 221:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 = __SMLAD(val0, val4, res11);
 222:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 223:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 224:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 225:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 226:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value0 = rhs_ptr[0];
 227:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value1 = rhs_ptr[rhs_cols];
 228:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t lhs_value = lhs_ptr[0];
 229:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 230:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 += lhs_value * rhs_value0;
 231:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 += lhs_value * rhs_value1;
 232:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 233:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 lhs_value = lhs_ptr[rhs_cols];
 234:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 += lhs_value * rhs_value0;
 235:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 += lhs_value * rhs_value1;
 236:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 237:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++rhs_ptr;
 238:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 239:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 240:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 241:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 242:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 243:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 244:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 245:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 246:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 247:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 248:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 249:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 250:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 += dst_offset;
 251:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 += dst_offset;
 252:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 253:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 254:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 255:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 256:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 257:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 258:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MAX(res10, activation_min);
 259:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MIN(res10, activation_max);
 260:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MAX(res11, activation_min);
 261:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MIN(res11, activation_max);
 262:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 263:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 264:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 265:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 266:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res10;
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res11;
 268:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 269:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 270:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr += rhs_cols;
 271:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 272:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_rows_idx--;
 273:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 274:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 275:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         // Left-over rows
 276:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         if (lhs_rows % 2)
 277:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 278:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 279:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 280:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = lhs_offset_contribution0;
 281:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res01 = lhs_offset_contribution1;
 282:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 283:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             int32_t rhs_cols_idx = 0;
 284:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 285:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t val0, val1, val2, val3, val4, val5;
 286:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 287:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 288:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 289:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 290:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 291:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val2);
 293:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16(val1);
 294:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 295:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16_RORn(val2, 8);
 296:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 297:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 298:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 299:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val5, val3, res00);
 300:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val2, val0, res00);
 301:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val5, val4, res01);
 302:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val2, val1, res01);
 303:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 304:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 306:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 307:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 308:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val2);
 309:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16(val1);
 310:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 311:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16_RORn(val2, 8);
 312:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 313:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 314:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val5, val3, res00);
 316:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val2, val0, res00);
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val5, val4, res01);
 318:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val2, val1, res01);
 319:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 320:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 321:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 322:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 323:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 324:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val2);
 325:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16(val1);
 326:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 327:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16_RORn(val2, 8);
 328:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 329:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 330:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 331:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val5, val3, res00);
 332:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val2, val0, res00);
 333:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val5, val4, res01);
 334:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val2, val1, res01);
 335:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 336:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 337:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 338:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 339:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val3 = __SXTB16(val0);
 340:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val5 = __SXTB16(val2);
 341:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val4 = __SXTB16(val1);
 342:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val0 = __SXTB16_RORn(val0, 8);
 343:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val2 = __SXTB16_RORn(val2, 8);
 344:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 val1 = __SXTB16_RORn(val1, 8);
 345:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 346:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 // 4 x MAC res00, res01
 347:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val5, val3, res00);
 348:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = __SMLAD(val2, val0, res00);
 349:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val5, val4, res01);
 350:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 = __SMLAD(val2, val1, res01);
 351:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 352:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 353:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Left-over accumulations
 354:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 355:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 356:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value0 = rhs_ptr[0];
 357:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value1 = rhs_ptr[rhs_cols];
 358:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t lhs_value = lhs_ptr[0];
 359:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 360:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 += lhs_value * rhs_value0;
 361:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 += lhs_value * rhs_value1;
 362:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 363:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++rhs_ptr;
 364:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 365:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 366:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 367:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 368:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 369:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 370:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 371:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 372:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 373:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 374:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 375:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 376:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 377:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 378:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 379:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 380:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 381:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 382:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 383:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 384:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 385:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         rhs += 2 * rhs_cols;
 386:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         dst += 2;
 387:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     }
 388:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 389:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     if (rhs_rows % 2)
 390:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 391:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
 392:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
 393:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 394:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 395:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 396:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 397:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = 0;
 398:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             if (bias)
 399:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 400:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = bias[rhs_rows - 1];
 401:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 402:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 403:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 404:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 405:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t rhs_value = rhs_ptr[0];
 406:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 407:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 408:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 += lhs_value * rhs_value;
 409:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 410:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++rhs_ptr;
 411:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 412:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 413:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 414:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 415:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1
 416:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 417:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 418:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 419:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 420:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 421:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 422:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 423:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 424:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 425:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 426:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 427:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     }
 428:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 429:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #elif defined(RX_DSP_INT8)
 430:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
  16                             		.loc 1 430 5
  17                             	.LBB26:
  18                             		.loc 1 430 10
  19                             	.LVL1:
  20                             	.LBE26:
  79:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  21                             		.loc 1 79 1 is_stmt 0
  22 0006 75 47 B8                		mov.L	#0xb8, r7
  23 0009 4B 07                   		add	r0, r7
  24 000b A4 81                   		mov.L	r1, 72[r0]
  25 000d E5 70 03 10             		mov.L	12[r7], 64[r0]
  26 0011 A5 8A                   		mov.L	r2, 92[r0]
  27 0013 A3 0B                   		mov.L	r3, 52[r0]
  28 0015 A3 8C                   		mov.L	r4, 60[r0]
  29                             	.LBB61:
  30                             		.loc 1 430 49
  31 0017 ED 0A 10                		mov.L	64[r0], r10
  32 001a 60 1A                   		sub	#1, r10
  33 001c E7 0A 11                		mov.L	r10, 68[r0]
  34                             	.LBE61:
  79:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
  35                             		.loc 1 79 1
  36 001f E4 70 1A                		mov.L	[r7], 104[r0]
  37 0022 E5 70 01 1B             		mov.L	4[r7], 108[r0]
  38 0026 E5 70 02 18             		mov.L	8[r7], 96[r0]
  39 002a ED 7D 04                		mov.L	16[r7], r13
  40 002d E5 70 05 0E             		mov.L	20[r7], 56[r0]
  41 0031 E5 70 06 01             		mov.L	24[r7], 4[r0]
  42 0035 ED 78 07                		mov.L	28[r7], r8
  43 0038 ED 79 08                		mov.L	32[r7], r9
  44                             	.LBB62:
  45                             		.loc 1 430 5
  46 003b 61 0A                   		cmp	#0, r10
  47 003d 2A 05 38 46 03          		ble	.L2
  48                             	.LBB27:
 431:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 432:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
 433:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
 434:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 435:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q31_t lhs_offset_contribution0 = 0;
 436:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q31_t lhs_offset_contribution1 = 0;
 437:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 438:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         for (int32_t x = 0; x < rhs_cols; ++x)
 439:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 440:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution0 += rhs[x];
 441:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += rhs[x + rhs_cols];
 442:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 443:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 444:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         lhs_offset_contribution0 *= lhs_offset;
 445:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         lhs_offset_contribution1 *= lhs_offset;
 446:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         if (bias)
 447:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 448:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution0 += bias[rhs_rows_idx];
 449:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 450:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 451:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 452:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         int32_t lhs_rows_idx = lhs_rows >> 1;
  49                             		.loc 1 452 17
  50 0042 AE 07                   		mov.L	96[r0], r7
  51 0044 6A 17                   		shar	#1, r7
  52 0046 A3 07                   		mov.L	r7, 48[r0]
 453:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 454:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         while (lhs_rows_idx)
 455:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 456:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 457:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 458:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = lhs_offset_contribution0;
 459:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res01 = lhs_offset_contribution1;
 460:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res10 = lhs_offset_contribution0;
 461:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res11 = lhs_offset_contribution1;
 462:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 463:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #if defined __CCRX__ || defined __CCRL__
 464:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = __rmpab(res00, rhs_cols, (signed char *)lhs_ptr,(signed char *)rhs_ptr);
 465:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr -= rhs_cols;
 466:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = __rmpab(res01, rhs_cols, (signed char *)lhs_ptr,(signed char *)rhs_ptr);
 467:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             rhs_ptr = rhs;
 468:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = __rmpab(res10, rhs_cols, (signed char *)lhs_ptr,(signed char *)rhs_ptr);
 469:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr -= rhs_cols;
 470:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = __rmpab(res11, rhs_cols, (signed char *)lhs_ptr,(signed char *)rhs_ptr);
 471:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 472:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #else
 473:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             asm inline ("mov.l %1, r1\n"
 474:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 475:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %3, r3\n"
 476:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %0, r4\n"
 477:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "rmpa.b\n"
 478:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r4, %0\n"
 479:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r1, %1\n"
 480:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r2, %2\n"
 481:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "+r" (res00), "+r" (lhs_ptr), "+r" (rhs_ptr)
 482:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "r" (rhs_cols)
 483:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 484:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 485:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // rhs_ptr = rhs + rhs_cols;   // no need to calcurate
 486:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr -= rhs_cols;
 487:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 488:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             asm inline ("mov.l %1, r1\n"
 489:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 490:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %3, r3\n"
 491:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %0, r4\n"
 492:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "rmpa.b\n"
 493:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r4, %0\n"
 494:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r1, %1\n"
 495:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r2, %2\n"
 496:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "+r" (res01), "+r" (lhs_ptr), "+r" (rhs_ptr)
 497:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "r" (rhs_cols)
 498:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 499:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             rhs_ptr = rhs;
 500:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 501:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             asm inline ("mov.l %1, r1\n"
 502:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 503:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %3, r3\n"
 504:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %0, r4\n"
 505:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "rmpa.b\n"
 506:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r4, %0\n"
 507:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r1, %1\n"
 508:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r2, %2\n"
 509:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "+r" (res10), "+r" (lhs_ptr), "+r" (rhs_ptr)
 510:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "r" (rhs_cols)
 511:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 512:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // rhs_ptr = rhs + rhs_cols;  // no need to calculate
 513:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr -= rhs_cols;
 514:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 515:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             asm inline ("mov.l %1, r1\n"
 516:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 517:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %3, r3\n"
 518:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %0, r4\n"
 519:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "rmpa.b\n"
 520:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r4, %0\n"
 521:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r1, %1\n"
 522:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r2, %2\n"
 523:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "+r" (res11), "+r" (lhs_ptr), "+r" (rhs_ptr)
 524:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "r" (rhs_cols)
 525:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 526:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #endif
 527:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 528:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 529:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 530:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 531:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 532:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 533:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 534:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 535:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 536:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 += dst_offset;
 537:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 += dst_offset;
 538:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 539:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 540:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 541:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 542:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 543:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 544:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MAX(res10, activation_min);
 545:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MIN(res10, activation_max);
 546:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MAX(res11, activation_min);
 547:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MIN(res11, activation_max);
 548:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 549:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 550:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 551:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 552:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res10;
 553:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res11;
 554:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 555:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 556:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_rows_idx--;
 557:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 558:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 559:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         // Left-over rows
 560:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         if (lhs_rows % 2)
  53                             		.loc 1 560 13
  54 0048 ED 0A 18                		mov.L	96[r0], r10
  55 004b 64 1A                   		and #1, r10
  56 004d E7 0A 13                		mov.L	r10, 76[r0]
  57 0050 ED 0A 10                		mov.L	64[r0], r10
  58 0053 4F A7                   		mul	r10, r7
  59 0055 E5 00 1A 06             		mov.L	104[r0], 24[r0]
  60 0059 4B 77                   		add	r7, r7
  61 005b E5 00 1B 05             		mov.L	108[r0], 20[r0]
  62 005f EF 21                   		mov.L	r2, r1
  63                             	.LVL2:
  64 0061 4B D1                   		add	r13, r1
  65 0063 4B AA                   		add	r10, r10
  66 0065 E7 0A 0A                		mov.L	r10, 40[r0]
  67 0068 4B 47                   		add	r4, r7
  68 006a A5 0F                   		mov.L	r7, 84[r0]
  69                             	.LBE27:
 430:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
  70                             		.loc 1 430 18
  71 006c 3E 0B 00                		mov.L	#0, 44[r0]
  72 006f 66 37                   		mov.L	#3, r7
  73 0071 4F D7                   		mul	r13, r7
  74 0073 A5 07                   		mov.L	r7, 80[r0]
  75 0075 FC 07 DA                		neg	r13, r10
  76 0078 E7 0A 09                		mov.L	r10, 36[r0]
  77                             	.LBB59:
 449:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
  78                             		.loc 1 449 45
  79 007b 62 43                   		add	#4, r3
  80                             	.LVL3:
  81 007d A6 0B                   		mov.L	r3, 100[r0]
  82 007f 06 89 04 10             		add	64[r0], r4
  83                             	.LVL4:
  84 0083 A5 84                   		mov.L	r4, 88[r0]
  85 0085 EF 8F                   		mov.L	r8, r15
  86 0087 EF 9E                   		mov.L	r9, r14
  87                             	.LVL5:
  88                             		.balign 8,3,2
  89                             	.L3:
  90 0089 FF 07 D1                		sub	r13, r1, r7
  91 008c A1 07                   		mov.L	r7, 16[r0]
  92 008e AB 8F                   		mov.L	60[r0], r7
  93 0090 06 89 07 0B             		add	44[r0], r7
  94 0094 E3 07                   		mov.L	r7, [r0]
  95                             	.LVL6:
  96                             	.LBB28:
 438:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
  97                             		.loc 1 438 9
  98 0096 61 0D                   		cmp	#0, r13
  99 0098 2A 05 38 EB 03          		ble	.L57
 100 009d EF 14                   		mov.L	r1, r4
 101 009f A9 07                   		mov.L	16[r0], r7
 102                             	.LVL7:
 103                             	.LBE28:
 436:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 104                             		.loc 1 436 15
 105 00a1 66 0A                   		mov.L	#0, r10
 435:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q31_t lhs_offset_contribution1 = 0;
 106                             		.loc 1 435 15
 107 00a3 66 05                   		mov.L	#0, r5
 108                             	.LVL8:
 109 00a5 FC 13 00                		.balign 8,3,5
 110                             	.L4:
 111                             	.LBB29:
 440:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += rhs[x + rhs_cols];
 112                             		.loc 1 440 13 is_stmt 1 discriminator 3
 440:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += rhs[x + rhs_cols];
 113                             		.loc 1 440 44 is_stmt 0 discriminator 3
 114 00a8 FD 28 72                		mov.B	[r7+], r2
 115                             	.LVL9:
 441:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 116                             		.loc 1 441 44 discriminator 3
 117 00ab FD 28 43                		mov.B	[r4+], r3
 440:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += rhs[x + rhs_cols];
 118                             		.loc 1 440 38 discriminator 3
 119 00ae 4B 25                   		add	r2, r5
 120                             	.LVL10:
 441:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 121                             		.loc 1 441 13 is_stmt 1 discriminator 3
 441:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 122                             		.loc 1 441 38 is_stmt 0 discriminator 3
 123 00b0 4B 3A                   		add	r3, r10
 124                             	.LVL11:
 438:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 125                             		.loc 1 438 9 discriminator 3
 126 00b2 47 71                   		cmp	r7, r1
 127 00b4 21 F4                   		bne	.L4
 128 00b6 AB 87                   		mov.L	56[r0], r7
 129                             	.LVL12:
 130 00b8 4F 57                   		mul	r5, r7
 131 00ba A1 8F                   		mov.L	r7, 28[r0]
 132 00bc AB 87                   		mov.L	56[r0], r7
 133 00be 4F A7                   		mul	r10, r7
 134 00c0 A2 07                   		mov.L	r7, 32[r0]
 135                             	.LVL13:
 136                             		.balign 8,3,1
 137                             	.L26:
 138                             	.LBE29:
 444:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         lhs_offset_contribution1 *= lhs_offset;
 139                             		.loc 1 444 9 is_stmt 1
 445:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         if (bias)
 140                             		.loc 1 445 9
 446:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 141                             		.loc 1 446 9
 446:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 142                             		.loc 1 446 12 is_stmt 0
 143 00c2 AB 0F                   		mov.L	52[r0], r7
 144 00c4 61 07                   		cmp	#0, r7
 145 00c6 20 1E                   		beq	.L5
 146 00c8 EF 7A                   		mov.L	r7, r10
 448:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 147                             		.loc 1 448 13 is_stmt 1
 448:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 148                             		.loc 1 448 38 is_stmt 0
 149 00ca AA 8F                   		mov.L	44[r0], r7
 150 00cc 6C 27                   		shll	#2, r7
 151 00ce 4B 7A                   		add	r7, r10
 449:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 152                             		.loc 1 449 38
 153 00d0 06 89 07 19             		add	100[r0], r7
 448:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 154                             		.loc 1 448 38
 155 00d4 A9 8B                   		mov.L	28[r0], r3
 156 00d6 06 88 A3                		add	[r10].L, r3
 157 00d9 A1 8B                   		mov.L	r3, 28[r0]
 158                             	.LVL14:
 449:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 159                             		.loc 1 449 13 is_stmt 1
 449:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 160                             		.loc 1 449 38 is_stmt 0
 161 00db ED 0A 08                		mov.L	32[r0], r10
 162 00de 06 88 7A                		add	[r7].L, r10
 163 00e1 E7 0A 08                		mov.L	r10, 32[r0]
 164                             	.LVL15:
 165                             		.balign 8,3,1
 166                             	.L5:
 452:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 167                             		.loc 1 452 9 is_stmt 1
 454:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 168                             		.loc 1 454 9
 454:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 169                             		.loc 1 454 15 is_stmt 0
 170 00e4 AB 07                   		mov.L	48[r0], r7
 171 00e6 61 07                   		cmp	#0, r7
 172 00e8 3A 98 03                		beq	.L36
 173 00eb ED 0A 16                		mov.L	88[r0], r10
 174 00ee 06 89 0A 0B             		add	44[r0], r10
 175 00f2 E7 0A 02                		mov.L	r10, 8[r0]
 176 00f5 A0 8F                   		mov.L	r7, 12[r0]
 432:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
 177                             		.loc 1 432 21
 178 00f7 AC 87                   		mov.L	72[r0], r7
 179 00f9 38 C7 00                		bra	.L17
 180                             	.LVL16:
 181                             	.L37:
 182                             	.LBB30:
 183                             	.LBB31:
 184                             	.LBB32:
 185                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
 186                             		.loc 2 823 22
 187 00fc 66 04                   		mov.L	#0, r4
 188                             	.LVL17:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 189                             		.loc 2 824 5 is_stmt 1
 190                             		.loc 2 824 8 is_stmt 0
 191 00fe 61 09                   		cmp	#0, r9
 192 0100 28 05 38 41 01          		blt	.L58
 193                             	.L8:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 194                             		.loc 2 833 9 is_stmt 1
 195                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 196 0105 FD 60 49                		shlr r4, r9
 197 0108 FD 74 29 00             	adc #0, r9
 198                             	
 199                             	 ; 0 "" 2
 200                             	.LVL18:
 201                             		.balign 8,3,1
 202                             	.L9:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 203                             		.loc 2 839 5
 204                             	.LBE32:
 205                             	.LBE31:
 529:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 206                             		.loc 1 529 13
 529:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 207                             		.loc 1 529 21 is_stmt 0
 208 010c A9 0E                   		mov.L	20[r0], r6
 209 010e A8 6D                   		mov.L	4[r6], r5
 210 0110 A9 86                   		mov.L	24[r0], r6
 211 0112 A8 6B                   		mov.L	4[r6], r3
 212                             	.LVL19:
 213                             	.LBB34:
 214                             	.LBB35:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 215                             		.loc 2 816 5 is_stmt 1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 216                             		.loc 2 816 25 is_stmt 0
 217 0114 66 06                   		mov.L	#0, r6
 218 0116 FC 13 56                		max	r5, r6
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 219                             		.loc 2 816 11
 220 0119 FD 62 6C                		shll	r6, r12
 221                             	.LVL20:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 222                             		.loc 2 817 5 is_stmt 1
 223                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 224 011c FD 03 C3                		emula r12, r3, a0
 225 011f FD 19 00                	racl #1, a0
 226 0122 FD 1F 0C                	mvfachi #0, a0, r12
 227                             	
 228                             	 ; 0 "" 2
 229                             	.LVL21:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 230                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 231                             		.loc 2 823 22 is_stmt 0
 232 0125 61 05                   		cmp	#0, r5
 233 0127 2A 05 38 52 01          		ble	.L59
 234 012c 66 05                   		mov.L	#0, r5
 235                             	.LVL22:
 236                             		.balign 8,3,1
 237                             	.L10:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 238                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 239                             		.loc 2 824 8 is_stmt 0
 240 012e 61 0C                   		cmp	#0, r12
 241 0130 28 05 38 3B 01          		blt	.L60
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 242                             		.loc 2 833 9 is_stmt 1
 243                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 244 0135 FD 60 5C                		shlr r5, r12
 245 0138 FD 74 2C 00             	adc #0, r12
 246                             	
 247                             	 ; 0 "" 2
 248                             	.LVL23:
 249                             		.balign 8,3,2
 250                             	.L12:
 251                             		.loc 2 839 5
 252                             	.LBE35:
 253                             	.LBE34:
 530:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 254                             		.loc 1 530 13
 255                             	.LBB37:
 256                             	.LBB38:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 257                             		.loc 2 816 5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 258                             		.loc 2 816 11 is_stmt 0
 259 013c FD 62 1B                		shll	r1, r11
 260                             	.LVL24:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 261                             		.loc 2 817 5 is_stmt 1
 262                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 263 013f FD 03 B2                		emula r11, r2, a0
 264 0142 FD 19 00                	racl #1, a0
 265 0145 FD 1F 0B                	mvfachi #0, a0, r11
 266                             	
 267                             	 ; 0 "" 2
 268                             	.LVL25:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 269                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 270                             		.loc 2 824 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 271                             		.loc 2 824 8 is_stmt 0
 272 0148 61 0B                   		cmp	#0, r11
 273 014a 28 05 38 13 01          		blt	.L61
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 274                             		.loc 2 833 9 is_stmt 1
 275                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 276 014f FD 60 4B                		shlr r4, r11
 277 0152 FD 74 2B 00             	adc #0, r11
 278                             	
 279                             	 ; 0 "" 2
 280                             	.LVL26:
 281 0156 EF 00                   		.balign 8,3,2
 282                             	.L14:
 283                             		.loc 2 839 5
 284                             	.LBE38:
 285                             	.LBE37:
 531:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 286                             		.loc 1 531 13
 287                             	.LBB40:
 288                             	.LBB41:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 289                             		.loc 2 816 5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 290                             		.loc 2 816 11 is_stmt 0
 291 0158 FD 62 6A                		shll	r6, r10
 292                             	.LVL27:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 293                             		.loc 2 817 5 is_stmt 1
 294                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 295 015b FD 03 A3                		emula r10, r3, a0
 296 015e FD 19 00                	racl #1, a0
 297 0161 FD 1F 0A                	mvfachi #0, a0, r10
 298                             	
 299                             	 ; 0 "" 2
 300                             	.LVL28:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 301                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 302                             		.loc 2 824 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 303                             		.loc 2 824 8 is_stmt 0
 304 0164 61 0A                   		cmp	#0, r10
 305 0166 28 05 38 E9 00          		blt	.L62
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 306                             		.loc 2 833 9 is_stmt 1
 307                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 308 016b FD 60 5A                		shlr r5, r10
 309 016e FD 74 2A 00             	adc #0, r10
 310                             	
 311                             	 ; 0 "" 2
 312                             	.LVL29:
 313                             		.balign 8,3,1
 314                             	.L16:
 315                             		.loc 2 839 5
 316                             	.LBE41:
 317                             	.LBE40:
 534:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 318                             		.loc 1 534 13
 534:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 319                             		.loc 1 534 19 is_stmt 0
 320 0172 06 89 09 01             		add	4[r0], r9
 321                             	.LVL30:
 535:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 += dst_offset;
 322                             		.loc 1 535 13 is_stmt 1
 535:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 += dst_offset;
 323                             		.loc 1 535 19 is_stmt 0
 324 0176 06 89 0C 01             		add	4[r0], r12
 325                             	.LVL31:
 536:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 += dst_offset;
 326                             		.loc 1 536 13 is_stmt 1
 536:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 += dst_offset;
 327                             		.loc 1 536 19 is_stmt 0
 328 017a 06 89 0B 01             		add	4[r0], r11
 329                             	.LVL32:
 537:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 330                             		.loc 1 537 13 is_stmt 1
 537:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 331                             		.loc 1 537 19 is_stmt 0
 332 017e 06 89 0A 01             		add	4[r0], r10
 333                             	.LVL33:
 540:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 334                             		.loc 1 540 13 is_stmt 1
 540:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 335                             		.loc 1 540 19 is_stmt 0
 336 0182 FC 13 F9                		max	r15, r9
 337                             	.LVL34:
 541:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 338                             		.loc 1 541 13 is_stmt 1
 542:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 339                             		.loc 1 542 13
 542:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 340                             		.loc 1 542 19 is_stmt 0
 341 0185 FC 13 FC                		max	r15, r12
 342                             	.LVL35:
 543:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MAX(res10, activation_min);
 343                             		.loc 1 543 13 is_stmt 1
 544:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MIN(res10, activation_max);
 344                             		.loc 1 544 13
 544:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MIN(res10, activation_max);
 345                             		.loc 1 544 19 is_stmt 0
 346 0188 FC 13 FB                		max	r15, r11
 347                             	.LVL36:
 545:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MAX(res11, activation_min);
 348                             		.loc 1 545 13 is_stmt 1
 546:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MIN(res11, activation_max);
 349                             		.loc 1 546 13
 546:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MIN(res11, activation_max);
 350                             		.loc 1 546 19 is_stmt 0
 351 018b FC 13 FA                		max	r15, r10
 352                             	.LVL37:
 547:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 353                             		.loc 1 547 13 is_stmt 1
 549:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 354                             		.loc 1 549 13
 541:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 355                             		.loc 1 541 19 is_stmt 0
 356 018e FC 17 E9                		min	r14, r9
 357                             	.LVL38:
 543:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MAX(res10, activation_min);
 358                             		.loc 1 543 19
 359 0191 FC 17 EC                		min	r14, r12
 360                             	.LVL39:
 549:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 361                             		.loc 1 549 26
 362 0194 EC 03                   		mov.L	[r0], r3
 363 0196 C3 39                   		mov.B	r9, [r3]
 550:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 364                             		.loc 1 550 13 is_stmt 1
 545:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MAX(res11, activation_min);
 365                             		.loc 1 545 19 is_stmt 0
 366 0198 FC 17 EB                		min	r14, r11
 367                             	.LVL40:
 550:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 368                             		.loc 1 550 26
 369 019b C7 3C 01                		mov.B	r12, 1[r3]
 551:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res10;
 370                             		.loc 1 551 13 is_stmt 1
 371                             	.LVL41:
 552:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res11;
 372                             		.loc 1 552 13
 547:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 373                             		.loc 1 547 19 is_stmt 0
 374 019e FC 17 EA                		min	r14, r10
 375                             	.LVL42:
 552:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res11;
 376                             		.loc 1 552 26
 377 01a1 A8 84                   		mov.L	8[r0], r4
 378                             	.LVL43:
 379 01a3 C3 4B                   		mov.B	r11, [r4]
 553:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 380                             		.loc 1 553 13 is_stmt 1
 556:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 381                             		.loc 1 556 25 is_stmt 0
 382 01a5 A8 8D                   		mov.L	12[r0], r5
 383                             	.LVL44:
 384 01a7 60 15                   		sub	#1, r5
 385 01a9 A0 8D                   		mov.L	r5, 12[r0]
 386                             	.LVL45:
 553:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 387                             		.loc 1 553 26
 388 01ab C7 4A 01                		mov.B	r10, 1[r4]
 554:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 389                             		.loc 1 554 13 is_stmt 1
 390 01ae 06 89 03 0A             		add	40[r0], r3
 391                             	.LVL46:
 392 01b2 E3 03                   		mov.L	r3, [r0]
 393                             	.LVL47:
 556:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 394                             		.loc 1 556 13
 395 01b4 06 89 04 0A             		add	40[r0], r4
 396 01b8 A0 84                   		mov.L	r4, 8[r0]
 397                             	.LBE30:
 454:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 398                             		.loc 1 454 15 is_stmt 0
 399 01ba 61 05                   		cmp	#0, r5
 400 01bc 3A C4 00                		beq	.L63
 401                             	.LVL48:
 402 01bf 03                      		.balign 8,3,1
 403                             	.L17:
 404                             	.LBB47:
 456:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 405                             		.loc 1 456 13 is_stmt 1
 458:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res01 = lhs_offset_contribution1;
 406                             		.loc 1 458 13
 459:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res10 = lhs_offset_contribution0;
 407                             		.loc 1 459 13
 460:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res11 = lhs_offset_contribution1;
 408                             		.loc 1 460 13
 461:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 409                             		.loc 1 461 13
 473:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 410                             		.loc 1 473 13
 411 01c0 ED 09 07                		mov.L	28[r0], r9
 412 01c3 ED 0A 04                		mov.L	16[r0], r10
 488:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 413                             		.loc 1 488 13 is_stmt 0
 414 01c6 ED 0C 08                		mov.L	32[r0], r12
 473:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 415                             		.loc 1 473 13
 416                             	 ; 473 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c" 1
 417 01c9 EF 71                   		mov.l r7, r1
 418 01cb EF A2                   	mov.l r10, r2
 419 01cd EF D3                   	mov.l r13, r3
 420 01cf EF 94                   	mov.l r9, r4
 421 01d1 7F 8C                   	rmpa.b
 422 01d3 EF 49                   	mov.l r4, r9
 423 01d5 EF 17                   	mov.l r1, r7
 424 01d7 EF 2A                   	mov.l r2, r10
 425                             	
 426                             	 ; 0 "" 2
 427                             	.LVL49:
 486:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 428                             		.loc 1 486 13 is_stmt 1
 486:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 429                             		.loc 1 486 21 is_stmt 0
 430 01d9 06 89 07 09             		add	36[r0], r7
 431                             	.LVL50:
 488:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 432                             		.loc 1 488 13 is_stmt 1
 501:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 433                             		.loc 1 501 13 is_stmt 0
 434 01dd ED 0B 07                		mov.L	28[r0], r11
 488:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 435                             		.loc 1 488 13
 436                             	 ; 488 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c" 1
 437 01e0 EF 71                   		mov.l r7, r1
 438 01e2 EF A2                   	mov.l r10, r2
 439 01e4 EF D3                   	mov.l r13, r3
 440 01e6 EF C4                   	mov.l r12, r4
 441 01e8 7F 8C                   	rmpa.b
 442 01ea EF 4C                   	mov.l r4, r12
 443 01ec EF 17                   	mov.l r1, r7
 444 01ee EF 2A                   	mov.l r2, r10
 445                             	
 446                             	 ; 0 "" 2
 447                             	.LVL51:
 499:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 448                             		.loc 1 499 13 is_stmt 1
 501:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 449                             		.loc 1 501 13
 450 01f0 ED 08 04                		mov.L	16[r0], r8
 451                             	 ; 501 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c" 1
 452 01f3 EF 71                   		mov.l r7, r1
 453 01f5 EF 82                   	mov.l r8, r2
 454 01f7 EF D3                   	mov.l r13, r3
 455 01f9 EF B4                   	mov.l r11, r4
 456 01fb 7F 8C                   	rmpa.b
 457 01fd EF 4B                   	mov.l r4, r11
 458 01ff EF 17                   	mov.l r1, r7
 459 0201 EF 28                   	mov.l r2, r8
 460                             	
 461                             	 ; 0 "" 2
 462                             	.LVL52:
 513:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 463                             		.loc 1 513 13
 513:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 464                             		.loc 1 513 21 is_stmt 0
 465 0203 06 89 07 09             		add	36[r0], r7
 466                             	.LVL53:
 515:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 467                             		.loc 1 515 13 is_stmt 1
 468 0207 ED 0A 08                		mov.L	32[r0], r10
 469                             	 ; 515 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c" 1
 470 020a EF 71                   		mov.l r7, r1
 471 020c EF 82                   	mov.l r8, r2
 472 020e EF D3                   	mov.l r13, r3
 473 0210 EF A4                   	mov.l r10, r4
 474 0212 7F 8C                   	rmpa.b
 475 0214 EF 4A                   	mov.l r4, r10
 476 0216 EF 17                   	mov.l r1, r7
 477 0218 EF 28                   	mov.l r2, r8
 478                             	
 479                             	 ; 0 "" 2
 480                             	.LVL54:
 528:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 481                             		.loc 1 528 21 is_stmt 0
 482 021a A9 0B                   		mov.L	20[r0], r3
 483 021c EC 34                   		mov.L	[r3], r4
 484 021e A9 85                   		mov.L	24[r0], r5
 485 0220 EC 52                   		mov.L	[r5], r2
 486                             	.LVL55:
 528:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 487                             		.loc 1 528 13 is_stmt 1
 488                             	.LBB43:
 489                             	.LBB33:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 490                             		.loc 2 816 5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 491                             		.loc 2 816 25 is_stmt 0
 492 0222 66 01                   		mov.L	#0, r1
 493 0224 FC 13 41                		max	r4, r1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 494                             		.loc 2 816 11
 495 0227 FD 62 19                		shll	r1, r9
 496                             	.LVL56:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 497                             		.loc 2 817 5 is_stmt 1
 498                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 499 022a FD 03 92                		emula r9, r2, a0
 500 022d FD 19 00                	racl #1, a0
 501 0230 FD 1F 09                	mvfachi #0, a0, r9
 502                             	
 503                             	 ; 0 "" 2
 504                             	.LVL57:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 505                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 506                             		.loc 2 823 22 is_stmt 0
 507 0233 61 04                   		cmp	#0, r4
 508 0235 2B 05 38 C5 FE          		bgt	.L37
 509 023a 7E 14                   		neg	r4
 510                             	.LVL58:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 511                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 512                             		.loc 2 824 8 is_stmt 0
 513 023c 61 09                   		cmp	#0, r9
 514 023e 29 05 38 C5 FE          		bge	.L8
 515                             	.L58:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 516                             		.loc 2 825 9 is_stmt 1
 517                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 518 0243 7E 19                   		neg r9
 519 0245 FD 60 49                	shlr r4, r9
 520 0248 FD 74 29 00             	adc #0, r9
 521 024c 7E 19                   	neg r9
 522                             	
 523                             	 ; 0 "" 2
 524                             	.LVL59:
 525 024e 38 BE FE                		bra	.L9
 526                             	.LVL60:
 527                             	.L62:
 528                             	.LBE33:
 529                             	.LBE43:
 530                             	.LBB44:
 531                             	.LBB42:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 532                             		.loc 2 825 9
 533                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 534 0251 7E 1A                   		neg r10
 535 0253 FD 60 5A                	shlr r5, r10
 536 0256 FD 74 2A 00             	adc #0, r10
 537 025a 7E 1A                   	neg r10
 538                             	
 539                             	 ; 0 "" 2
 540                             	.LVL61:
 541 025c 38 16 FF                		bra	.L16
 542                             	.LVL62:
 543                             	.L61:
 544                             	.LBE42:
 545                             	.LBE44:
 546                             	.LBB45:
 547                             	.LBB39:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 548                             		.loc 2 825 9
 549                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 550 025f 7E 1B                   		neg r11
 551 0261 FD 60 4B                	shlr r4, r11
 552 0264 FD 74 2B 00             	adc #0, r11
 553 0268 7E 1B                   	neg r11
 554                             	
 555                             	 ; 0 "" 2
 556                             	.LVL63:
 557 026a 38 EE FE                		bra	.L14
 558                             	.LVL64:
 559                             	.L60:
 560                             	.LBE39:
 561                             	.LBE45:
 562                             	.LBB46:
 563                             	.LBB36:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 564                             		.loc 2 825 9
 565                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 566 026d 7E 1C                   		neg r12
 567 026f FD 60 5C                	shlr r5, r12
 568 0272 FD 74 2C 00             	adc #0, r12
 569 0276 7E 1C                   	neg r12
 570                             	
 571                             	 ; 0 "" 2
 572                             	.LVL65:
 573 0278 38 C4 FE                		bra	.L12
 574                             	.LVL66:
 575                             	.L59:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 576                             		.loc 2 823 22 is_stmt 0
 577 027b 7E 15                   		neg	r5
 578                             	.LVL67:
 579 027d 38 B1 FE                		bra	.L10
 580                             	.LVL68:
 581                             	.L63:
 582 0280 ED 0A 15                		mov.L	84[r0], r10
 583                             	.LVL69:
 584 0283 06 89 0A 0B             		add	44[r0], r10
 585 0287 E3 0A                   		mov.L	r10, [r0]
 586                             	.LVL70:
 587                             		.balign 8,3,1
 588                             	.L6:
 589                             	.LBE36:
 590                             	.LBE46:
 591                             	.LBE47:
 592                             		.loc 1 560 9 is_stmt 1
 593                             		.loc 1 560 12 is_stmt 0
 594 0289 ED 0A 13                		mov.L	76[r0], r10
 595 028c 61 0A                   		cmp	#0, r10
 596 028e 3A B0 00                		beq	.L18
 597                             	.LBB48:
 561:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 562:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 598                             		.loc 1 562 13 is_stmt 1
 599                             	.LVL71:
 563:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 564:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = lhs_offset_contribution0;
 600                             		.loc 1 564 13
 565:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res01 = lhs_offset_contribution1;
 601                             		.loc 1 565 13
 566:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 567:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #if defined __CCRX__ || defined __CCRL__
 568:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = __rmpab(res00, rhs_cols, (signed char *)lhs_ptr,(signed char *)rhs_ptr);
 569:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr -= rhs_cols;
 570:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = __rmpab(res01, rhs_cols, (signed char *)lhs_ptr,(signed char *)rhs_ptr);
 571:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 572:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #else
 573:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             asm inline ("mov.l %1, r1\n"
 602                             		.loc 1 573 13
 603 0291 ED 0B 07                		mov.L	28[r0], r11
 604 0294 ED 0A 04                		mov.L	16[r0], r10
 574:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 575:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %3, r3\n"
 576:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %0, r4\n"
 577:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "rmpa.b\n"
 578:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r4, %0\n"
 579:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r1, %1\n"
 580:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r2, %2\n"
 581:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "+r" (res00), "+r" (lhs_ptr), "+r" (rhs_ptr)
 582:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "r" (rhs_cols)
 583:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 584:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // rhs_ptr = rhs_ptr + rhs_cols; // no need to calcurate
 585:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr -= rhs_cols;
 586:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 587:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             asm inline ("mov.l %1, r1\n"
 605                             		.loc 1 587 13 is_stmt 0
 606 0297 ED 0C 08                		mov.L	32[r0], r12
 573:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 607                             		.loc 1 573 13
 608                             	 ; 573 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c" 1
 609 029a EF 71                   		mov.l r7, r1
 610 029c EF A2                   	mov.l r10, r2
 611 029e EF D3                   	mov.l r13, r3
 612 02a0 EF B4                   	mov.l r11, r4
 613 02a2 7F 8C                   	rmpa.b
 614 02a4 EF 4B                   	mov.l r4, r11
 615 02a6 EF 17                   	mov.l r1, r7
 616 02a8 EF 2A                   	mov.l r2, r10
 617                             	
 618                             	 ; 0 "" 2
 619                             	.LVL72:
 585:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 620                             		.loc 1 585 13 is_stmt 1
 585:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 621                             		.loc 1 585 21 is_stmt 0
 622 02aa 06 89 07 09             		add	36[r0], r7
 623                             	.LVL73:
 624                             		.loc 1 587 13 is_stmt 1
 625                             	 ; 587 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c" 1
 626 02ae EF 71                   		mov.l r7, r1
 627 02b0 EF A2                   	mov.l r10, r2
 628 02b2 EF D3                   	mov.l r13, r3
 629 02b4 EF C4                   	mov.l r12, r4
 630 02b6 7F 8C                   	rmpa.b
 631 02b8 EF 4C                   	mov.l r4, r12
 632 02ba EF 17                   	mov.l r1, r7
 633 02bc EF 2A                   	mov.l r2, r10
 634                             	
 635                             	 ; 0 "" 2
 636                             	.LVL74:
 588:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %2, r2\n"
 589:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %3, r3\n"
 590:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l %0, r4\n"
 591:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "rmpa.b\n"
 592:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r4, %0\n"
 593:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r1, %1\n"
 594:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         "mov.l r2, %2\n"
 595:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "+r" (res01), "+r" (lhs_ptr), "+r" (rhs_ptr)
 596:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         : "r" (rhs_cols)
 597:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                         :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 598:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #endif
 599:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 600:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 637                             		.loc 1 600 13
 638                             		.loc 1 600 21 is_stmt 0
 639 02be ED 0A 05                		mov.L	20[r0], r10
 640 02c1 EC A7                   		mov.L	[r10], r7
 641                             	.LVL75:
 642                             	.LBB49:
 643                             	.LBB50:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 644                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 645                             		.loc 2 817 5 is_stmt 0
 646 02c3 A9 83                   		mov.L	24[r0], r3
 647 02c5 EC 3A                   		mov.L	[r3], r10
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 648                             		.loc 2 816 25
 649 02c7 66 05                   		mov.L	#0, r5
 650 02c9 FC 13 75                		max	r7, r5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 651                             		.loc 2 816 11
 652 02cc FD 62 5B                		shll	r5, r11
 653                             	.LVL76:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 654                             		.loc 2 817 5 is_stmt 1
 655                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 656 02cf FD 03 BA                		emula r11, r10, a0
 657 02d2 FD 19 00                	racl #1, a0
 658 02d5 FD 1F 0B                	mvfachi #0, a0, r11
 659                             	
 660                             	 ; 0 "" 2
 661                             	.LVL77:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 662                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 663                             		.loc 2 823 22 is_stmt 0
 664 02d8 61 07                   		cmp	#0, r7
 665 02da 2A 05 38 9F 01          		ble	.L64
 666 02df 66 07                   		mov.L	#0, r7
 667                             	.LVL78:
 668                             		.balign 8,3,1
 669                             	.L19:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 670                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 671                             		.loc 2 824 8 is_stmt 0
 672 02e1 61 0B                   		cmp	#0, r11
 673 02e3 28 05 38 88 01          		blt	.L65
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 674                             		.loc 2 833 9 is_stmt 1
 675                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 676 02e8 FD 60 7B                		shlr r7, r11
 677 02eb FD 74 2B 00             	adc #0, r11
 678                             	
 679                             	 ; 0 "" 2
 680                             	.LVL79:
 681 02ef 03                      		.balign 8,3,1
 682                             	.L21:
 683                             		.loc 2 839 5
 684                             	.LBE50:
 685                             	.LBE49:
 601:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 686                             		.loc 1 601 13
 687                             		.loc 1 601 21 is_stmt 0
 688 02f0 ED 0A 05                		mov.L	20[r0], r10
 689 02f3 ED A7 01                		mov.L	4[r10], r7
 690                             	.LVL80:
 691                             	.LBB52:
 692                             	.LBB53:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 693                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 694                             		.loc 2 817 5 is_stmt 0
 695 02f6 A9 83                   		mov.L	24[r0], r3
 696 02f8 ED 3A 01                		mov.L	4[r3], r10
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 697                             		.loc 2 816 25
 698 02fb 66 05                   		mov.L	#0, r5
 699 02fd FC 13 75                		max	r7, r5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 700                             		.loc 2 816 11
 701 0300 FD 62 5C                		shll	r5, r12
 702                             	.LVL81:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 703                             		.loc 2 817 5 is_stmt 1
 704                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 705 0303 FD 03 CA                		emula r12, r10, a0
 706 0306 FD 19 00                	racl #1, a0
 707 0309 FD 1F 0C                	mvfachi #0, a0, r12
 708                             	
 709                             	 ; 0 "" 2
 710                             	.LVL82:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 711                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 712                             		.loc 2 823 22 is_stmt 0
 713 030c 61 07                   		cmp	#0, r7
 714 030e 2A 05 38 58 01          		ble	.L66
 715 0313 66 07                   		mov.L	#0, r7
 716                             	.LVL83:
 717                             		.balign 8,3,1
 718                             	.L22:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 719                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 720                             		.loc 2 824 8 is_stmt 0
 721 0315 61 0C                   		cmp	#0, r12
 722 0317 28 05 38 41 01          		blt	.L67
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 723                             		.loc 2 833 9 is_stmt 1
 724                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 725 031c FD 60 7C                		shlr r7, r12
 726 031f FD 74 2C 00             	adc #0, r12
 727                             	
 728                             	 ; 0 "" 2
 729                             	.LVL84:
 730                             		.balign 8,3,1
 731                             	.L24:
 732                             		.loc 2 839 5
 733                             	.LBE53:
 734                             	.LBE52:
 602:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 603:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 604:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 735                             		.loc 1 604 13
 736                             		.loc 1 604 19 is_stmt 0
 737 0323 06 89 0B 01             		add	4[r0], r11
 738                             	.LVL85:
 605:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 739                             		.loc 1 605 13 is_stmt 1
 740                             		.loc 1 605 19 is_stmt 0
 741 0327 06 89 0C 01             		add	4[r0], r12
 742                             	.LVL86:
 606:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 607:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 608:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 743                             		.loc 1 608 13 is_stmt 1
 744                             		.loc 1 608 19 is_stmt 0
 745 032b FC 13 FB                		max	r15, r11
 746                             	.LVL87:
 609:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 747                             		.loc 1 609 13 is_stmt 1
 610:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 748                             		.loc 1 610 13
 749                             		.loc 1 610 19 is_stmt 0
 750 032e FC 13 FC                		max	r15, r12
 751                             	.LVL88:
 611:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 752                             		.loc 1 611 13 is_stmt 1
 612:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 613:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 753                             		.loc 1 613 13
 609:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 754                             		.loc 1 609 19 is_stmt 0
 755 0331 FC 17 EB                		min	r14, r11
 756                             	.LVL89:
 611:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 757                             		.loc 1 611 19
 758 0334 FC 17 EC                		min	r14, r12
 759                             	.LVL90:
 760                             		.loc 1 613 26
 761 0337 EC 07                   		mov.L	[r0], r7
 762                             	.LVL91:
 763 0339 C3 7B                   		mov.B	r11, [r7]
 614:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 764                             		.loc 1 614 13 is_stmt 1
 765                             		.loc 1 614 26 is_stmt 0
 766 033b C7 7C 01                		mov.B	r12, 1[r7]
 767                             	.LVL92:
 768                             		.balign 8,3,1
 769                             	.L18:
 770                             	.LBE48:
 615:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 616:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 617:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         rhs += 2 * rhs_cols;
 771                             		.loc 1 617 9 is_stmt 1 discriminator 2
 618:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         dst += 2;
 772                             		.loc 1 618 9 discriminator 2
 773                             	.LBE59:
 430:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 774                             		.loc 1 430 81 is_stmt 0 discriminator 2
 775 033e ED 0A 0B                		mov.L	44[r0], r10
 776 0341 62 2A                   		add	#2, r10
 777 0343 E7 0A 0B                		mov.L	r10, 44[r0]
 778                             	.LVL93:
 779 0346 A9 87                   		mov.L	24[r0], r7
 780 0348 62 87                   		add	#8, r7
 781 034a A1 87                   		mov.L	r7, 24[r0]
 782 034c ED 0A 05                		mov.L	20[r0], r10
 783                             	.LVL94:
 784 034f 62 8A                   		add	#8, r10
 785 0351 E7 0A 05                		mov.L	r10, 20[r0]
 786                             	.LVL95:
 787 0354 AD 01                   		mov.L	80[r0], r1
 788 0356 06 89 01 04             		add	16[r0], r1
 789                             	.LVL96:
 430:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 790                             		.loc 1 430 5 discriminator 2
 791 035a AA 8F                   		mov.L	44[r0], r7
 792 035c ED 0A 11                		mov.L	68[r0], r10
 793 035f 47 A7                   		cmp	r10, r7
 794 0361 28 05 38 26 FD          		blt	.L3
 795 0366 EF F8                   		mov.L	r15, r8
 796 0368 EF E9                   		mov.L	r14, r9
 797 036a AC 07                   		mov.L	64[r0], r7
 798 036c 60 27                   		sub	#2, r7
 799 036e 68 17                   		shlr	#1, r7
 800 0370 62 17                   		add	#1, r7
 801 0372 FF 3A 7D                		mul	r7, r13, r10
 802 0375 4B 77                   		add	r7, r7
 803 0377 4B AA                   		add	r10, r10
 804 0379 06 89 07 0F             		add	60[r0], r7
 805 037d A3 8F                   		mov.L	r7, 60[r0]
 806                             	.LVL97:
 807 037f AD 8F                   		mov.L	92[r0], r7
 808 0381 4B A7                   		add	r10, r7
 809 0383 A5 8F                   		mov.L	r7, 92[r0]
 810                             	.LVL98:
 811                             		.balign 8,3,1
 812                             	.L2:
 813                             	.LBE62:
 619:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     }
 620:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 621:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     if (rhs_rows % 2)
 814                             		.loc 1 621 5 is_stmt 1
 815                             		.loc 1 621 8 is_stmt 0
 816 0385 ED 0A 10                		mov.L	64[r0], r10
 817 0388 7C 0A                   		btst	#0, r10
 818 038a 3A CB 00                		beq	.L47
 819                             	.LVL99:
 820                             	.LBB63:
 821                             	.LBB64:
 622:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 623:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
 624:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
 625:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 626:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 822                             		.loc 1 626 9
 823 038d AE 07                   		mov.L	96[r0], r7
 824 038f 61 07                   		cmp	#0, r7
 825 0391 2A 05 38 C2 00          		ble	.L47
 826                             	.LBB65:
 627:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 628:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 629:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = 0;
 630:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             if (bias)
 631:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 632:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = bias[rhs_rows - 1];
 827                             		.loc 1 632 29
 828 0396 EF AB                   		mov.L	r10, r11
 829 0398 70 BB FF FF FF 3F       		add	#0x3fffffff, r11
 830                             	.LBE65:
 626:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 831                             		.loc 1 626 22
 832 039e 66 02                   		mov.L	#0, r2
 833                             	.LBB75:
 834                             		.loc 1 632 29
 835 03a0 6C 2B                   		shll	#2, r11
 836 03a2 ED 0C 0D                		mov.L	52[r0], r12
 837 03a5 4B BC                   		add	r11, r12
 633:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 634:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 635:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (int32_t rhs_cols_idx = rhs_cols; rhs_cols_idx != 0; rhs_cols_idx--)
 636:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 637:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t rhs_value = rhs_ptr[0];
 638:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 639:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 640:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 += lhs_value * rhs_value;
 641:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 642:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++rhs_ptr;
 643:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 644:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 645:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 646:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 647:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1
 838                             		.loc 1 647 61
 839 03a7 AE 81                   		mov.L	104[r0], r1
 840 03a9 4B B1                   		add	r11, r1
 841                             		.loc 1 647 87
 842 03ab 06 89 0B 1B             		add	108[r0], r11
 843 03af E3 0C                   		mov.L	r12, [r0]
 844 03b1 AC 85                   		mov.L	72[r0], r5
 845 03b3 ED 0C 0D                		mov.L	52[r0], r12
 846 03b6 AB 8E                   		mov.L	60[r0], r6
 847 03b8 ED 0F 0E                		mov.L	56[r0], r15
 848                             	.LVL100:
 628:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = 0;
 849                             		.loc 1 628 13 is_stmt 1
 629:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             if (bias)
 850                             		.loc 1 629 13
 630:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 851                             		.loc 1 630 13
 630:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 852                             		.loc 1 630 16 is_stmt 0
 853 03bb 61 0C                   		cmp	#0, r12
 854 03bd 20 6B                   		beq	.L42
 855                             	.LVL101:
 856 03bf 03                      		.balign 8,3,1
 857                             	.L70:
 632:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 858                             		.loc 1 632 17 is_stmt 1
 632:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 859                             		.loc 1 632 23 is_stmt 0
 860 03c0 EC 03                   		mov.L	[r0], r3
 861 03c2 EC 3A                   		mov.L	[r3], r10
 862                             	.LVL102:
 863                             	.LBB66:
 635:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 864                             		.loc 1 635 13
 865 03c4 61 0D                   		cmp	#0, r13
 866 03c6 20 68                   		beq	.L43
 867                             	.LVL103:
 868                             		.balign 8,3,1
 869                             	.L71:
 870 03c8 AD 8C                   		mov.L	92[r0], r4
 871 03ca FF 2E D5                		add	r13, r5, r14
 872                             	.LVL104:
 873 03cd FC 13 00                		.balign 8,3,5
 874                             	.L32:
 875                             	.LBB67:
 637:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 876                             		.loc 1 637 17 is_stmt 1 discriminator 3
 638:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 877                             		.loc 1 638 17 discriminator 3
 640:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 878                             		.loc 1 640 17 discriminator 3
 638:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 879                             		.loc 1 638 42 is_stmt 0 discriminator 3
 880 03d0 FD 28 57                		mov.B	[r5+], r7
 881                             	.LVL105:
 637:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 882                             		.loc 1 637 23 discriminator 3
 883 03d3 FD 28 43                		mov.B	[r4+], r3
 884                             	.LVL106:
 638:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 885                             		.loc 1 638 23 discriminator 3
 886 03d6 4B F7                   		add	r15, r7
 887                             	.LVL107:
 640:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 888                             		.loc 1 640 36 discriminator 3
 889 03d8 4F 37                   		mul	r3, r7
 890                             	.LVL108:
 640:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 891                             		.loc 1 640 23 discriminator 3
 892 03da 4B 7A                   		add	r7, r10
 893                             	.LVL109:
 642:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 894                             		.loc 1 642 17 is_stmt 1 discriminator 3
 643:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 895                             		.loc 1 643 17 discriminator 3
 896                             	.LBE67:
 635:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 897                             		.loc 1 635 13 is_stmt 0 discriminator 3
 898 03dc 47 E5                   		cmp	r14, r5
 899 03de 21 F2                   		bne	.L32
 900                             	.LVL110:
 901                             		.balign 8,3,1
 902                             	.L31:
 903                             	.LBE66:
 904                             		.loc 1 647 13 is_stmt 1 discriminator 2
 905                             		.loc 1 647 21 is_stmt 0 discriminator 2
 906 03e0 EC B7                   		mov.L	[r11], r7
 907                             	.LVL111:
 908                             	.LBB68:
 909                             	.LBB69:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 910                             		.loc 2 816 5 is_stmt 1 discriminator 2
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 911                             		.loc 2 817 5 is_stmt 0 discriminator 2
 912 03e2 EC 14                   		mov.L	[r1], r4
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 913                             		.loc 2 816 25 discriminator 2
 914 03e4 66 05                   		mov.L	#0, r5
 915                             	.LVL112:
 916 03e6 FC 13 75                		max	r7, r5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 917                             		.loc 2 816 11 discriminator 2
 918 03e9 FD 62 5A                		shll	r5, r10
 919                             	.LVL113:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 920                             		.loc 2 817 5 is_stmt 1 discriminator 2
 921                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 922 03ec FD 03 A4                		emula r10, r4, a0
 923 03ef FD 19 00                	racl #1, a0
 924 03f2 FD 1F 0A                	mvfachi #0, a0, r10
 925                             	
 926                             	 ; 0 "" 2
 927                             	.LVL114:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 928                             		.loc 2 823 5 discriminator 2
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 929                             		.loc 2 823 22 is_stmt 0 discriminator 2
 930 03f5 61 07                   		cmp	#0, r7
 931 03f7 2A 05 38 95 00          		ble	.L68
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 932                             		.loc 2 823 22
 933 03fc 66 07                   		mov.L	#0, r7
 934                             	.LVL115:
 935                             		.balign 8,3,1
 936                             	.L33:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 937                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 938                             		.loc 2 824 8 is_stmt 0
 939 03fe 61 0A                   		cmp	#0, r10
 940 0400 29 32                   		blt	.L69
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 941                             		.loc 2 833 9 is_stmt 1
 942                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 943 0402 FD 60 7A                		shlr r7, r10
 944 0405 FD 74 2A 00             	adc #0, r10
 945                             	
 946                             	 ; 0 "" 2
 947                             	.LVL116:
 948                             		.loc 2 839 5
 949                             	.LBE69:
 950                             	.LBE68:
 648:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 649:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 650:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 951                             		.loc 1 650 13
 952                             		.loc 1 650 19 is_stmt 0
 953 0409 06 89 0A 01             		add	4[r0], r10
 954                             	.LVL117:
 651:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 652:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 653:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 955                             		.loc 1 653 13 is_stmt 1
 956                             	.LBE75:
 626:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 957                             		.loc 1 626 65 is_stmt 0
 958 040d 62 12                   		add	#1, r2
 959                             	.LVL118:
 960                             	.LBB76:
 961                             		.loc 1 653 19
 962 040f FC 13 8A                		max	r8, r10
 963                             	.LVL119:
 654:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 964                             		.loc 1 654 13 is_stmt 1
 655:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 656:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 965                             		.loc 1 656 13
 654:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 966                             		.loc 1 654 19 is_stmt 0
 967 0412 FC 17 9A                		min	r9, r10
 968                             	.LVL120:
 969                             		.loc 1 656 26
 970 0415 C3 6A                   		mov.B	r10, [r6]
 657:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 971                             		.loc 1 657 13 is_stmt 1
 972                             		.loc 1 657 21 is_stmt 0
 973 0417 06 89 06 10             		add	64[r0], r6
 974                             	.LVL121:
 975                             	.LBE76:
 626:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 976                             		.loc 1 626 9
 977 041b ED 0A 18                		mov.L	96[r0], r10
 978                             	.LVL122:
 979 041e 47 2A                   		cmp	r2, r10
 980 0420 20 35                   		beq	.L47
 981                             	.LVL123:
 982                             		.balign 8,3,1
 983                             	.L35:
 984                             	.LBE64:
 985                             	.LBE63:
 986                             	.LBB82:
 430:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 987                             		.loc 1 430 18
 988 0422 EF E5                   		mov.L	r14, r5
 989                             	.LVL124:
 990                             	.LBE82:
 991                             	.LBB83:
 992                             	.LBB80:
 993                             	.LBB77:
 628:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = 0;
 994                             		.loc 1 628 13 is_stmt 1
 629:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             if (bias)
 995                             		.loc 1 629 13
 630:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 996                             		.loc 1 630 13
 630:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 997                             		.loc 1 630 16 is_stmt 0
 998 0424 61 0C                   		cmp	#0, r12
 999 0426 21 9A                   		bne	.L70
 1000                             	.LVL125:
 1001                             		.balign 8,3,1
 1002                             	.L42:
 629:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             if (bias)
 1003                             		.loc 1 629 19
 1004 0428 66 0A                   		mov.L	#0, r10
 1005                             	.LVL126:
 1006                             	.LBB72:
 635:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 1007                             		.loc 1 635 13
 1008 042a 61 0D                   		cmp	#0, r13
 1009 042c 21 9C                   		bne	.L71
 1010                             	.LVL127:
 1011                             		.balign 8,3,1
 1012                             	.L43:
 1013 042e EF 5E                   		mov.L	r5, r14
 1014 0430 2E B0                   		bra	.L31
 1015                             	.LVL128:
 1016                             	.L69:
 1017                             	.LBE72:
 1018                             	.LBB73:
 1019                             	.LBB70:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1020                             		.loc 2 825 9 is_stmt 1
 1021                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1022 0432 7E 1A                   		neg r10
 1023 0434 FD 60 7A                	shlr r7, r10
 1024 0437 FD 74 2A 00             	adc #0, r10
 1025 043b 7E 1A                   	neg r10
 1026                             	
 1027                             	 ; 0 "" 2
 1028                             	.LVL129:
 1029                             		.loc 2 839 5
 1030                             	.LBE70:
 1031                             	.LBE73:
 650:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 1032                             		.loc 1 650 13
 650:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 1033                             		.loc 1 650 19 is_stmt 0
 1034 043d 06 89 0A 01             		add	4[r0], r10
 1035                             	.LVL130:
 653:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 1036                             		.loc 1 653 13 is_stmt 1
 1037                             	.LBE77:
 626:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 1038                             		.loc 1 626 65 is_stmt 0
 1039 0441 62 12                   		add	#1, r2
 1040                             	.LVL131:
 1041                             	.LBB78:
 653:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 1042                             		.loc 1 653 19
 1043 0443 FC 13 8A                		max	r8, r10
 1044                             	.LVL132:
 654:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 1045                             		.loc 1 654 13 is_stmt 1
 656:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 1046                             		.loc 1 656 13
 654:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 1047                             		.loc 1 654 19 is_stmt 0
 1048 0446 FC 17 9A                		min	r9, r10
 1049                             	.LVL133:
 656:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 1050                             		.loc 1 656 26
 1051 0449 C3 6A                   		mov.B	r10, [r6]
 1052                             		.loc 1 657 13 is_stmt 1
 1053                             		.loc 1 657 21 is_stmt 0
 1054 044b 06 89 06 10             		add	64[r0], r6
 1055                             	.LVL134:
 1056                             	.LBE78:
 626:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 1057                             		.loc 1 626 9
 1058 044f AE 07                   		mov.L	96[r0], r7
 1059                             	.LVL135:
 1060 0451 47 72                   		cmp	r7, r2
 1061 0453 21 CF                   		bne	.L35
 1062                             	.LVL136:
 1063                             		.balign 8,3,1
 1064                             	.L47:
 1065                             	.LBE80:
 1066                             	.LBE83:
 658:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 659:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     }
 660:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 661:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #else
 662:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 663:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 664:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
 665:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
 666:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 667:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q31_t lhs_offset_contribution0 = 0;
 668:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q31_t lhs_offset_contribution1 = 0;
 669:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 670:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         for (int32_t x = 0; x < rhs_cols; ++x)
 671:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 672:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution0 += rhs[x];
 673:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += rhs[x + rhs_cols];
 674:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 675:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 676:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         lhs_offset_contribution0 *= lhs_offset;
 677:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         lhs_offset_contribution1 *= lhs_offset;
 678:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         if (bias)
 679:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 680:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution0 += bias[rhs_rows_idx];
 681:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 682:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 683:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 684:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         int32_t lhs_rows_idx = lhs_rows >> 1;
 685:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 686:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         while (lhs_rows_idx)
 687:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 688:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 689:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 690:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = lhs_offset_contribution0;
 691:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res01 = lhs_offset_contribution1;
 692:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res10 = lhs_offset_contribution0;
 693:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res11 = lhs_offset_contribution1;
 694:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 695:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (int32_t rhs_cols_idx = rhs_cols; rhs_cols_idx != 0; rhs_cols_idx--)
 696:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 697:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value0 = rhs_ptr[0];
 698:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value1 = rhs_ptr[rhs_cols];
 699:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t lhs_value = lhs_ptr[0];
 700:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 701:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 += lhs_value * rhs_value0;
 702:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 += lhs_value * rhs_value1;
 703:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 704:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 lhs_value = lhs_ptr[rhs_cols];
 705:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res10 += lhs_value * rhs_value0;
 706:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res11 += lhs_value * rhs_value1;
 707:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 708:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++rhs_ptr;
 709:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 710:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 711:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 712:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 713:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 714:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 715:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 716:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 717:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 718:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 719:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 720:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 721:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 += dst_offset;
 722:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 += dst_offset;
 723:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 724:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 725:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 726:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 727:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 728:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 729:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MAX(res10, activation_min);
 730:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res10 = MIN(res10, activation_max);
 731:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MAX(res11, activation_min);
 732:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res11 = MIN(res11, activation_max);
 733:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 734:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 735:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 736:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 737:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res10;
 738:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res11;
 739:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 740:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 741:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_ptr += rhs_cols;
 742:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 743:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             lhs_rows_idx--;
 744:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 745:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 746:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         // Left-over rows
 747:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         if (lhs_rows % 2)
 748:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 749:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 750:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 751:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = lhs_offset_contribution0;
 752:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res01 = lhs_offset_contribution1;
 753:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 754:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (int32_t rhs_cols_idx = rhs_cols; rhs_cols_idx != 0; rhs_cols_idx--)
 755:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 756:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value0 = rhs_ptr[0];
 757:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t rhs_value1 = rhs_ptr[rhs_cols];
 758:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q7_t lhs_value = lhs_ptr[0];
 759:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 760:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 += lhs_value * rhs_value0;
 761:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res01 += lhs_value * rhs_value1;
 762:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 763:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++rhs_ptr;
 764:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 765:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 766:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 767:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 768:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx
 769:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows
 770:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 771:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 772:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 773:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 += dst_offset;
 774:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 775:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 776:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 777:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 778:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MAX(res01, activation_min);
 779:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res01 = MIN(res01, activation_max);
 780:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 781:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 782:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[1] = (q7_t)res01;
 783:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 784:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 785:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         rhs += 2 * rhs_cols;
 786:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         dst += 2;
 787:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     }
 788:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 789:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     if (rhs_rows % 2)
 790:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     {
 791:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
 792:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
 793:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 794:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 795:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 796:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             const q7_t *rhs_ptr = &rhs[0];
 797:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             q31_t res00 = 0;
 798:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             if (bias)
 799:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 800:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 = bias[rhs_rows - 1];
 801:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 802:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 803:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             for (int32_t rhs_cols_idx = rhs_cols; rhs_cols_idx != 0; rhs_cols_idx--)
 804:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             {
 805:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t rhs_value = rhs_ptr[0];
 806:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 807:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 808:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 res00 += lhs_value * rhs_value;
 809:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 810:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++rhs_ptr;
 811:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****                 ++lhs_ptr;
 812:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             }
 813:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 814:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Quantize down
 815:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1
 816:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 817:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Add offset
 818:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 += dst_offset;
 819:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 820:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             // Clamp the result
 821:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MAX(res00, activation_min);
 822:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             res00 = MIN(res00, activation_max);
 823:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** 
 824:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr[0] = (q7_t)res00;
 825:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****             dst_ptr += rhs_rows;
 826:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         }
 827:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     }
 828:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** #endif
 829:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****     return ARM_MATH_SUCCESS;
 830:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c **** }
 1067                             		.loc 1 830 1
 1068 0455 66 01                   		mov.L	#0, r1
 1069 0457 3F 6D 2D                		rtsd	#180, r6-r13
 1070                             	.LVL137:
 1071                             	.L67:
 1072                             	.LBB84:
 1073                             	.LBB60:
 1074                             	.LBB57:
 1075                             	.LBB55:
 1076                             	.LBB54:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1077                             		.loc 2 825 9 is_stmt 1
 1078                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1079 045a 7E 1C                   		neg r12
 1080 045c FD 60 7C                	shlr r7, r12
 1081 045f FD 74 2C 00             	adc #0, r12
 1082 0463 7E 1C                   	neg r12
 1083                             	
 1084                             	 ; 0 "" 2
 1085                             	.LVL138:
 1086 0465 38 BE FE                		bra	.L24
 1087                             	.LVL139:
 1088                             	.L66:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1089                             		.loc 2 823 22 is_stmt 0
 1090 0468 7E 17                   		neg	r7
 1091                             	.LVL140:
 1092 046a 38 AB FE                		bra	.L22
 1093                             	.LVL141:
 1094                             	.L65:
 1095                             	.LBE54:
 1096                             	.LBE55:
 1097                             	.LBB56:
 1098                             	.LBB51:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1099                             		.loc 2 825 9 is_stmt 1
 1100                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1101 046d 7E 1B                   		neg r11
 1102 046f FD 60 7B                	shlr r7, r11
 1103 0472 FD 74 2B 00             	adc #0, r11
 1104 0476 7E 1B                   	neg r11
 1105                             	
 1106                             	 ; 0 "" 2
 1107                             	.LVL142:
 1108 0478 38 78 FE                		bra	.L21
 1109                             	.LVL143:
 1110                             	.L64:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1111                             		.loc 2 823 22 is_stmt 0
 1112 047b 7E 17                   		neg	r7
 1113                             	.LVL144:
 1114 047d 38 64 FE                		bra	.L19
 1115                             	.LVL145:
 1116                             	.L36:
 1117                             	.LBE51:
 1118                             	.LBE56:
 1119                             	.LBE57:
 432:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         q7_t *dst_ptr = &dst[0];
 1120                             		.loc 1 432 21
 1121 0480 AC 87                   		mov.L	72[r0], r7
 1122 0482 38 07 FE                		bra	.L6
 1123                             	.LVL146:
 1124                             	.L57:
 1125                             	.LBB58:
 438:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_mat_mult_nt_t_s8.c ****         {
 1126                             		.loc 1 438 9
 1127 0485 3E 08 00                		mov.L	#0, 32[r0]
 1128 0488 3E 07 00                		mov.L	#0, 28[r0]
 1129 048b 38 37 FC                		bra	.L26
 1130                             	.LVL147:
 1131                             	.L68:
 1132                             	.LBE58:
 1133                             	.LBE60:
 1134                             	.LBE84:
 1135                             	.LBB85:
 1136                             	.LBB81:
 1137                             	.LBB79:
 1138                             	.LBB74:
 1139                             	.LBB71:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1140                             		.loc 2 823 22
 1141 048e 7E 17                   		neg	r7
 1142                             	.LVL148:
 1143 0490 38 6E FF                		bra	.L33
 1144                             	.LBE71:
 1145                             	.LBE74:
 1146                             	.LBE79:
 1147                             	.LBE81:
 1148                             	.LBE85:
 1149                             	.LFE82:
 1201                             	.Letext0:
 1202                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 1203                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 1204                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 1205                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 1206                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 1207                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 1208                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 1209                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 1210                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
