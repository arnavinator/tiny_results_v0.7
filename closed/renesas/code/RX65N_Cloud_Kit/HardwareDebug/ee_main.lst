   1                             		.file	"ee_main.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.ee_serial_callback,"ax",@progbits
   5                             		.global	_ee_serial_callback
   7                             	_ee_serial_callback:
   8                             	.LFB3:
   9                             		.file 1 "../src/EEMBC/monitor/ee_main.c"
   1:../src/EEMBC/monitor/ee_main.c **** /**
   2:../src/EEMBC/monitor/ee_main.c ****  * Copyright (C) EEMBC(R). All Rights Reserved
   3:../src/EEMBC/monitor/ee_main.c ****  *
   4:../src/EEMBC/monitor/ee_main.c ****  * All EEMBC Benchmark Software are products of EEMBC and are provided under the
   5:../src/EEMBC/monitor/ee_main.c ****  * terms of the EEMBC Benchmark License Agreements. The EEMBC Benchmark Software
   6:../src/EEMBC/monitor/ee_main.c ****  * are proprietary intellectual properties of EEMBC and its Members and is
   7:../src/EEMBC/monitor/ee_main.c ****  * protected under all applicable laws, including all applicable copyright laws.
   8:../src/EEMBC/monitor/ee_main.c ****  *
   9:../src/EEMBC/monitor/ee_main.c ****  * If you received this EEMBC Benchmark Software without having a currently
  10:../src/EEMBC/monitor/ee_main.c ****  * effective EEMBC Benchmark License Agreement, you must discontinue use.
  11:../src/EEMBC/monitor/ee_main.c ****  */
  12:../src/EEMBC/monitor/ee_main.c **** 
  13:../src/EEMBC/monitor/ee_main.c **** #include "monitor/ee_main.h"
  14:../src/EEMBC/monitor/ee_main.c **** 
  15:../src/EEMBC/monitor/ee_main.c **** #if EE_CFG_SELFHOSTED != 1
  16:../src/EEMBC/monitor/ee_main.c **** 
  17:../src/EEMBC/monitor/ee_main.c **** // Command buffer (incoming commands from host)
  18:../src/EEMBC/monitor/ee_main.c **** char volatile g_cmd_buf[EE_CMD_SIZE + 1];
  19:../src/EEMBC/monitor/ee_main.c **** size_t volatile g_cmd_pos = 0u;
  20:../src/EEMBC/monitor/ee_main.c **** /**
  21:../src/EEMBC/monitor/ee_main.c ****  * Since the serial port ISR may be connected before the loop is ready, this
  22:../src/EEMBC/monitor/ee_main.c ****  * flag turns off the parser until the main routine is ready.
  23:../src/EEMBC/monitor/ee_main.c ****  */
  24:../src/EEMBC/monitor/ee_main.c **** bool g_state_parser_enabled = false;
  25:../src/EEMBC/monitor/ee_main.c **** 
  26:../src/EEMBC/monitor/ee_main.c **** /**
  27:../src/EEMBC/monitor/ee_main.c ****  * This function assembles a command string from the UART. It should be called
  28:../src/EEMBC/monitor/ee_main.c ****  * from the UART ISR for each new character received. When the parser sees the
  29:../src/EEMBC/monitor/ee_main.c ****  * termination character, the user-defined th_command_ready() command is called.
  30:../src/EEMBC/monitor/ee_main.c ****  * It is up to the application to then dispatch this command outside the ISR
  31:../src/EEMBC/monitor/ee_main.c ****  * as soon as possible by calling ee_serial_command_parser_callback(), below.
  32:../src/EEMBC/monitor/ee_main.c ****  */
  33:../src/EEMBC/monitor/ee_main.c **** void
  34:../src/EEMBC/monitor/ee_main.c **** ee_serial_callback(char c)
  35:../src/EEMBC/monitor/ee_main.c **** {
  10                             		.loc 1 35 1
  11                             	.LVL0:
  36:../src/EEMBC/monitor/ee_main.c ****     if (c == EE_CMD_TERMINATOR)
  12                             		.loc 1 36 5
  13                             		.loc 1 36 8 is_stmt 0
  14 0000 5B 15                   		movu.B	r1, r5
  15 0002 75 55 25                		cmp	#37, r5
  16 0005 20 27                   		beq	.L11
  37:../src/EEMBC/monitor/ee_main.c ****     {
  38:../src/EEMBC/monitor/ee_main.c ****         g_cmd_buf[g_cmd_pos] = (char)0;
  39:../src/EEMBC/monitor/ee_main.c ****         th_command_ready(g_cmd_buf);
  40:../src/EEMBC/monitor/ee_main.c ****         g_cmd_pos = 0;
  41:../src/EEMBC/monitor/ee_main.c ****     }
  42:../src/EEMBC/monitor/ee_main.c ****     else
  43:../src/EEMBC/monitor/ee_main.c ****     {
  44:../src/EEMBC/monitor/ee_main.c ****         g_cmd_buf[g_cmd_pos] = c;
  17                             		.loc 1 44 9 is_stmt 1
  18                             		.loc 1 44 18 is_stmt 0
  19 0007 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
  20 000d EC 54                   		mov.L	[r5], r4
  21                             		.loc 1 44 30
  22 000f FB 32 00 00 00 00       		mov.L	#.LANCHOR1, r3
  23 0015 FE 04 31                		mov.B	r1, [r4,r3]
  45:../src/EEMBC/monitor/ee_main.c ****         g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
  24                             		.loc 1 45 9 is_stmt 1
  25                             		.loc 1 45 31 is_stmt 0
  26 0018 EC 54                   		mov.L	[r5], r4
  27                             		.loc 1 45 60
  28 001a 75 54 4F                		cmp	#0x4f, r4
  29 001d 24 09                   		bgtu	.L5
  30                             		.loc 1 45 72 discriminator 1
  31 001f EC 54                   		mov.L	[r5], r4
  32                             		.loc 1 45 60 discriminator 1
  33 0021 62 14                   		add	#1, r4
  34                             		.loc 1 45 19 discriminator 1
  35 0023 E3 54                   		mov.L	r4, [r5]
  36 0025 02                      		rts
  37                             	.L5:
  38                             		.loc 1 45 60
  39 0026 75 44 50                		mov.L	#0x50, r4
  40                             		.loc 1 45 19
  41 0029 E3 54                   		mov.L	r4, [r5]
  42 002b 02                      		rts
  43                             	.L11:
  35:../src/EEMBC/monitor/ee_main.c ****     if (c == EE_CMD_TERMINATOR)
  44                             		.loc 1 35 1
  45 002c 6E 7A                   		pushm	r7-r10
  46                             	.LCFI0:
  38:../src/EEMBC/monitor/ee_main.c ****         th_command_ready(g_cmd_buf);
  47                             		.loc 1 38 9 is_stmt 1
  38:../src/EEMBC/monitor/ee_main.c ****         th_command_ready(g_cmd_buf);
  48                             		.loc 1 38 18 is_stmt 0
  49 002e FB 72 00 00 00 00       		mov.L	#.LANCHOR0, r7
  38:../src/EEMBC/monitor/ee_main.c ****         th_command_ready(g_cmd_buf);
  50                             		.loc 1 38 30
  51 0034 FB 52 00 00 00 00       		mov.L	#.LANCHOR1, r5
  38:../src/EEMBC/monitor/ee_main.c ****         th_command_ready(g_cmd_buf);
  52                             		.loc 1 38 18
  53 003a EC 74                   		mov.L	[r7], r4
  39:../src/EEMBC/monitor/ee_main.c ****         g_cmd_pos = 0;
  54                             		.loc 1 39 9
  55 003c EF 51                   		mov.L	r5, r1
  56                             	.LVL1:
  38:../src/EEMBC/monitor/ee_main.c ****         th_command_ready(g_cmd_buf);
  57                             		.loc 1 38 30
  58 003e 66 0A                   		mov	#0, r10
  59 0040 FE 04 5A                		mov.B	r10, [r4,r5]
  39:../src/EEMBC/monitor/ee_main.c ****         g_cmd_pos = 0;
  60                             		.loc 1 39 9 is_stmt 1
  61 0043 05 00 00 00             		bsr	_th_command_ready
  62                             	.LVL2:
  40:../src/EEMBC/monitor/ee_main.c ****     }
  63                             		.loc 1 40 9
  40:../src/EEMBC/monitor/ee_main.c ****     }
  64                             		.loc 1 40 19 is_stmt 0
  65 0047 F8 76 00                		mov.L	#0, [r7]
  46:../src/EEMBC/monitor/ee_main.c ****     }
  47:../src/EEMBC/monitor/ee_main.c **** }
  66                             		.loc 1 47 1
  67 004a 3F 7A 04                		rtsd	#16, r7-r10
  68                             	.LFE3:
  70                             		.section	.text.ee_serial_command_parser_callback,"ax",@progbits
  71                             		.global	_ee_serial_command_parser_callback
  73                             	_ee_serial_command_parser_callback:
  74                             	.LFB4:
  48:../src/EEMBC/monitor/ee_main.c **** 
  49:../src/EEMBC/monitor/ee_main.c **** /**
  50:../src/EEMBC/monitor/ee_main.c ****  * This is the minimal parser required to test the monitor; profile-specific
  51:../src/EEMBC/monitor/ee_main.c ****  * commands are handled by whatever profile is compiled into the firmware.
  52:../src/EEMBC/monitor/ee_main.c ****  *
  53:../src/EEMBC/monitor/ee_main.c ****  * The most basic commands are:
  54:../src/EEMBC/monitor/ee_main.c ****  *
  55:../src/EEMBC/monitor/ee_main.c ****  * name             Print m-name-NAME, where NAME defines the intent of the f/w
  56:../src/EEMBC/monitor/ee_main.c ****  * timestamp        Generate a signal used for timestamping by the framework
  57:../src/EEMBC/monitor/ee_main.c ****  */
  58:../src/EEMBC/monitor/ee_main.c **** /*@-mustfreefresh*/
  59:../src/EEMBC/monitor/ee_main.c **** /*@-nullpass*/
  60:../src/EEMBC/monitor/ee_main.c **** void
  61:../src/EEMBC/monitor/ee_main.c **** ee_serial_command_parser_callback(char *p_command)
  62:../src/EEMBC/monitor/ee_main.c **** {
  75                             		.loc 1 62 1 is_stmt 1
  76                             	.LVL3:
  63:../src/EEMBC/monitor/ee_main.c ****     char *tok;
  77                             		.loc 1 63 5
  64:../src/EEMBC/monitor/ee_main.c **** 
  65:../src/EEMBC/monitor/ee_main.c ****     if (g_state_parser_enabled != true)
  78                             		.loc 1 65 5
  79                             		.loc 1 65 32 is_stmt 0
  80 0000 FB 52 00 00 00 00       		mov.L	#.LANCHOR2, r5
  81                             		.loc 1 65 8
  82 0006 58 55                   		movu.B	[r5], r5
  83 0008 61 05                   		cmp	#0, r5
  84 000a 21 03                   		bne	.L27
  85 000c 02                      		rts
  86                             	.L27:
  62:../src/EEMBC/monitor/ee_main.c ****     char *tok;
  87                             		.loc 1 62 1
  88 000d 7E A7                   		push.l	r7
  89                             	.LCFI1:
  90 000f 60 C0                   		sub	#12, r0
  91                             	.LCFI2:
  66:../src/EEMBC/monitor/ee_main.c ****     {
  67:../src/EEMBC/monitor/ee_main.c ****         return;
  68:../src/EEMBC/monitor/ee_main.c ****     }
  69:../src/EEMBC/monitor/ee_main.c **** 
  70:../src/EEMBC/monitor/ee_main.c ****     tok = th_strtok(p_command, EE_CMD_DELIMITER);
  92                             		.loc 1 70 5 is_stmt 1
  93                             		.loc 1 70 11 is_stmt 0
  94 0011 FB 22 00 00 00 00       		mov.L	#.LC0, r2
  95 0017 05 00 00 00             		bsr	_th_strtok
  96                             	.LVL4:
  97 001b EF 17                   		mov.L	r1, r7
  98                             	.LVL5:
  71:../src/EEMBC/monitor/ee_main.c **** 
  72:../src/EEMBC/monitor/ee_main.c ****     if (th_strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0)
  99                             		.loc 1 72 5 is_stmt 1
 100                             		.loc 1 72 9 is_stmt 0
 101 001d 75 43 50                		mov.L	#0x50, r3
 102 0020 FB 22 02 00 00 00       		mov.L	#.LC1, r2
 103 0026 05 00 00 00             		bsr	_th_strncmp
 104                             	.LVL6:
 105                             		.loc 1 72 8
 106 002a 61 01                   		cmp	#0, r1
 107 002c 21 27                   		bne	.L14
  73:../src/EEMBC/monitor/ee_main.c ****     {
  74:../src/EEMBC/monitor/ee_main.c ****         th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
 108                             		.loc 1 74 9 is_stmt 1
 109 002e F9 02 02 07 00 00 00    		mov.L	#.LC2, 8[r0]
 110 0035 F9 02 01 0D 00 00 00    		mov.L	#.LC3, 4[r0]
 111 003c F8 02 11 00 00 00       		mov.L	#.LC4, [r0]
 112 0042 05 00 00 00             		bsr	_th_printf
 113                             	.LVL7:
 114                             	.L15:
  75:../src/EEMBC/monitor/ee_main.c ****     }
  76:../src/EEMBC/monitor/ee_main.c ****     else if (th_strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0)
  77:../src/EEMBC/monitor/ee_main.c ****     {
  78:../src/EEMBC/monitor/ee_main.c ****         th_timestamp();
  79:../src/EEMBC/monitor/ee_main.c ****     }
  80:../src/EEMBC/monitor/ee_main.c ****     else if (ee_profile_parse(tok) == EE_ARG_CLAIMED)
  81:../src/EEMBC/monitor/ee_main.c ****     {
  82:../src/EEMBC/monitor/ee_main.c ****     }
  83:../src/EEMBC/monitor/ee_main.c ****     else
  84:../src/EEMBC/monitor/ee_main.c ****     {
  85:../src/EEMBC/monitor/ee_main.c ****         th_printf(EE_ERR_CMD, tok);
  86:../src/EEMBC/monitor/ee_main.c ****     }
  87:../src/EEMBC/monitor/ee_main.c **** 
  88:../src/EEMBC/monitor/ee_main.c ****     th_printf(EE_MSG_READY);
 115                             		.loc 1 88 5
 116 0046 F8 02 46 00 00 00       		mov.L	#.LC7, [r0]
 117 004c 05 00 00 00             		bsr	_th_printf
 118                             	.LVL8:
  89:../src/EEMBC/monitor/ee_main.c **** }
 119                             		.loc 1 89 1 is_stmt 0
 120 0050 3F 77 04                		rtsd	#16, r7-r7
 121                             	.LVL9:
 122                             	.L14:
  76:../src/EEMBC/monitor/ee_main.c ****     {
 123                             		.loc 1 76 10 is_stmt 1
  76:../src/EEMBC/monitor/ee_main.c ****     {
 124                             		.loc 1 76 14 is_stmt 0
 125 0053 75 43 50                		mov.L	#0x50, r3
 126 0056 FB 22 22 00 00 00       		mov.L	#.LC5, r2
 127 005c EF 71                   		mov.L	r7, r1
 128 005e 05 00 00 00             		bsr	_th_strncmp
 129                             	.LVL10:
  76:../src/EEMBC/monitor/ee_main.c ****     {
 130                             		.loc 1 76 13
 131 0062 61 01                   		cmp	#0, r1
 132 0064 21 13                   		bne	.L16
  78:../src/EEMBC/monitor/ee_main.c ****     }
 133                             		.loc 1 78 9 is_stmt 1
 134 0066 05 00 00 00             		bsr	_th_timestamp
 135                             	.LVL11:
  88:../src/EEMBC/monitor/ee_main.c **** }
 136                             		.loc 1 88 5
 137 006a F8 02 46 00 00 00       		mov.L	#.LC7, [r0]
 138 0070 05 00 00 00             		bsr	_th_printf
 139                             	.LVL12:
 140                             		.loc 1 89 1 is_stmt 0
 141 0074 3F 77 04                		rtsd	#16, r7-r7
 142                             	.LVL13:
 143                             	.L16:
  80:../src/EEMBC/monitor/ee_main.c ****     {
 144                             		.loc 1 80 10 is_stmt 1
  80:../src/EEMBC/monitor/ee_main.c ****     {
 145                             		.loc 1 80 14 is_stmt 0
 146 0077 EF 71                   		mov.L	r7, r1
 147 0079 05 00 00 00             		bsr	_ee_profile_parse
 148                             	.LVL14:
  80:../src/EEMBC/monitor/ee_main.c ****     {
 149                             		.loc 1 80 13
 150 007d 61 01                   		cmp	#0, r1
 151 007f 20 C7                   		beq	.L15
  85:../src/EEMBC/monitor/ee_main.c ****     }
 152                             		.loc 1 85 9 is_stmt 1
 153 0081 A0 0F                   		mov.L	r7, 4[r0]
 154 0083 F8 02 2C 00 00 00       		mov.L	#.LC6, [r0]
 155 0089 05 00 00 00             		bsr	_th_printf
 156                             	.LVL15:
 157 008d 2E B9                   		bra	.L15
 158                             	.LFE4:
 160                             		.section	.text.ee_benchmark_initialize,"ax",@progbits
 161                             		.global	_ee_benchmark_initialize
 163                             	_ee_benchmark_initialize:
 164                             	.LFB5:
  90:../src/EEMBC/monitor/ee_main.c **** 
  91:../src/EEMBC/monitor/ee_main.c **** /**
  92:../src/EEMBC/monitor/ee_main.c ****  * Perform the basic setup.
  93:../src/EEMBC/monitor/ee_main.c ****  */
  94:../src/EEMBC/monitor/ee_main.c **** void
  95:../src/EEMBC/monitor/ee_main.c **** ee_benchmark_initialize(void)
  96:../src/EEMBC/monitor/ee_main.c **** {
 165                             		.loc 1 96 1
 166 0000 60 40                   		sub	#4, r0
 167                             	.LCFI3:
  97:../src/EEMBC/monitor/ee_main.c ****     th_serialport_initialize();
 168                             		.loc 1 97 5
 169 0002 05 00 00 00             		bsr	_th_serialport_initialize
 170                             	.LVL16:
  98:../src/EEMBC/monitor/ee_main.c ****     th_timestamp_initialize();
 171                             		.loc 1 98 5
 172 0006 05 00 00 00             		bsr	_th_timestamp_initialize
 173                             	.LVL17:
  99:../src/EEMBC/monitor/ee_main.c ****     th_final_initialize();
 174                             		.loc 1 99 5
 175 000a 05 00 00 00             		bsr	_th_final_initialize
 176                             	.LVL18:
 100:../src/EEMBC/monitor/ee_main.c ****     th_printf(EE_MSG_INIT_DONE);
 177                             		.loc 1 100 5
 178 000e F8 02 00 00 00 00       		mov.L	#.LC8, [r0]
 179 0014 05 00 00 00             		bsr	_th_printf
 180                             	.LVL19:
 101:../src/EEMBC/monitor/ee_main.c ****     // Enable the command parser here (the callback is connected)
 102:../src/EEMBC/monitor/ee_main.c ****     g_state_parser_enabled = true;
 181                             		.loc 1 102 5
 103:../src/EEMBC/monitor/ee_main.c ****     // At this point, the serial monitor should be up and running,
 104:../src/EEMBC/monitor/ee_main.c ****     th_printf(EE_MSG_READY);
 182                             		.loc 1 104 5 is_stmt 0
 183 0018 F8 02 46 00 00 00       		mov.L	#.LC7, [r0]
 102:../src/EEMBC/monitor/ee_main.c ****     // At this point, the serial monitor should be up and running,
 184                             		.loc 1 102 28
 185 001e FB 52 00 00 00 00       		mov.L	#.LANCHOR2, r5
 186 0024 F8 54 01                		mov.B	#1, [r5]
 187                             		.loc 1 104 5 is_stmt 1
 188 0027 05 00 00 00             		bsr	_th_printf
 189                             	.LVL20:
 105:../src/EEMBC/monitor/ee_main.c **** }
 190                             		.loc 1 105 1 is_stmt 0
 191 002b 67 01                   		rtsd	#4
 192                             	.LFE5:
 194                             		.global	_g_state_parser_enabled
 195                             		.global	_g_cmd_pos
 196                             		.global	_g_cmd_buf
 197                             		.section	.bss.g_cmd_buf,"aw",@nobits
 198                             		.balign 4
 199                             		.set	.LANCHOR1,. + 0
 202                             	_g_cmd_buf:
 203 0000 00 00 00 00 00 00 00 00 		.zero	81
 203      00 00 00 00 00 00 00 00 
 203      00 00 00 00 00 00 00 00 
 203      00 00 00 00 00 00 00 00 
 203      00 00 00 00 00 00 00 00 
 204 0051 00 00 00                		.section	.bss.g_cmd_pos,"aw",@nobits
 205                             		.balign 4
 206                             		.set	.LANCHOR0,. + 0
 209                             	_g_cmd_pos:
 210 0000 00 00 00 00             		.zero	4
 211                             		.section	.bss.g_state_parser_enabled,"aw",@nobits
 212                             		.set	.LANCHOR2,. + 0
 215                             	_g_state_parser_enabled:
 216 0000 00                      		.zero	1
 217                             		.section	.rodata.ee_benchmark_initialize.str1.1,"aMS",@progbits,1
 218                             	.LC8:
 219 0000 6D 2D 69 6E 69 74 2D 64 		.string	"m-init-done\r\n"
 219      6F 6E 65 0D 0A 00 
 220                             		.section	.rodata.ee_serial_command_parser_callback.str1.1,"aMS",@progbits,1
 221                             	.LC0:
 222 0000 20 00                   		.string	" "
 223                             	.LC1:
 224 0002 6E 61 6D 65 00          		.string	"name"
 225                             	.LC2:
 226 0007 52 58 36 35 4E 00       		.string	"RX65N"
 227                             	.LC3:
 228 000d 64 75 74 00             		.string	"dut"
 229                             	.LC4:
 230 0011 6D 2D 6E 61 6D 65 2D 25 		.string	"m-name-%s-[%s]\r\n"
 230      73 2D 5B 25 73 5D 0D 0A 
 230      00 
 231                             	.LC5:
 232 0022 74 69 6D 65 73 74 61 6D 		.string	"timestamp"
 232      70 00 
 233                             	.LC6:
 234 002c 65 2D 5B 55 6E 6B 6E 6F 		.string	"e-[Unknown command: %s]\r\n"
 234      77 6E 20 63 6F 6D 6D 61 
 234      6E 64 3A 20 25 73 5D 0D 
 234      0A 00 
 235                             	.LC7:
 236 0046 6D 2D 72 65 61 64 79 0D 		.string	"m-ready\r\n"
 236      0A 00 
 305                             	.Letext0:
 306                             		.file 2 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 307                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 308                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 309                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 310                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\stdlib.h"
 311                             		.file 7 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\EEM
 312                             		.file 8 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\EEM
 313                             		.file 9 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\EEM
