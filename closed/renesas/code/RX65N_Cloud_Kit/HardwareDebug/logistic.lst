   1                             		.file	"logistic.cc"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text._ZN6tflite3ops5micro11activations12LogisticInitEP13TfLiteContextPKcm,"ax",@progbits
   5                             		.global	__ZN6tflite3ops5micro11activations12LogisticInitEP13TfLiteContextPKcm
   7                             	__ZN6tflite3ops5micro11activations12LogisticInitEP13TfLiteContextPKcm:
   8                             	.LFB2227:
   9                             		.file 1 "../src/tensorflow/lite/micro/kernels/logistic.cc"
   1:../src/tensorflow/lite/micro/kernels/logistic.cc **** /* Copyright 2019 The TensorFlow Authors. All Rights Reserved.
   2:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
   3:../src/tensorflow/lite/micro/kernels/logistic.cc **** Licensed under the Apache License, Version 2.0 (the "License");
   4:../src/tensorflow/lite/micro/kernels/logistic.cc **** you may not use this file except in compliance with the License.
   5:../src/tensorflow/lite/micro/kernels/logistic.cc **** You may obtain a copy of the License at
   6:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
   7:../src/tensorflow/lite/micro/kernels/logistic.cc ****     http://www.apache.org/licenses/LICENSE-2.0
   8:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
   9:../src/tensorflow/lite/micro/kernels/logistic.cc **** Unless required by applicable law or agreed to in writing, software
  10:../src/tensorflow/lite/micro/kernels/logistic.cc **** distributed under the License is distributed on an "AS IS" BASIS,
  11:../src/tensorflow/lite/micro/kernels/logistic.cc **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:../src/tensorflow/lite/micro/kernels/logistic.cc **** See the License for the specific language governing permissions and
  13:../src/tensorflow/lite/micro/kernels/logistic.cc **** limitations under the License.
  14:../src/tensorflow/lite/micro/kernels/logistic.cc **** ==============================================================================*/
  15:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  16:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/kernels/internal/reference/integer_ops/logistic.h"
  17:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  18:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/c/builtin_op_data.h"
  19:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/c/common.h"
  20:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/kernels/internal/common.h"
  21:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/kernels/internal/quantization_util.h"
  22:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/kernels/internal/reference/logistic.h"
  23:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
  24:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/kernels/kernel_util.h"
  25:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/kernels/op_macros.h"
  26:../src/tensorflow/lite/micro/kernels/logistic.cc **** #include "tensorflow/lite/micro/kernels/kernel_util.h"
  27:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  28:../src/tensorflow/lite/micro/kernels/logistic.cc **** namespace tflite {
  29:../src/tensorflow/lite/micro/kernels/logistic.cc **** namespace ops {
  30:../src/tensorflow/lite/micro/kernels/logistic.cc **** namespace micro {
  31:../src/tensorflow/lite/micro/kernels/logistic.cc **** namespace activations {
  32:../src/tensorflow/lite/micro/kernels/logistic.cc **** namespace {
  33:../src/tensorflow/lite/micro/kernels/logistic.cc **** constexpr int kInputTensor = 0;
  34:../src/tensorflow/lite/micro/kernels/logistic.cc **** constexpr int kOutputTensor = 0;
  35:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  36:../src/tensorflow/lite/micro/kernels/logistic.cc **** struct OpData {
  37:../src/tensorflow/lite/micro/kernels/logistic.cc ****   int32_t input_zero_point;
  38:../src/tensorflow/lite/micro/kernels/logistic.cc ****   int32_t input_range_radius;
  39:../src/tensorflow/lite/micro/kernels/logistic.cc ****   int32_t input_multiplier;
  40:../src/tensorflow/lite/micro/kernels/logistic.cc ****   int input_left_shift;
  41:../src/tensorflow/lite/micro/kernels/logistic.cc **** };
  42:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  43:../src/tensorflow/lite/micro/kernels/logistic.cc **** TfLiteStatus CalculateArithmeticOpData(TfLiteContext* context, TfLiteNode* node,
  44:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                        OpData* data) {
  45:../src/tensorflow/lite/micro/kernels/logistic.cc ****   const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  46:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TF_LITE_ENSURE(context, input != nullptr);
  47:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  48:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TF_LITE_ENSURE(context, output != nullptr);
  49:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  50:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  51:../src/tensorflow/lite/micro/kernels/logistic.cc ****   if (input->type == kTfLiteInt8) {
  52:../src/tensorflow/lite/micro/kernels/logistic.cc ****     TF_LITE_ENSURE_EQ(context, output->params.zero_point,
  53:../src/tensorflow/lite/micro/kernels/logistic.cc ****                       std::numeric_limits<int8_t>::min());
  54:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  55:../src/tensorflow/lite/micro/kernels/logistic.cc ****     static constexpr int kInputIntegerBits = 4;
  56:../src/tensorflow/lite/micro/kernels/logistic.cc ****     const double input_real_multiplier =
  57:../src/tensorflow/lite/micro/kernels/logistic.cc ****         static_cast<double>(input->params.scale) *
  58:../src/tensorflow/lite/micro/kernels/logistic.cc ****         static_cast<double>(1 << (31 - kInputIntegerBits));
  59:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  60:../src/tensorflow/lite/micro/kernels/logistic.cc ****     data->input_zero_point = input->params.zero_point;
  61:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  62:../src/tensorflow/lite/micro/kernels/logistic.cc ****     const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
  63:../src/tensorflow/lite/micro/kernels/logistic.cc ****     data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
  64:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  65:../src/tensorflow/lite/micro/kernels/logistic.cc ****     data->input_range_radius =
  66:../src/tensorflow/lite/micro/kernels/logistic.cc ****         CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
  67:../src/tensorflow/lite/micro/kernels/logistic.cc ****   }
  68:../src/tensorflow/lite/micro/kernels/logistic.cc ****   return kTfLiteOk;
  69:../src/tensorflow/lite/micro/kernels/logistic.cc **** }
  70:../src/tensorflow/lite/micro/kernels/logistic.cc **** }  // namespace
  71:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  72:../src/tensorflow/lite/micro/kernels/logistic.cc **** void* LogisticInit(TfLiteContext* context, const char* buffer, size_t length) {
  10                             		.loc 1 72 79
  11                             	.LVL0:
  73:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  12                             		.loc 1 73 3
  13 0000 AB 95                   		mov.L	56[r1], r5
  14 0002 61 05                   		cmp	#0, r5
  15 0004 17                      		beq	.L4
  74:../src/tensorflow/lite/micro/kernels/logistic.cc ****   return context->AllocatePersistentBuffer(context, sizeof(OpData));
  16                             		.loc 1 74 3
  17                             		.loc 1 74 43 is_stmt 0
  18 0005 75 42 10                		mov.L	#16, r2
  19                             	.LVL1:
  20 0008 7F 15                   		jsr	r5
  21                             	.LVL2:
  75:../src/tensorflow/lite/micro/kernels/logistic.cc **** }
  22                             		.loc 1 75 1
  23 000a 02                      		rts
  24                             	.LVL3:
  25                             	.L4:
  73:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  26                             		.loc 1 73 3 discriminator 1
  27 000b 05 00 00 00             		bsr	_abort
  28                             	.LVL4:
  29                             	.LFE2227:
  31                             		.section	.text._ZN6tflite3ops5micro11activations15LogisticPrepareEP13TfLiteContextP10TfLiteNode,"a
  32                             		.global	__ZN6tflite3ops5micro11activations15LogisticPrepareEP13TfLiteContextP10TfLiteNode
  34                             	__ZN6tflite3ops5micro11activations15LogisticPrepareEP13TfLiteContextP10TfLiteNode:
  35                             	.LFB2228:
  76:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  77:../src/tensorflow/lite/micro/kernels/logistic.cc **** TfLiteStatus LogisticPrepare(TfLiteContext* context, TfLiteNode* node) {
  36                             		.loc 1 77 72 is_stmt 1
  37                             	.LVL5:
  38 0000 6E 6B                   		pushm	r6-r11
  39                             	.LCFI0:
  40 0002 71 00 E4                		add	#-28, r0
  41                             	.LCFI1:
  78:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TFLITE_DCHECK(node->user_data != nullptr);
  42                             		.loc 1 78 3
  43 0005 ED 2B 04                		mov.L	16[r2], r11
  44 0008 61 0B                   		cmp	#0, r11
  45 000a 3A 15 01                		beq	.L15
  46 000d EF 2A                   		mov.L	r2, r10
  47 000f EF 17                   		mov.L	r1, r7
  79:../src/tensorflow/lite/micro/kernels/logistic.cc ****   OpData* data = static_cast<OpData*>(node->user_data);
  48                             		.loc 1 79 3
  49                             	.LVL6:
  80:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  81:../src/tensorflow/lite/micro/kernels/logistic.cc ****   return CalculateArithmeticOpData(context, node, data);
  50                             		.loc 1 81 3
  51                             	.LBB1088:
  52                             	.LBB1089:
  45:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TF_LITE_ENSURE(context, input != nullptr);
  53                             		.loc 1 45 3
  45:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TF_LITE_ENSURE(context, input != nullptr);
  54                             		.loc 1 45 39 is_stmt 0
  55 0011 66 03                   		mov.L	#0, r3
  56 0013 05 00 00 00             		bsr	__ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei
  57                             	.LVL7:
  46:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  58                             		.loc 1 46 3
  59 0017 71 16 00                		add	#0, r1, r6
  60 001a 20 24                   		beq	.L16
  47:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TF_LITE_ENSURE(context, output != nullptr);
  61                             		.loc 1 47 3 is_stmt 1
  47:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TF_LITE_ENSURE(context, output != nullptr);
  62                             		.loc 1 47 35 is_stmt 0
  63 001c 66 03                   		mov.L	#0, r3
  64 001e EF A2                   		mov.L	r10, r2
  65 0020 EF 71                   		mov.L	r7, r1
  66 0022 05 00 00 00             		bsr	__ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei
  67                             	.LVL8:
  48:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  68                             		.loc 1 48 3
  69 0026 71 1A 00                		add	#0, r1, r10
  70                             	.LVL9:
  71 0029 3A AE 00                		beq	.L17
  50:../src/tensorflow/lite/micro/kernels/logistic.cc ****   if (input->type == kTfLiteInt8) {
  72                             		.loc 1 50 3 is_stmt 1
  50:../src/tensorflow/lite/micro/kernels/logistic.cc ****   if (input->type == kTfLiteInt8) {
  73                             		.loc 1 50 3
  74 002c EC 61                   		mov.L	[r6], r1
  75 002e 06 84 A1                		cmp	[r10].L, r1
  76 0031 21 32                   		bne	.L18
  51:../src/tensorflow/lite/micro/kernels/logistic.cc ****     TF_LITE_ENSURE_EQ(context, output->params.zero_point,
  77                             		.loc 1 51 3
  78                             	.LBB1090:
  79 0033 61 91                   		cmp	#9, r1
  80 0035 20 6A                   		beq	.L19
  81                             	.LBE1090:
  68:../src/tensorflow/lite/micro/kernels/logistic.cc **** }
  82                             		.loc 1 68 10 is_stmt 0
  83 0037 66 07                   		mov.L	#0, r7
  84                             	.LVL10:
  85                             		.balign 8,3,1
  86                             	.L5:
  87                             	.LBE1089:
  88                             	.LBE1088:
  82:../src/tensorflow/lite/micro/kernels/logistic.cc **** }
  89                             		.loc 1 82 1
  90 0039 EF 71                   		mov.L	r7, r1
  91 003b 3F 6B 0D                		rtsd	#52, r6-r11
  92                             	.LVL11:
  93                             	.L16:
  94                             	.LBB1102:
  95                             	.LBB1099:
  46:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  96                             		.loc 1 46 3 is_stmt 1
  46:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  97                             		.loc 1 46 3
  98 003e ED 7A 05                		mov.L	20[r7], r10
  99                             	.LVL12:
 100 0041 F9 02 03 00 00 00 00    		mov.L	#.LC1, 12[r0]
 101 0048 3E 02 2E                		mov.L	#46, 8[r0]
 102                             	.L14:
  48:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 103                             		.loc 1 48 3 is_stmt 0
 104 004b F9 02 01 11 00 00 00    		mov.L	#.LC2, 4[r0]
 105 0052 EF 71                   		mov.L	r7, r1
 106 0054 F8 02 42 00 00 00       		mov.L	#.LC3, [r0]
 107 005a 7F 1A                   		jsr	r10
 108                             	.LVL13:
  48:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 109                             		.loc 1 48 3 is_stmt 1
 110 005c 66 17                   		mov.L	#1, r7
 111                             	.LVL14:
 112                             	.LBE1099:
 113                             	.LBE1102:
 114                             		.loc 1 82 1 is_stmt 0
 115 005e EF 71                   		mov.L	r7, r1
 116 0060 3F 6B 0D                		rtsd	#52, r6-r11
 117                             	.LVL15:
 118                             	.L18:
 119                             	.LBB1103:
 120                             	.LBB1100:
  50:../src/tensorflow/lite/micro/kernels/logistic.cc ****   if (input->type == kTfLiteInt8) {
 121                             		.loc 1 50 3 is_stmt 1
  50:../src/tensorflow/lite/micro/kernels/logistic.cc ****   if (input->type == kTfLiteInt8) {
 122                             		.loc 1 50 3
 123 0063 A9 7E                   		mov.L	20[r7], r6
 124 0065 05 00 00 00             		bsr	_TfLiteTypeGetName
 125                             	.LVL16:
 126 0069 EF 1B                   		mov.L	r1, r11
 127                             	.LVL17:
 128 006b EC A1                   		mov.L	[r10], r1
 129 006d 05 00 00 00             		bsr	_TfLiteTypeGetName
 130                             	.LVL18:
 131 0071 A1 81                   		mov.L	r1, 24[r0]
 132 0073 E7 0B 05                		mov.L	r11, 20[r0]
 133 0076 F9 02 04 6B 00 00 00    		mov.L	#.LC5, 16[r0]
 134 007d F9 02 03 78 00 00 00    		mov.L	#.LC6, 12[r0]
 135 0084 3E 02 32                		mov.L	#50, 8[r0]
 136 0087 F9 02 01 11 00 00 00    		mov.L	#.LC2, 4[r0]
 137 008e EF 71                   		mov.L	r7, r1
 138 0090 F8 02 84 00 00 00       		mov.L	#.LC7, [r0]
 139 0096 7F 16                   		jsr	r6
 140                             	.LVL19:
  50:../src/tensorflow/lite/micro/kernels/logistic.cc ****   if (input->type == kTfLiteInt8) {
 141                             		.loc 1 50 3
 142 0098 66 17                   		mov.L	#1, r7
 143                             	.LVL20:
 144                             	.LBE1100:
 145                             	.LBE1103:
 146                             		.loc 1 82 1 is_stmt 0
 147 009a EF 71                   		mov.L	r7, r1
 148 009c 3F 6B 0D                		rtsd	#52, r6-r11
 149                             	.LVL21:
 150                             	.L19:
 151                             	.LBB1104:
 152                             	.LBB1101:
 153                             	.LBB1096:
 154                             	.LBB1091:
  52:../src/tensorflow/lite/micro/kernels/logistic.cc ****                       std::numeric_limits<int8_t>::min());
 155                             		.loc 1 52 5 is_stmt 1
  52:../src/tensorflow/lite/micro/kernels/logistic.cc ****                       std::numeric_limits<int8_t>::min());
 156                             		.loc 1 52 5
 157 009f ED AA 04                		mov.L	16[r10], r10
 158 00a2 75 0A 80                		cmp	#-128, r10
 159 00a5 20 42                   		beq	.L11
  52:../src/tensorflow/lite/micro/kernels/logistic.cc ****                       std::numeric_limits<int8_t>::min());
 160                             		.loc 1 52 5
  52:../src/tensorflow/lite/micro/kernels/logistic.cc ****                       std::numeric_limits<int8_t>::min());
 161                             		.loc 1 52 5
 162 00a7 A9 7D                   		mov.L	20[r7], r5
 163 00a9 F9 06 06 80             		mov.L	#-128, 24[r0]
 164 00ad E7 0A 05                		mov.L	r10, 20[r0]
 165 00b0 F9 02 04 9E 00 00 00    		mov.L	#.LC8, 16[r0]
 166 00b7 F9 02 03 C1 00 00 00    		mov.L	#.LC9, 12[r0]
 167 00be 3E 02 35                		mov.L	#53, 8[r0]
 168 00c1 F9 02 01 11 00 00 00    		mov.L	#.LC2, 4[r0]
 169 00c8 EF 71                   		mov.L	r7, r1
 170 00ca F8 02 DB 00 00 00       		mov.L	#.LC10, [r0]
 171 00d0 7F 15                   		jsr	r5
 172                             	.LVL22:
  52:../src/tensorflow/lite/micro/kernels/logistic.cc ****                       std::numeric_limits<int8_t>::min());
 173                             		.loc 1 52 5
 174 00d2 66 17                   		mov.L	#1, r7
 175                             	.LVL23:
 176 00d4 38 65 FF                		bra	.L5
 177                             	.LVL24:
 178                             	.L17:
 179                             	.LBE1091:
 180                             	.LBE1096:
  48:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 181                             		.loc 1 48 3
  48:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 182                             		.loc 1 48 3
 183 00d7 ED 7A 05                		mov.L	20[r7], r10
 184 00da F9 02 03 59 00 00 00    		mov.L	#.LC4, 12[r0]
 185 00e1 3E 02 30                		mov.L	#48, 8[r0]
 186 00e4 38 67 FF                		bra	.L14
 187                             	.L11:
 188                             	.LBB1097:
 189                             	.LBB1094:
  55:../src/tensorflow/lite/micro/kernels/logistic.cc ****     const double input_real_multiplier =
 190                             		.loc 1 55 5
  56:../src/tensorflow/lite/micro/kernels/logistic.cc ****         static_cast<double>(input->params.scale) *
 191                             		.loc 1 56 5
  56:../src/tensorflow/lite/micro/kernels/logistic.cc ****         static_cast<double>(input->params.scale) *
 192                             		.loc 1 56 18 is_stmt 0
 193 00e7 A8 E9                   		mov.L	12[r6], r1
 194                             	.LVL25:
  60:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 195                             		.loc 1 60 5 is_stmt 1
  60:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 196                             		.loc 1 60 28 is_stmt 0
 197 00e9 E1 6B 04                		mov.L	16[r6], [r11]
  62:../src/tensorflow/lite/micro/kernels/logistic.cc ****     data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
 198                             		.loc 1 62 5 is_stmt 1
  62:../src/tensorflow/lite/micro/kernels/logistic.cc ****     data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
 199                             		.loc 1 62 32 is_stmt 0
 200 00ec 71 B2 0C                		add	#12, r11, r2
 201 00ef FD 72 31 00 00 00 4D    		fmul	#0x4d000000, r1
 202                             	.LVL26:
 203 00f6 05 00 00 00             		bsr	_frexp
 204                             	.LVL27:
  63:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 205                             		.loc 1 63 5 is_stmt 1
 206                             	.LBB1092:
 207                             	.LBB1093:
 208                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/tens
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** /* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h ****     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** ==============================================================================*/
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #ifndef TENSORFLOW_LITE_KERNELS_INTERNAL_CPPMATH_H_
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #define TENSORFLOW_LITE_KERNELS_INTERNAL_CPPMATH_H_
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #include <cmath>
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** namespace tflite {
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #if defined(TF_LITE_USE_GLOBAL_CMATH_FUNCTIONS) ||                           \
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h ****     (defined(__ANDROID__) && !defined(__NDK_MAJOR__)) || defined(ARDUINO) || \
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h ****     defined(__ZEPHYR__)
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #define TF_LITE_GLOBAL_STD_PREFIX
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #else
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #define TF_LITE_GLOBAL_STD_PREFIX std
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #endif
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** #define DECLARE_STD_GLOBAL_SWITCH1(tf_name, std_name) \
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h ****   template <class T>                                  \
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h ****   inline T tf_name(const T x) {                       \
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h ****     return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h ****   }
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** 
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\cppmath.h **** DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 209                             		.loc 2 36 1 is_stmt 0
 210 00fa FD 72 31 00 00 00 4F    		fmul	#0x4f000000, r1
 211                             	.LVL28:
 212 0101 05 00 00 00             		bsr	_round
 213                             	.LVL29:
 214                             	.LBE1093:
 215                             	.LBE1092:
  66:../src/tensorflow/lite/micro/kernels/logistic.cc ****   }
 216                             		.loc 1 66 29
 217 0105 ED B2 03                		mov.L	12[r11], r2
 218 0108 75 43 1F                		mov.L	#31, r3
  63:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 219                             		.loc 1 63 30
 220 010b FC 97 17                		ftoi	r1, r7
 221                             	.LVL30:
  66:../src/tensorflow/lite/micro/kernels/logistic.cc ****   }
 222                             		.loc 1 66 29
 223 010e 66 41                   		mov.L	#4, r1
  63:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 224                             		.loc 1 63 30
 225 0110 E7 B7 02                		mov.L	r7, 8[r11]
  65:../src/tensorflow/lite/micro/kernels/logistic.cc ****         CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
 226                             		.loc 1 65 5 is_stmt 1
  66:../src/tensorflow/lite/micro/kernels/logistic.cc ****   }
 227                             		.loc 1 66 29 is_stmt 0
 228 0113 05 00 00 00             		bsr	__ZN6tflite20CalculateInputRadiusEiii
 229                             	.LVL31:
 230                             	.LBE1094:
 231                             	.LBE1097:
  68:../src/tensorflow/lite/micro/kernels/logistic.cc **** }
 232                             		.loc 1 68 10
 233 0117 66 07                   		mov.L	#0, r7
 234                             	.LBB1098:
 235                             	.LBB1095:
  65:../src/tensorflow/lite/micro/kernels/logistic.cc ****         CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
 236                             		.loc 1 65 30
 237 0119 E7 B1 01                		mov.L	r1, 4[r11]
 238 011c 38 1D FF                		bra	.L5
 239                             	.LVL32:
 240                             	.L15:
 241                             	.LBE1095:
 242                             	.LBE1098:
 243                             	.LBE1101:
 244                             	.LBE1104:
  78:../src/tensorflow/lite/micro/kernels/logistic.cc ****   OpData* data = static_cast<OpData*>(node->user_data);
 245                             		.loc 1 78 3 discriminator 1
 246 011f 05 00 00 00             		bsr	_abort
 247                             	.LVL33:
 248                             	.LFE2228:
 250 0123 77 10 01 00 00          		.section	.text._ZN6tflite3ops5micro17Register_LOGISTICEv,"ax",@progbits
 251                             		.global	__ZN6tflite3ops5micro17Register_LOGISTICEv
 253                             	__ZN6tflite3ops5micro17Register_LOGISTICEv:
 254                             	.LFB2230:
  83:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  84:../src/tensorflow/lite/micro/kernels/logistic.cc **** TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
  85:../src/tensorflow/lite/micro/kernels/logistic.cc ****   const TfLiteEvalTensor* input =
  86:../src/tensorflow/lite/micro/kernels/logistic.cc ****       tflite::micro::GetEvalInput(context, node, kInputTensor);
  87:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TfLiteEvalTensor* output =
  88:../src/tensorflow/lite/micro/kernels/logistic.cc ****       tflite::micro::GetEvalOutput(context, node, kOutputTensor);
  89:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  90:../src/tensorflow/lite/micro/kernels/logistic.cc ****   TFLITE_DCHECK(node->user_data != nullptr);
  91:../src/tensorflow/lite/micro/kernels/logistic.cc ****   OpData* data = static_cast<OpData*>(node->user_data);
  92:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
  93:../src/tensorflow/lite/micro/kernels/logistic.cc ****   if (input->type == kTfLiteFloat32) {
  94:../src/tensorflow/lite/micro/kernels/logistic.cc ****     switch (output->type) {
  95:../src/tensorflow/lite/micro/kernels/logistic.cc ****       case kTfLiteFloat32: {
  96:../src/tensorflow/lite/micro/kernels/logistic.cc ****         reference_ops::Logistic(tflite::micro::GetTensorShape(input),
  97:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                 tflite::micro::GetTensorData<float>(input),
  98:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                 tflite::micro::GetTensorShape(output),
  99:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                 tflite::micro::GetTensorData<float>(output));
 100:../src/tensorflow/lite/micro/kernels/logistic.cc ****         return kTfLiteOk;
 101:../src/tensorflow/lite/micro/kernels/logistic.cc ****       }
 102:../src/tensorflow/lite/micro/kernels/logistic.cc ****       default:
 103:../src/tensorflow/lite/micro/kernels/logistic.cc ****         TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
 104:../src/tensorflow/lite/micro/kernels/logistic.cc ****                            TfLiteTypeGetName(input->type),
 105:../src/tensorflow/lite/micro/kernels/logistic.cc ****                            TfLiteTypeGetName(output->type));
 106:../src/tensorflow/lite/micro/kernels/logistic.cc ****         return kTfLiteError;
 107:../src/tensorflow/lite/micro/kernels/logistic.cc ****     }
 108:../src/tensorflow/lite/micro/kernels/logistic.cc ****   } else if (input->type == kTfLiteInt8) {
 109:../src/tensorflow/lite/micro/kernels/logistic.cc ****     switch (output->type) {
 110:../src/tensorflow/lite/micro/kernels/logistic.cc ****       case kTfLiteInt8: {
 111:../src/tensorflow/lite/micro/kernels/logistic.cc ****         reference_integer_ops::Logistic(
 112:../src/tensorflow/lite/micro/kernels/logistic.cc ****             data->input_zero_point, data->input_range_radius,
 113:../src/tensorflow/lite/micro/kernels/logistic.cc ****             data->input_multiplier, data->input_left_shift,
 114:../src/tensorflow/lite/micro/kernels/logistic.cc ****             NumElements(input->dims),
 115:../src/tensorflow/lite/micro/kernels/logistic.cc ****             tflite::micro::GetTensorData<int8_t>(input),
 116:../src/tensorflow/lite/micro/kernels/logistic.cc ****             tflite::micro::GetTensorData<int8_t>(output));
 117:../src/tensorflow/lite/micro/kernels/logistic.cc ****         return kTfLiteOk;
 118:../src/tensorflow/lite/micro/kernels/logistic.cc ****       }
 119:../src/tensorflow/lite/micro/kernels/logistic.cc ****       default:
 120:../src/tensorflow/lite/micro/kernels/logistic.cc ****         TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
 121:../src/tensorflow/lite/micro/kernels/logistic.cc ****                            TfLiteTypeGetName(input->type),
 122:../src/tensorflow/lite/micro/kernels/logistic.cc ****                            TfLiteTypeGetName(output->type));
 123:../src/tensorflow/lite/micro/kernels/logistic.cc ****         return kTfLiteError;
 124:../src/tensorflow/lite/micro/kernels/logistic.cc ****     }
 125:../src/tensorflow/lite/micro/kernels/logistic.cc ****   } else {
 126:../src/tensorflow/lite/micro/kernels/logistic.cc ****     // TODO(b/141211002): Also support other data types once we have supported
 127:../src/tensorflow/lite/micro/kernels/logistic.cc ****     // temporary tensors in TFLM.
 128:../src/tensorflow/lite/micro/kernels/logistic.cc ****     TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
 129:../src/tensorflow/lite/micro/kernels/logistic.cc ****                        TfLiteTypeGetName(input->type),
 130:../src/tensorflow/lite/micro/kernels/logistic.cc ****                        TfLiteTypeGetName(output->type));
 131:../src/tensorflow/lite/micro/kernels/logistic.cc ****     return kTfLiteError;
 132:../src/tensorflow/lite/micro/kernels/logistic.cc ****   }
 133:../src/tensorflow/lite/micro/kernels/logistic.cc ****   return kTfLiteOk;
 134:../src/tensorflow/lite/micro/kernels/logistic.cc **** }
 135:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 136:../src/tensorflow/lite/micro/kernels/logistic.cc **** }  // namespace activations
 137:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 138:../src/tensorflow/lite/micro/kernels/logistic.cc **** TfLiteRegistration Register_LOGISTIC() {
 255                             		.loc 1 138 40 is_stmt 1
 139:../src/tensorflow/lite/micro/kernels/logistic.cc ****   return {/*init=*/activations::LogisticInit,
 256                             		.loc 1 139 3
 140:../src/tensorflow/lite/micro/kernels/logistic.cc ****           /*free=*/nullptr,
 141:../src/tensorflow/lite/micro/kernels/logistic.cc ****           /*prepare=*/activations::LogisticPrepare,
 142:../src/tensorflow/lite/micro/kernels/logistic.cc ****           /*invoke=*/activations::LogisticEval,
 143:../src/tensorflow/lite/micro/kernels/logistic.cc ****           /*profiling_string=*/nullptr,
 144:../src/tensorflow/lite/micro/kernels/logistic.cc ****           /*builtin_code=*/0,
 145:../src/tensorflow/lite/micro/kernels/logistic.cc ****           /*custom_name=*/nullptr,
 146:../src/tensorflow/lite/micro/kernels/logistic.cc ****           /*version=*/0};
 257                             		.loc 1 146 24 is_stmt 0
 258 0000 FB 22 00 00 00 00       		mov.L	#.LANCHOR0, r2
 259 0006 EF F1                   		mov.L	r15, r1
 260 0008 75 43 20                		mov.L	#32, r3
 261 000b 7F 8F                   		smovf
 147:../src/tensorflow/lite/micro/kernels/logistic.cc **** }
 262                             		.loc 1 147 1
 263 000d EF F1                   		mov.L	r15, r1
 264 000f 02                      		rts
 265                             	.LFE2230:
 267                             		.section	.text._ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_,"axG"
 268                             		.weak	__ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_
 270                             	__ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_:
 271                             	.LFB2476:
 272                             		.file 3 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\thi
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Copyright 2015 The Gemmlowp Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // fixedpoint.h: fixed-point arithmetic, with basic operations and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // a few math functions such as tanh.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #ifndef GEMMLOWP_INTERNAL_FIXEDPOINT_H_
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define GEMMLOWP_INTERNAL_FIXEDPOINT_H_
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #include <algorithm>
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #include <cassert>
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #include <cmath>
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #include <cstdint>
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #include <limits>
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #include "../internal/detect_platform.h"
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** namespace gemmlowp {
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Part 1: Low-level integer-arithmetic primitives.
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // The implementations here are generic implementations valid for
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // scalar types (e.g. std::int32_t). Architecture-specific SIMD types
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // (e.g. NEON int32x4_t) may be supported by providing
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // specializations for them in separate files.
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // The purpose of these primitives is two-fold:
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //  - They will be used to implement higher-level fixed-point
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //    abstractions, namely the FixedPoint class and its arithmetic
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //    operators.
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //  - They will be directly used to implement some more involved
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //    fixed-point computations, e.g. the fixed-point implementation
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //    of math functions such as tanh.
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Some compile-time traits around raw types to handle SIMD aspects:
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // number of lanes, underlying scalar type.
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct FixedPointRawTypeTraits {};
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct FixedPointRawTypeTraits<std::int32_t> {
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef std::int32_t ScalarRawType;
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kLanes = 1;
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct FixedPointRawTypeTraits<std::int16_t> {
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef std::int16_t ScalarRawType;
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kLanes = 1;
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns a SIMD value duplicating a scalar value across all lanes.
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType>
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return x;
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Plain bit-wise AND
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a & b;
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Plain bit-wise OR
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType BitOr(tIntegerType a, tIntegerType b) {
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a | b;
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Plain bit-wise XOR
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType BitXor(tIntegerType a, tIntegerType b) {
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a ^ b;
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Plain bit-wise NOT
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType BitNot(tIntegerType a) {
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return ~a;
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Integer addition. Not saturating. Overflow is undefined behavior.
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType Add(tIntegerType a, tIntegerType b) {
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a + b;
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Integer multiplication. Not saturating. Overflow is undefined behavior.
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType Mul(tIntegerType a, tIntegerType b) {
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a * b;
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Integer subtraction. Not saturating. Overflow is undefined behavior.
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType Sub(tIntegerType a, tIntegerType b) {
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a - b;
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Integer unary negative. Not saturating. Overflow is undefined behavior.
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType Neg(tIntegerType a) {
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return -a;
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Integer arithmetic left-shift, equivalent to multiplying with a power of two.
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Negative values are OK. In case of overflow, no Undefined
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Behavior, but the results are implementation-defined (in practice,
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // they currently are saturated, but we make no commitment to that). The idea
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // is that the caller will want to implement the overflowing cases with
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // saturation with compare-and-mask, so we don't care about the results
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // in the overflow case, we just want to avoid undefined behavior.
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // tIntegerType may be int32 or any narrower signed type.
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType, typename OffsetType>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType ShiftLeft(tIntegerType a, OffsetType offset) {
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const std::int64_t wide_a = static_cast<std::int64_t>(a);
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const std::int64_t wide_shifted = wide_a * (1 << offset);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const auto min = std::numeric_limits<tIntegerType>::min();
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const auto max = std::numeric_limits<tIntegerType>::max();
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return wide_shifted < min
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              ? min
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              : wide_shifted > max ? max
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                   : static_cast<tIntegerType>(wide_shifted);
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Integer arithmetic right-shift. Not rounding.
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Relying on implementation-defined, but in-practice-consistent,
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // C++ compiler behavior.
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType ShiftRight(tIntegerType a, int offset) {
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a >> offset;
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Each bit of the result is set to the corresponding bit of either then_val or
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // else_val depending on whether the corresponding bit of if_mask is set.
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Equivalent to the VBSL instruction in ARM NEON.
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                              tIntegerType else_val) {
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each input scalar, the corresponding bits of the result are set if the
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // input scalar is non-zero.
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfNonZero(tIntegerType a) {
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr tIntegerType zero = 0;
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a ? BitNot(zero) : zero;
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each input scalar, the corresponding bits of the result are set if the
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // input scalar is zero.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfZero(tIntegerType a) {
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return MaskIfNonZero<tIntegerType>(!a);
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each pair of input scalars, the corresponding bits of the result are
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // set if the input scalars are equal.
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfEqual(tIntegerType a, tIntegerType b) {
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return MaskIfNonZero<tIntegerType>(a == b);
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each pair of input scalars, the corresponding bits of the result are
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // set if the input scalars are not equal.
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfNotEqual(tIntegerType a, tIntegerType b) {
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return MaskIfNonZero<tIntegerType>(a != b);
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each pair of input scalars, the corresponding bits of the result are
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // set if the input scalars a, b satisfy a > b.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return MaskIfNonZero<tIntegerType>(a > b);
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each pair of input scalars, the corresponding bits of the result are
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // set if the input scalars a, b satisfy a >= b.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfGreaterThanOrEqual(tIntegerType a, tIntegerType b) {
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return MaskIfNonZero<tIntegerType>(a >= b);
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each pair of input scalars, the corresponding bits of the result are
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // set if the input scalars a, b satisfy a < b.
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return MaskIfNonZero<tIntegerType>(a < b);
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // For each pair of input scalars, the corresponding bits of the result are
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // set if the input scalars a, b satisfy a <= b.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** tIntegerType MaskIfLessThanOrEqual(tIntegerType a, tIntegerType b) {
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return MaskIfNonZero<tIntegerType>(a <= b);
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns true if all of the input scalars are nonzero.
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // This function may currently assume that each of the input scalars has either
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // all or none of its bits set. Otherwise, its behavior is currently undefined.
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** bool All(tIntegerType a) {
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a;
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns true if any of the input scalars are nonzero.
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // This function may currently assume that each of the input scalars has either
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // all or none of its bits set. Otherwise, its behavior is currently undefined.
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tIntegerType>
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** bool Any(tIntegerType a) {
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a;
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns (a+b)/2, rounded to the nearest integer.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Equivalent to VRHADD in the ARM NEON instruction set.
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename IntegerType>
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** IntegerType RoundingHalfSum(IntegerType a, IntegerType b) {
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static_assert(std::is_same<IntegerType, void>::value, "unimplemented");
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   (void)b;
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a;
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a64 = a;
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b64 = b;
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t sum = a64 + b64;
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t sign = sum >= 0 ? 1 : -1;
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<std::int32_t>((sum + sign) / 2);
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline std::int16_t RoundingHalfSum(std::int16_t a, std::int16_t b) {
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t a32 = a;
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t b32 = b;
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t sum = a32 + b32;
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t sign = sum >= 0 ? 1 : -1;
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<std::int16_t>((sum + sign) / 2);
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename IntegerType>
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** IntegerType SaturatingAdd(IntegerType a, IntegerType b) {
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static_assert(std::is_same<IntegerType, void>::value, "unimplemented");
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   (void)b;
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a;
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // So far this is only needed for int16.
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline std::int16_t SaturatingAdd(std::int16_t a, std::int16_t b) {
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t a32 = a;
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t b32 = b;
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t sum = a32 + b32;
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<std::int16_t>(
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       std::min(static_cast<std::int32_t>(32767),
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                std::max(static_cast<std::int32_t>(-32768), sum)));
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline std::int8_t SaturatingAdd(std::int8_t a, std::int8_t b) {
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int16_t a16 = a;
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int16_t b16 = b;
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int16_t sum = a16 + b16;
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<std::int8_t>(std::min(
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<int16_t>(std::numeric_limits<int8_t>::max()),
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       std::max(static_cast<int16_t>(std::numeric_limits<int8_t>::min()), sum)));
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns a+b, saturating if the integers are 16bit or narrower,
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // otherwise just a plain addition.
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename IntegerType, bool Is16Bit>
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct AddSaturatingIf16BitImpl {
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename IntegerType>
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct AddSaturatingIf16BitImpl<IntegerType, true> {
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static IntegerType Run(IntegerType a, IntegerType b) {
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return SaturatingAdd(a, b);
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename IntegerType>
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   using ScalarType =
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       typename FixedPointRawTypeTraits<IntegerType>::ScalarRawType;
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                                                              b);
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns the integer that represents the product of two fixed-point
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // numbers, interpreting all integers as fixed-point values in the
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // interval [-1, 1), rounding to the nearest value, and saturating
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // -1 * -1 to the maximum value (since 1 is not in the half-open
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // interval [-1, 1)).
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // [The explanation below specializes to std::int32_t for example purpose.]
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // The mapping between IntegerType and the interval [-1, 1) is unique and
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // implied by IntegerType, which is assumed to be signed. For example,
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // for IntegerType==std::int32_t, the mapping is
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   real_value = integer_value / 2^31.
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // So in this case, and leaving aside rounding and saturating, this
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // function computes ((a / 2^31) * (b / 2^31)) * 2^31, which simplifies to
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   (a * b) / 2^31.
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // The 'doubling' part in the name of this function comes from the fact that
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // this operation is very close to a "multiply-high" operation, keeping only
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // the top half bits, except that that would be effectively computing
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   (a * b) / 2^32,
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // so here we are computing 2x that, since
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   1/2^31 = 2 * 1/2^32.
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // The idea is to use all of the available 32 bits in the destination int32
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // value.
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // [End of the explanation specializing to int32.]
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // This is equivalent to the VQRDMULH instruction in ARM NEON.
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename IntegerType>
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** IntegerType SaturatingRoundingDoublingHighMul(IntegerType a, IntegerType b) {
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static_assert(std::is_same<IntegerType, void>::value, "unimplemented");
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   (void)b;
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return a;
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // This function implements the same computation as the ARMv7 NEON VQRDMULH
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // instruction.
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                                       std::int32_t b) {
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <>
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline std::int16_t SaturatingRoundingDoublingHighMul(std::int16_t a,
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                                       std::int16_t b) {
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   bool overflow = a == b && a == std::numeric_limits<std::int16_t>::min();
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t a_32(a);
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t b_32(b);
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_32 = a_32 * b_32;
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int16_t nudge = ab_32 >= 0 ? (1 << 14) : (1 - (1 << 14));
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int16_t ab_x2_high16 =
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int16_t>((ab_32 + nudge) / (1 << 15));
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int16_t>::max() : ab_x2_high16;
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Correctly-rounded-to-nearest division by a power-of-two.
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Also known as a rounding arithmetic right shift.
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename IntegerType, typename ExponentType>
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline IntegerType RoundingDivideByPOT(IntegerType x, ExponentType exponent) {
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   assert(exponent >= 0);
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   assert(exponent <= 31);
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType zero = Dup<IntegerType>(0);
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType one = Dup<IntegerType>(1);
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType remainder = BitAnd(x, mask);
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType threshold =
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return Add(ShiftRight(x, exponent),
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns the product of a run-time integer value by a compile-time power
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // of two, with either a positive exponent (equivalent to an arithmetic
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // left shift, saturating) or a negative exponent (equivalent to an arithmetic
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // right shift, rounding to nearest).
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int Exponent, typename IntegerType,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****           int ExponentSign = (Exponent > 0 ? 1 : Exponent < 0 ? -1 : 0)>
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct ImplSaturatingRoundingMultiplyByPOT {};
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int Exponent, typename IntegerType>
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, 0> {
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static IntegerType eval(IntegerType x) { return x; }
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int Exponent, typename IntegerType>
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, 1> {
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static IntegerType eval(IntegerType x) {
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     using ScalarIntegerType =
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         typename FixedPointRawTypeTraits<IntegerType>::ScalarRawType;
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const IntegerType min =
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const IntegerType max =
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const std::int32_t threshold =
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         ((1 << (ScalarIntegerTypeBits - 1 - Exponent)) - 1);
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const IntegerType positive_mask =
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const IntegerType negative_mask =
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     IntegerType result = ShiftLeft(x, Exponent);
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     result = SelectUsingMask(positive_mask, max, result);
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     result = SelectUsingMask(negative_mask, min, result);
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return result;
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int Exponent, typename IntegerType>
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** struct ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, -1> {
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static IntegerType eval(IntegerType x) {
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int Exponent, typename IntegerType>
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Part 2: the FixedPoint class.
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // A FixedPoint object represents a fixed-point value stored in the underlying
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // integer type tRawType, if tRawType is a plain scalar integer type.
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Alternatively, tRawType may be a SIMD type (e.g. NEON int32x4_t) in which
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // case a FixedPoint object represents a corresponding SIMD vector of fixed
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // point values.
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // tIntegerBits describes the range of the fixed-point format: if
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // tIntegerBits == m then the range of representable values is the half-open
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // interval [-2^m; 2^m) where the open boundary on the right side means that
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // 2^m is not representable (how close the maximum representable value is to
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // it, depends on bit-depth of tRawType).
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // In "Q format notation",
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   https://en.wikipedia.org/wiki/Q_(number_format)
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // we are describing the format
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   Qm.n
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // where
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   m = tIntegerBits
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // and
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   n = NumberOfBits(tRawType) - (m + 1)
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Note that the (m + 1) in the above line is because we adopt the convention
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // that we count the integer bits exclusively of the sign bit; so (m + 1) is
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // the total number of integer bits inclusive of the sign bit.
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Accordingly, the number of integral representable values in our range
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //   [-2^m ; 2^m)
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // is equal to 2^(m+1).
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** class FixedPoint {
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****  public:
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef tRawType RawType;
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPointRawTypeTraits<RawType> RawTypeTraits;
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef typename RawTypeTraits::ScalarRawType ScalarRawType;
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kTotalBits = 8 * sizeof(ScalarRawType);
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kIntegerBits = tIntegerBits;
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kFractionalBits = kTotalBits - 1 - kIntegerBits;
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static_assert(kIntegerBits >= 0 && kIntegerBits < kTotalBits,
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                 "bad IntegerBits");
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<ScalarRawType, kIntegerBits> ScalarFixedPointType;
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static const ScalarRawType ScalarRawMin() {
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return std::numeric_limits<ScalarRawType>::min();
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static const ScalarRawType ScalarRawMax() {
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return std::numeric_limits<ScalarRawType>::max();
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static const ScalarRawType RawMin() {
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return VectorFromScalar(ScalarRawMin());
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static const ScalarRawType RawMax() {
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return VectorFromScalar(ScalarRawMax());
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static FixedPoint FromRaw(RawType x) {
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint retval;
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     retval.raw() = x;
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return retval;
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static FixedPoint FromScalarRaw(ScalarRawType x) {
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint retval;
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     retval.raw() = Dup<RawType>(x);
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return retval;
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static FixedPoint FromScalarFixedPoint(ScalarFixedPointType x) {
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FromScalarRaw(x.raw());
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   template <int Exponent>
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static FixedPoint ConstantPOT() {
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     static constexpr int kOffset = kFractionalBits + Exponent;
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     static_assert(
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         kOffset < 31,
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         "Constant not exactly representable in this fixed-point format");
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FromScalarRaw(ScalarRawType(1) << kOffset);
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static FixedPoint Zero() { return FromScalarRaw(0); }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static FixedPoint One() {
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FromScalarRaw(
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         kIntegerBits == 0
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****             ? ScalarRawMax()
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****             : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static FixedPoint FromDouble(double x) {
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const double min_bound = static_cast<double>(ScalarRawMin());
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const double max_bound = static_cast<double>(ScalarRawMax());
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FromScalarRaw(static_cast<ScalarRawType>(std::min(
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         std::max(round(x * static_cast<double>(1ll << kFractionalBits)),
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                  min_bound),
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         max_bound)));
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   RawType raw() const { return i_; }
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   RawType& raw() { return i_; }
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****  private:
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   RawType i_;
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** };
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Part 3: implementation of arithmetic operators for the
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // FixedPoint class, and a few related functions.
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // A FixedPoint multiplication is just a
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // SaturatingRoundingDoublingHighMul operation on the underlying
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // raw integer values. The IntegerBits simply add up, as is obvious
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits_a> a,
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits_b> b) {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return c;
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Tweaking IntegerBits gives exact multiplication by a power of two.
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int tExponent, typename tRawType, int tIntegerBits>
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a) {
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   FixedPoint<tRawType, tExponent + tIntegerBits> c;
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   c.raw() = a.raw();
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return c;
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // If we want to leave IntegerBits fixed, then multiplication
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // by a power of two has to be saturating/rounding, not exact anymore.
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int tExponent, typename tRawType, int tIntegerBits>
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a) {
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Generic arithmetic operators.
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define MAKE_FIXEDPOINT_UNARY_FUNC(FuncName, ImplFuncName)                     \
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   template <typename tRawType, int tIntegerBits>                               \
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   FixedPoint<tRawType, tIntegerBits> FuncName(                                 \
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       FixedPoint<tRawType, tIntegerBits> a) {                                  \
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FixedPoint<tRawType, tIntegerBits>::FromRaw(ImplFuncName(a.raw())); \
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define MAKE_FIXEDPOINT_BINARY_FUNC(FuncName, ImplFuncName) \
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   template <typename tRawType, int tIntegerBits>            \
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   FixedPoint<tRawType, tIntegerBits> FuncName(              \
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       FixedPoint<tRawType, tIntegerBits> a,                 \
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       FixedPoint<tRawType, tIntegerBits> b) {               \
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FixedPoint<tRawType, tIntegerBits>::FromRaw(     \
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         ImplFuncName(a.raw(), b.raw()));                    \
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_UNARY_FUNC(operator-, Neg)
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_UNARY_FUNC(operator~, BitNot)
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC(operator^, BitXor)
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC(operator|, BitOr)
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #undef MAKE_FIXEDPOINT_UNARY_FUNC
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #undef MAKE_FIXEDPOINT_BINARY_FUNC
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(FuncName)  \
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   template <typename tRawType, int tIntegerBits>            \
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   tRawType FuncName(FixedPoint<tRawType, tIntegerBits> a) { \
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FuncName(a.raw());                               \
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW(FuncName) \
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   template <typename tRawType, int tIntegerBits>            \
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   tRawType FuncName(FixedPoint<tRawType, tIntegerBits> a,   \
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                     FixedPoint<tRawType, tIntegerBits> b) { \
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     return FuncName(a.raw(), b.raw());                      \
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfNonZero)
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW(MaskIfEqual)
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW(MaskIfNotEqual)
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW(MaskIfGreaterThan)
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW(MaskIfGreaterThanOrEqual)
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW(MaskIfLessThan)
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW(MaskIfLessThanOrEqual)
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #undef MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #undef MAKE_FIXEDPOINT_BINARY_FUNC_RETURNING_RAW
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     tRawType if_mask, FixedPoint<tRawType, tIntegerBits> then_val,
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> else_val) {
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** bool operator==(FixedPoint<tRawType, tIntegerBits> a,
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                 FixedPoint<tRawType, tIntegerBits> b) {
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return All(MaskIfEqual(a.raw(), b.raw()));
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** bool operator!=(FixedPoint<tRawType, tIntegerBits> a,
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                 FixedPoint<tRawType, tIntegerBits> b) {
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return !(a == b);
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, tIntegerBits> SaturatingAdd(
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a,
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> b) {
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       SaturatingAdd(a.raw(), b.raw()));
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a,
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> b) {
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       AddSaturatingIf16Bit(a.raw(), b.raw()));
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Conversion to floating-point.
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** double ToDouble(FixedPoint<tRawType, tIntegerBits> x) {
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static_assert(FixedPointRawTypeTraits<tRawType>::kLanes == 1,
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                 "not applicable to SIMD types");
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, tIntegerBits> F;
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return x.raw() / static_cast<double>(1ll << F::kFractionalBits);
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Rescale changes the number of IntegerBits and updates the underlying
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // raw integer value accordingly.
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <int tIntegerBitsDst, typename tRawType, int tIntegerBitsSrc>
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBitsSrc> x) {
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kExponent = tIntegerBitsSrc - tIntegerBitsDst;
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   FixedPoint<tRawType, tIntegerBitsDst> result;
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return result;
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // CheckedFixedPointConstant allows to specify fixed-point constants
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // initialized as real numbers, in a way that does not compile floating-point
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // arithmetic in production code, yet still checks agreement with the
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // floating-point expressions when asserts are enabled.
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** //
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // The raw integer value provided is always a int32, encoding a 32-bit
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // fixed-point value, regardless of the actual Scalar type. This allows
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // writing generic code that applies just as well to the 32-bit and 16-bit
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // cases. In the 16-bit case, the raw integer value is internally
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // rounding-shifted by 16 bits to the right.
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename FixedPointType>
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     std::int32_t int32_value) {
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef typename FixedPointType::ScalarRawType ScalarRawType;
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<ScalarRawType>(
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #ifdef GEMMLOWP_ENABLE_FIXEDPOINT_CONSTANTS_CHECKS
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename FixedPointType>
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPointType CheckedFixedPointConstant(std::int32_t raw_value,
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                          double double_value) {
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const FixedPointType result = FixedPointType::FromScalarRaw(raw_value);
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   assert(result == FixedPointType::FromDouble(double_value));
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return result;
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(FixedPointType,                   \
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                              ScalarRawInt32Value, DoubleValue) \
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   (gemmlowp::CheckedFixedPointConstant<FixedPointType>(                        \
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       gemmlowp::RescaleConstantInitializer<FixedPointType>(                    \
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****           ScalarRawInt32Value),                                                \
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       DoubleValue))
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #else
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(FixedPointType,                   \
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                              ScalarRawInt32Value, DoubleValue) \
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   (FixedPointType::FromScalarRaw(                                              \
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       gemmlowp::RescaleConstantInitializer<FixedPointType>(                    \
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****           ScalarRawInt32Value)))
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #endif
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Implementation of exponential function.
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns exp(x) for x in [-1/4, 0).
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType>
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, 0> a) {
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, 0> F;
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const F constant_term =
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const F constant_1_over_3 =
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // We're evaluating a Taylor expansion around -1/8, so we do the change of
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // variable: x = a + 1/8.
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // In fixed-point with 0 integer bits, 1/8 is represented by 1 << 28.
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F x = a + F::template ConstantPOT<-3>();
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F x2 = x * x;
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F x3 = x2 * x;
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F x4 = x2 * x2;
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F x4_over_24_plus_x3_over_6_plus_x2_over_2 =
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       SaturatingRoundingMultiplyByPOT<-1>(
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****           ((x4_over_4 + x3) * constant_1_over_3) + x2);
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return AddSaturatingIf16Bit(
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       constant_term,
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       constant_term * (x + x4_over_24_plus_x3_over_6_plus_x2_over_2));
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns exp(x) for x < 0.
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, 0> exp_on_negative_values(
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a) {
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, tIntegerBits> InputF;
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, 0> ResultF;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kFractionalBits = InputF::kFractionalBits;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int kIntegerBits = InputF::kIntegerBits;
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       Rescale<0>(a_mod_quarter_minus_one_quarter));
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #define GEMMLOWP_EXP_BARREL_SHIFTER(Exponent, FixedPointMultiplier)         \
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   if (kIntegerBits > Exponent) {                                            \
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const ResultF kMultiplier = GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(       \
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         ResultF, FixedPointMultiplier, std::exp(-std::pow(2.0, Exponent))); \
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     static constexpr int kShiftAmount =                                     \
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         kIntegerBits > Exponent ? kFractionalBits + Exponent : 0;           \
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     result = SelectUsingMask(                                               \
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         MaskIfNonZero(BitAnd(remainder, Dup<tRawType>(1 << kShiftAmount))), \
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         result * kMultiplier, result);                                      \
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // Constants below are Q0 representations of negative exp fractionals:
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);  // exp(-1/4)
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);  // exp(-1/2)
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);   // exp(-1)
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);   // exp(-2)
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);    // exp(-4)
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);      // exp(-8)
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);         // exp(-16)
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** #undef GEMMLOWP_EXP_BARREL_SHIFTER
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   static constexpr int clampB = kIntegerBits > 5 ? 36 - kIntegerBits : 0;
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   if (kIntegerBits > 5) {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     const InputF clamp =
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(InputF, -(1 << clampB), -32.0);
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     result = SelectUsingMask(MaskIfLessThan(a, clamp), ResultF::Zero(), result);
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return result;
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Implementation of tanh: (1 - exp(-2x)) / (1 + exp(-2x)).
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns (1 - x) / (1 + x) for x in (0, 1).
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType>
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, 0> one_minus_x_over_one_plus_x_for_x_in_0_1(
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, 0> a) {
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, 0> F0;
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, 2> F2;
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F0 half_denominator = RoundingHalfSum(a, F0::One());
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // Newton-Raphson division
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // Refer to that page for the logic behind the 48/17 and 32/17 constants.
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const F2 constant_48_over_17 =
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const F2 constant_neg_32_over_17 =
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   for (int i = 0; i < 3; i++) {
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     F2 half_denominator_times_x = half_denominator * x;
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     F2 one_minus_half_denominator_times_x =
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         F2::One() - half_denominator_times_x;
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return Rescale<0>(x - F2::One());
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns -tanh(x) for x < 0.
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, 0> neg_tanh_on_negative_values(
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a) {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return one_minus_x_over_one_plus_x_for_x_in_0_1(
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       exp_on_negative_values(ExactMulByPot<1>(a)));
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns tanh(x) for any x.
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, 0> tanh(FixedPoint<tRawType, tIntegerBits> a) {
 840:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, tIntegerBits> InputF;
 841:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, 0> ResultF;
 842:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   tRawType mask_if_negative = MaskIfLessThan(a, InputF::Zero());
 843:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   tRawType mask_if_zero = MaskIfZero(a);
 844:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   InputF n = SelectUsingMask(mask_if_negative, a, -a);
 845:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   ResultF t = neg_tanh_on_negative_values(n);
 846:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return SelectUsingMask(mask_if_zero, ResultF::Zero(),
 847:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                          SelectUsingMask(mask_if_negative, -t, t));
 848:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 849:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 850:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Implementation of logistic function.
 851:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 852:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns 1 / (1 + x) for x in (0, 1).
 853:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType>
 854:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 273                             		.loc 3 854 25 is_stmt 1
 274                             	.LVL34:
 275 0000 6E 7B                   		pushm	r7-r11
 276                             	.LCFI2:
 277                             	.LVL35:
 278                             	.LBB1241:
 279                             	.LBB1242:
 280                             	.LBB1243:
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b64 = b;
 281                             		.loc 3 238 3
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b64 = b;
 282                             		.loc 3 238 16 is_stmt 0
 283 0002 FD BF 1F                		shar	#31, r1, r15
 284                             	.LVL36:
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t sum = a64 + b64;
 285                             		.loc 3 239 3 is_stmt 1
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t sign = sum >= 0 ? 1 : -1;
 286                             		.loc 3 240 3
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<std::int32_t>((sum + sign) / 2);
 287                             		.loc 3 241 3
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<std::int32_t>((sum + sign) / 2);
 288                             		.loc 3 241 32 is_stmt 0
 289 0005 74 01 00 00 00 80       		cmp	#-2147483648, r1
 290 000b 3A F6 03                		beq	.L94
 291                             		.balign 8,3,1
 292                             	.L79:
 293                             	.LVL37:
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 294                             		.loc 3 242 3 is_stmt 1
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 295                             		.loc 3 242 41 is_stmt 0
 296 000e EF FE                   		mov.L	r15, r14
 297 0010 70 15 00 00 00 80       		add	#-2147483648, r1, r5
 298 0016 FD 74 2E 00             		adc	#0, r14
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 299                             		.loc 3 242 49
 300 001a FD DF EA                		shll	#31, r14, r10
 301 001d FD 81 5F                		shlr	#1, r5, r15
 302                             	.LVL38:
 303 0020 6A 1E                   		shar	#1, r14
 304 0022 57 AF                   		or	r10, r15
 305                             	.LVL39:
 306                             	.LBE1243:
 307                             	.LBE1242:
 308                             	.LBE1241:
 309                             	.LBB1248:
 310                             	.LBB1249:
 311                             	.LBB1250:
 312                             	.LBB1251:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 313                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 314                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 315                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 316                             		.loc 3 345 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 317                             		.loc 3 345 16 is_stmt 0
 318 0024 FB A2 C4 C3 C3 C3       		mov.L	#-1010580540, r10
 319 002a 4F EA                   		mul	r14, r10
 320 002c FB 42 C4 C3 C3 C3       		mov.L	#-1010580540, r4
 321 0032 FC 1F F4                		emulu	r15, r4
 322 0035 43 FA                   		sub	r15, r10
 323 0037 4B A5                   		add	r10, r5
 324                             	.LVL40:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 325                             		.loc 3 346 3 is_stmt 1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 326                             		.loc 3 346 35 is_stmt 0
 327 0039 FF 5A 54                		or	r5, r4, r10
 328 003c 61 0A                   		cmp	#0, r10
 329 003e FB 32 01 00 00 C0       		mov.L	#-1073741823, r3
 330 0044 FD 70 E3 00 00 00 40    		stz	#0x40000000, r3
 331 004b FB A6 FF                		mov.L	#-1, r10
 332 004e FD 74 EA 00             		stz	#0, r10
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 333                             		.loc 3 347 3 is_stmt 1
 334                             	.LVL41:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 335                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 336                             		.loc 3 348 49 is_stmt 0
 337 0052 FF 22 43                		add	r4, r3, r2
 338 0055 FC 0B 5A                		adc	r5, r10
 339                             	.LVL42:
 340 0058 26 05 38 EF 02          		bn	.L95
 341                             		.balign 8,3,1
 342                             	.L64:
 343 005d 6C 1A                   		shll	#1, r10
 344 005f 69 F2                   		shlr	#31, r2
 345 0061 57 A2                   		or	r10, r2
 346                             	.LBE1251:
 347                             	.LBE1250:
 348                             	.LBE1249:
 349                             	.LBE1248:
 350                             	.LBB1255:
 351                             	.LBB1256:
 352                             	.LBB1257:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 353                             		.loc 3 95 14
 354 0063 70 25 5A 5A 5A 5A       		add	#0x5a5a5a5a, r2, r5
 355                             	.LVL43:
 356                             	.LBE1257:
 357                             	.LBE1256:
 358                             	.LBE1255:
 359                             	.LBB1260:
 360                             	.LBB1261:
 361                             	.LBB1262:
 362                             	.LBB1263:
 363                             	.LBB1264:
 364                             	.LBB1265:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 365                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 366                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 367                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 368                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 369                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 370                             		.loc 3 347 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 371                             		.loc 3 349 3
 372                             	.LBE1265:
 373                             	.LBE1264:
 374                             	.LBE1263:
 375                             	.LBE1262:
 376                             	.LBB1281:
 377                             	.LBB1282:
 378                             	.LBB1283:
 379                             	.LBB1284:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 380                             		.loc 3 342 3
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 381                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 382                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 383                             		.loc 3 345 3
 384                             	.LBE1284:
 385                             	.LBE1283:
 386                             	.LBE1282:
 387                             	.LBE1281:
 388                             	.LBB1315:
 389                             	.LBB1276:
 390                             	.LBB1271:
 391                             	.LBB1266:
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 392                             		.loc 3 344 16 is_stmt 0
 393 0069 FD BF 5A                		shar	#31, r5, r10
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 394                             		.loc 3 345 16
 395 006c FF 34 5E                		mul	r5, r14, r4
 396 006f EF 57                   		mov.L	r5, r7
 397 0071 FC 1F F7                		emulu	r15, r7
 398 0074 EF 83                   		mov.L	r8, r3
 399 0076 4F FA                   		mul	r15, r10
 400 0078 4B 4A                   		add	r4, r10
 401 007a 4B A3                   		add	r10, r3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 402                             		.loc 3 348 40
 403 007c 70 7A 00 00 00 40       		add	#0x40000000, r7, r10
 404 0082 FD 74 23 00             		adc	#0, r3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 405                             		.loc 3 348 49
 406 0086 6C 13                   		shll	#1, r3
 407 0088 FD 9F A4                		shlr	#31, r10, r4
 408 008b 57 34                   		or	r3, r4
 409                             	.LBE1266:
 410                             	.LBE1271:
 411                             	.LBE1276:
 412                             	.LBE1315:
 413                             	.LBB1316:
 414                             	.LBB1317:
 415                             	.LBB1318:
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 416                             		.loc 3 107 14
 417 008d FB A2 00 00 00 20       		mov.L	#0x20000000, r10
 418 0093 43 4A                   		sub	r4, r10
 419                             	.LBE1318:
 420                             	.LBE1317:
 421                             	.LBE1316:
 422                             	.LBB1323:
 423                             	.LBB1305:
 424                             	.LBB1295:
 425                             	.LBB1285:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 426                             		.loc 3 345 16
 427 0095 FC 1B 5A                		emul	r5, r10
 428                             	.LVL44:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 429                             		.loc 3 346 3 is_stmt 1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 430                             		.loc 3 346 35 is_stmt 0
 431 0098 71 B1 00                		add	#0, r11, r1
 432                             	.LVL45:
 433 009b 28 05 38 49 02          		blt	.L90
 434                             	.LVL46:
 435                             		.balign 8,3,1
 436                             	.L22:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 437                             		.loc 3 347 3 is_stmt 1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 438                             		.loc 3 348 40 is_stmt 0
 439 00a0 EF B7                   		mov.L	r11, r7
 440 00a2 70 A4 00 00 00 40       		add	#0x40000000, r10, r4
 441 00a8 FD 74 27 00             		adc	#0, r7
 442 00ac EF 7A                   		mov.L	r7, r10
 443                             	.LVL47:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 444                             		.loc 3 348 49
 445 00ae 6C 1A                   		shll	#1, r10
 446 00b0 69 F4                   		shlr	#31, r4
 447 00b2 57 A4                   		or	r10, r4
 448                             	.LVL48:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 449                             		.loc 3 349 3 is_stmt 1
 450                             	.LBE1285:
 451                             	.LBE1295:
 452                             	.LBE1305:
 453                             	.LBE1323:
 454                             	.LBB1324:
 455                             	.LBB1325:
 456                             	.LBB1326:
 457                             	.LBB1327:
 458                             	.LBB1328:
 459                             	.LBB1329:
 460                             	.LBB1330:
 461                             	.LBB1331:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 462                             		.loc 3 159 12 is_stmt 0
 463 00b4 74 04 01 00 00 E0       		cmp	#-536870911, r4
 464 00ba FC DB A9                		sclt.L	r10
 465 00bd FC 07 A2                		neg	r10, r2
 466 00c0 FD C2 43                		shll	#2, r4, r3
 467                             	.LVL49:
 468 00c3 74 22 00 00 00 80       		and #-2147483648, r2
 469 00c9 60 1A                   		sub	#1, r10
 470                             	.LVL50:
 471                             		.balign 8,3,1
 472                             	.L30:
 473                             	.LBE1331:
 474                             	.LBE1330:
 475                             	.LBE1329:
 476                             	.LBB1342:
 477                             	.LBB1343:
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                   : static_cast<tIntegerType>(wide_shifted);
 478                             		.loc 3 133 35
 479 00cb EF 34                   		mov.L	r3, r4
 480 00cd FC 13 00                		.balign 8,3,4
 481                             	.L28:
 482                             	.LVL51:
 483                             	.LBE1343:
 484                             	.LBE1342:
 485                             	.LBB1351:
 486                             	.LBB1352:
 487                             	.LBB1353:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 488                             		.loc 3 71 14
 489 00d0 FF 43 4A                		and	r4, r10, r3
 490                             	.LBE1353:
 491                             	.LBE1352:
 492                             	.LBB1356:
 493                             	.LBB1357:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 494                             		.loc 3 83 14
 495 00d3 FC 37 23                		xor	r2, r3
 496                             	.LVL52:
 497                             	.LBE1357:
 498                             	.LBE1356:
 499                             	.LBE1351:
 500                             	.LBE1328:
 501                             	.LBE1327:
 502                             	.LBE1326:
 503                             	.LBE1325:
 504                             	.LBE1324:
 505                             	.LBB1419:
 506                             	.LBB1420:
 507                             	.LBB1421:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 508                             		.loc 3 95 14
 509 00d6 FF 22 53                		add	r5, r3, r2
 510                             	.LVL53:
 511                             	.LBE1421:
 512                             	.LBE1420:
 513                             	.LBE1419:
 514                             	.LBB1426:
 515                             	.LBB1277:
 516                             	.LBB1272:
 517                             	.LBB1267:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 518                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 519                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 520                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 521                             		.loc 3 345 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 522                             		.loc 3 344 16 is_stmt 0
 523 00d9 FD BF 2A                		shar	#31, r2, r10
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 524                             		.loc 3 345 16
 525 00dc FF 33 2E                		mul	r2, r14, r3
 526                             	.LVL54:
 527 00df EF 27                   		mov.L	r2, r7
 528 00e1 FC 1F F7                		emulu	r15, r7
 529 00e4 EF 85                   		mov.L	r8, r5
 530 00e6 4F FA                   		mul	r15, r10
 531 00e8 4B 3A                   		add	r3, r10
 532 00ea 4B A5                   		add	r10, r5
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 533                             		.loc 3 346 3 is_stmt 1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 534                             		.loc 3 346 35 is_stmt 0
 535 00ec FB 12 01 00 00 C0       		mov.L	#-1073741823, r1
 536                             	.LVL55:
 537 00f2 27 08                   		bn 1f
 538 00f4 FB 12 00 00 00 40       		mov #0x40000000, r1
 539                             	1:
 540 00fa FB 36 FF                		mov.L	#-1, r3
 541 00fd 27 04                   		bn 1f
 542 00ff 66 03                   		mov #0, r3
 543                             	1:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 544                             		.loc 3 347 3 is_stmt 1
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 545                             		.loc 3 349 3
 546                             	.LVL56:
 547                             	.LBE1267:
 548                             	.LBE1272:
 549                             	.LBE1277:
 550                             	.LBE1426:
 551                             	.LBB1427:
 552                             	.LBB1306:
 553                             	.LBB1296:
 554                             	.LBB1286:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 555                             		.loc 3 342 3
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 556                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 557                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 558                             		.loc 3 345 3
 559                             	.LBE1286:
 560                             	.LBE1296:
 561                             	.LBE1306:
 562                             	.LBE1427:
 563                             	.LBB1428:
 564                             	.LBB1278:
 565                             	.LBB1273:
 566                             	.LBB1268:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 567                             		.loc 3 348 49 is_stmt 0
 568 0101 FF 2A 71                		add	r7, r1, r10
 569 0104 FC 0B 35                		adc	r3, r5
 570 0107 26 0E                   		bpz	.L33
 571 0109 70 A1 FF FF FF 7F       		add	#0x7fffffff, r10, r1
 572 010f FD 74 25 00             		adc	#0, r5
 573 0113 EF 1A                   		mov.L	r1, r10
 574                             		.balign 8,3,1
 575                             	.L33:
 576 0115 6C 15                   		shll	#1, r5
 577 0117 FD 9F A4                		shlr	#31, r10, r4
 578 011a 57 54                   		or	r5, r4
 579                             	.LBE1268:
 580                             	.LBE1273:
 581                             	.LBE1278:
 582                             	.LBE1428:
 583                             	.LBB1429:
 584                             	.LBB1321:
 585                             	.LBB1319:
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 586                             		.loc 3 107 14
 587 011c FB A2 00 00 00 20       		mov.L	#0x20000000, r10
 588 0122 43 4A                   		sub	r4, r10
 589                             	.LBE1319:
 590                             	.LBE1321:
 591                             	.LBE1429:
 592                             	.LBB1430:
 593                             	.LBB1307:
 594                             	.LBB1297:
 595                             	.LBB1287:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 596                             		.loc 3 345 16
 597 0124 FC 1B 2A                		emul	r2, r10
 598                             	.LVL57:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 599                             		.loc 3 346 3 is_stmt 1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 600                             		.loc 3 348 40 is_stmt 0
 601 0127 EF B1                   		mov.L	r11, r1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 602                             		.loc 3 346 35
 603 0129 61 0B                   		cmp	#0, r11
 604 012b 28 05 38 73 02          		blt	.L96
 605                             	.LVL58:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 606                             		.loc 3 347 3 is_stmt 1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 607                             		.loc 3 348 40 is_stmt 0
 608 0130 70 A4 00 00 00 40       		add	#0x40000000, r10, r4
 609 0136 FD 74 21 00             		adc	#0, r1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 610                             		.loc 3 348 49
 611 013a FD C1 1A                		shll	#1, r1, r10
 612                             	.LVL59:
 613 013d 69 F4                   		shlr	#31, r4
 614 013f 57 A4                   		or	r10, r4
 615 0141 6B F1                   		shar	#31, r1
 616                             	.LVL60:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 617                             		.loc 3 349 3 is_stmt 1
 618 0143 FF 25 44                		add	r4, r4, r5
 619 0146 FC 0B 11                		adc	r1, r1
 620 0149 FF 2A 55                		add	r5, r5, r10
 621 014c FC 0B 11                		adc	r1, r1
 622                             	.LBE1287:
 623                             	.LBE1297:
 624                             	.LBE1307:
 625                             	.LBE1430:
 626                             	.LBB1431:
 627                             	.LBB1411:
 628                             	.LBB1403:
 629                             	.LBB1395:
 630                             	.LBB1387:
 631                             	.LBB1364:
 632                             	.LBB1365:
 633                             	.LBB1366:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 634                             		.loc 3 159 12 is_stmt 0
 635 014f 74 04 FF FF FF 1F       		cmp	#0x1fffffff, r4
 636 0155 2B 05 38 EA 02          		bgt	.L97
 637                             	.LVL61:
 638                             	.LBE1366:
 639                             	.LBE1365:
 640                             	.LBE1364:
 641                             	.LBB1371:
 642                             	.LBB1337:
 643                             	.LBB1332:
 644 015a 74 04 01 00 00 E0       		cmp	#-536870911, r4
 645 0160 FC DB 49                		sclt.L	r4
 646                             	.LVL62:
 647 0163 FC 07 45                		neg	r4, r5
 648 0166 60 14                   		sub	#1, r4
 649                             	.LVL63:
 650 0168 FB 32 00 00 00 80       		mov.L	#-2147483648, r3
 651 016e 53 53                   		and	r5, r3
 652                             	.LVL64:
 653                             		.balign 8,3,2
 654                             	.L92:
 655 0170 FB B6 FF                		mov.L	#-1, r11
 656 0173 66 05                   		mov.L	#0, r5
 657                             	.LVL65:
 658                             		.balign 8,3,1
 659                             	.L43:
 660                             	.LBE1332:
 661                             	.LBE1337:
 662                             	.LBE1371:
 663                             	.LBB1372:
 664                             	.LBB1344:
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                   : static_cast<tIntegerType>(wide_shifted);
 665                             		.loc 3 133 35
 666 0175 61 01                   		cmp	#0, r1
 667 0177 2B 05 38 EF 01          		bgt	.L41
 668 017c 3A DC 01                		beq	.L98
 669 017f 03                      		.balign 8,3,1
 670                             	.L81:
 671 0180 53 BA                   		and	r11, r10
 672 0182 FC 37 A5                		xor	r10, r5
 673                             		.balign 8,3,1
 674                             	.L39:
 675                             	.LVL66:
 676                             	.LBE1344:
 677                             	.LBE1372:
 678                             	.LBB1373:
 679                             	.LBB1360:
 680                             	.LBB1354:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 681                             		.loc 3 71 14
 682 0185 53 45                   		and	r4, r5
 683                             	.LVL67:
 684                             	.LBE1354:
 685                             	.LBE1360:
 686                             	.LBB1361:
 687                             	.LBB1358:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 688                             		.loc 3 83 14
 689 0187 FC 37 35                		xor	r3, r5
 690                             	.LVL68:
 691                             	.LBE1358:
 692                             	.LBE1361:
 693                             	.LBE1373:
 694                             	.LBE1387:
 695                             	.LBE1395:
 696                             	.LBE1403:
 697                             	.LBE1411:
 698                             	.LBE1431:
 699                             	.LBB1432:
 700                             	.LBB1424:
 701                             	.LBB1422:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 702                             		.loc 3 95 14
 703 018a FF 23 25                		add	r2, r5, r3
 704                             	.LVL69:
 705                             	.LBE1422:
 706                             	.LBE1424:
 707                             	.LBE1432:
 708                             	.LBB1433:
 709                             	.LBB1279:
 710                             	.LBB1274:
 711                             	.LBB1269:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 712                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 713                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 714                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 715                             		.loc 3 345 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 716                             		.loc 3 344 16 is_stmt 0
 717 018d FD BF 35                		shar	#31, r3, r5
 718                             	.LVL70:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 719                             		.loc 3 345 16
 720 0190 4F 3E                   		mul	r3, r14
 721                             	.LVL71:
 722 0192 EF 31                   		mov.L	r3, r1
 723 0194 FC 1F F1                		emulu	r15, r1
 724 0197 EF 2B                   		mov.L	r2, r11
 725 0199 4F 5F                   		mul	r5, r15
 726 019b 4B FE                   		add	r15, r14
 727 019d 4B EB                   		add	r14, r11
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 728                             		.loc 3 346 3 is_stmt 1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 729                             		.loc 3 346 35 is_stmt 0
 730 019f FB 42 01 00 00 C0       		mov.L	#-1073741823, r4
 731 01a5 27 08                   		bn 1f
 732 01a7 FB 42 00 00 00 40       		mov #0x40000000, r4
 733                             	1:
 734 01ad FB 56 FF                		mov.L	#-1, r5
 735 01b0 27 04                   		bn 1f
 736 01b2 66 05                   		mov #0, r5
 737                             	1:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 738                             		.loc 3 347 3 is_stmt 1
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 739                             		.loc 3 349 3
 740                             	.LVL72:
 741                             	.LBE1269:
 742                             	.LBE1274:
 743                             	.LBE1279:
 744                             	.LBE1433:
 745                             	.LBB1434:
 746                             	.LBB1308:
 747                             	.LBB1298:
 748                             	.LBB1288:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 749                             		.loc 3 342 3
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 750                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 751                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 752                             		.loc 3 345 3
 753                             	.LBE1288:
 754                             	.LBE1298:
 755                             	.LBE1308:
 756                             	.LBE1434:
 757                             	.LBB1435:
 758                             	.LBB1280:
 759                             	.LBB1275:
 760                             	.LBB1270:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 761                             		.loc 3 348 49 is_stmt 0
 762 01b4 EF B7                   		mov.L	r11, r7
 763 01b6 FF 2E 14                		add	r1, r4, r14
 764 01b9 FC 0B 57                		adc	r5, r7
 765 01bc EF 7A                   		mov.L	r7, r10
 766 01be 26 0E                   		bpz	.L47
 767 01c0 70 E2 FF FF FF 7F       		add	#0x7fffffff, r14, r2
 768 01c6 FD 74 2A 00             		adc	#0, r10
 769 01ca EF 2E                   		mov.L	r2, r14
 770                             		.balign 8,3,1
 771                             	.L47:
 772 01cc 6C 1A                   		shll	#1, r10
 773 01ce FD 9F E5                		shlr	#31, r14, r5
 774 01d1 57 A5                   		or	r10, r5
 775                             	.LBE1270:
 776                             	.LBE1275:
 777                             	.LBE1280:
 778                             	.LBE1435:
 779                             	.LBB1436:
 780                             	.LBB1322:
 781                             	.LBB1320:
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 782                             		.loc 3 107 14
 783 01d3 FB E2 00 00 00 20       		mov.L	#0x20000000, r14
 784 01d9 43 5E                   		sub	r5, r14
 785                             	.LBE1320:
 786                             	.LBE1322:
 787                             	.LBE1436:
 788                             	.LBB1437:
 789                             	.LBB1309:
 790                             	.LBB1299:
 791                             	.LBB1289:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 792                             		.loc 3 345 16
 793 01db FC 1B 3E                		emul	r3, r14
 794                             	.LVL73:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 795                             		.loc 3 346 3 is_stmt 1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 796                             		.loc 3 346 35 is_stmt 0
 797 01de 71 F2 00                		add	#0, r15, r2
 798 01e1 28 5F                   		bge	.L49
 799                             	.LVL74:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800                             		.loc 3 347 3 is_stmt 1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801                             		.loc 3 348 49 is_stmt 0
 802 01e3 70 EA 01 00 00 C0       		add	#-1073741823, r14, r10
 803 01e9 FD 74 22 FF             		adc	#-1, r2
 804 01ed 26 0E                   		bpz	.L51
 805 01ef 70 A7 FF FF FF 7F       		add	#0x7fffffff, r10, r7
 806 01f5 FD 74 22 00             		adc	#0, r2
 807 01f9 EF 7A                   		mov.L	r7, r10
 808                             		.balign 8,3,2
 809                             	.L51:
 810 01fb FD C1 25                		shll	#1, r2, r5
 811 01fe 69 FA                   		shlr	#31, r10
 812 0200 57 5A                   		or	r5, r10
 813 0202 6B F2                   		shar	#31, r2
 814                             	.LVL75:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 815                             		.loc 3 349 3 is_stmt 1
 816                             	.LBE1289:
 817                             	.LBE1299:
 818                             	.LBE1309:
 819                             	.LBE1437:
 820                             	.LBB1438:
 821                             	.LBB1412:
 822                             	.LBB1404:
 823                             	.LBB1396:
 824                             	.LBB1388:
 825                             	.LBB1374:
 826                             	.LBB1338:
 827                             	.LBB1333:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 828                             		.loc 3 159 12 is_stmt 0
 829 0204 74 0A 01 00 00 E0       		cmp	#-536870911, r10
 830 020a FC DB 49                		sclt.L	r4
 831 020d FF 25 AA                		add	r10, r10, r5
 832 0210 FC 0B 22                		adc	r2, r2
 833 0213 FF 2B 55                		add	r5, r5, r11
 834 0216 FC 0B 22                		adc	r2, r2
 835                             	.LVL76:
 836 0219 FC 07 45                		neg	r4, r5
 837 021c 60 14                   		sub	#1, r4
 838                             	.LVL77:
 839 021e FB A2 00 00 00 80       		mov.L	#-2147483648, r10
 840                             	.LVL78:
 841 0224 53 5A                   		and	r5, r10
 842                             	.LBE1333:
 843                             	.LBE1338:
 844                             	.LBE1374:
 845                             	.LBB1375:
 846                             	.LBB1345:
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              : wide_shifted > max ? max
 847                             		.loc 3 132 14
 848 0226 75 02 FF                		cmp	#-1, r2
 849 0229 29 0F                   		blt	.L75
 850 022b 21 55                   		bne	.L93
 851 022d 74 0B 00 00 00 80       		cmp	#-2147483648, r11
 852 0233 22 4D                   		bgeu	.L93
 853 0235 FC 13 00                		.balign 8,3,5
 854                             	.L75:
 855 0238 FB 52 00 00 00 80       		mov.L	#-2147483648, r5
 856 023e 2E 57                   		bra	.L53
 857                             	.LVL79:
 858                             	.L49:
 859                             	.LBE1345:
 860                             	.LBE1375:
 861                             	.LBE1388:
 862                             	.LBE1396:
 863                             	.LBE1404:
 864                             	.LBE1412:
 865                             	.LBE1438:
 866                             	.LBB1439:
 867                             	.LBB1310:
 868                             	.LBB1300:
 869                             	.LBB1290:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 870                             		.loc 3 347 3 is_stmt 1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 871                             		.loc 3 348 40 is_stmt 0
 872 0240 70 E4 00 00 00 40       		add	#0x40000000, r14, r4
 873 0246 FD 74 22 00             		adc	#0, r2
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 874                             		.loc 3 348 49
 875 024a FD C1 2A                		shll	#1, r2, r10
 876 024d 69 F4                   		shlr	#31, r4
 877 024f 57 A4                   		or	r10, r4
 878 0251 6B F2                   		shar	#31, r2
 879                             	.LVL80:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 880                             		.loc 3 349 3 is_stmt 1
 881 0253 FF 2A 44                		add	r4, r4, r10
 882 0256 FC 0B 22                		adc	r2, r2
 883 0259 FF 2B AA                		add	r10, r10, r11
 884 025c FC 0B 22                		adc	r2, r2
 885                             	.LBE1290:
 886                             	.LBE1300:
 887                             	.LBE1310:
 888                             	.LBE1439:
 889                             	.LBB1440:
 890                             	.LBB1413:
 891                             	.LBB1405:
 892                             	.LBB1397:
 893                             	.LBB1389:
 894                             	.LBB1376:
 895                             	.LBB1369:
 896                             	.LBB1367:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 897                             		.loc 3 159 12 is_stmt 0
 898 025f 74 04 FF FF FF 1F       		cmp	#0x1fffffff, r4
 899 0265 2B 05 38 EA 01          		bgt	.L99
 900                             	.LVL81:
 901                             	.LBE1367:
 902                             	.LBE1369:
 903                             	.LBE1376:
 904                             	.LBB1377:
 905                             	.LBB1339:
 906                             	.LBB1334:
 907 026a 74 04 01 00 00 E0       		cmp	#-536870911, r4
 908 0270 FC DB 49                		sclt.L	r4
 909                             	.LVL82:
 910 0273 FC 07 45                		neg	r4, r5
 911 0276 60 14                   		sub	#1, r4
 912                             	.LVL83:
 913 0278 FB A2 00 00 00 80       		mov.L	#-2147483648, r10
 914 027e 53 5A                   		and	r5, r10
 915                             	.LVL84:
 916                             		.balign 8,3,2
 917                             	.L93:
 918 0280 FB 16 FF                		mov.L	#-1, r1
 919 0283 66 05                   		mov.L	#0, r5
 920                             	.LVL85:
 921                             		.balign 8,3,1
 922                             	.L57:
 923                             	.LBE1334:
 924                             	.LBE1339:
 925                             	.LBE1377:
 926                             	.LBB1378:
 927                             	.LBB1346:
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                   : static_cast<tIntegerType>(wide_shifted);
 928                             		.loc 3 133 35
 929 0285 61 02                   		cmp	#0, r2
 930 0287 2B 05 38 0F 01          		bgt	.L55
 931 028c 3A FD 00                		beq	.L100
 932 028f 03                      		.balign 8,3,1
 933                             	.L83:
 934 0290 53 B1                   		and	r11, r1
 935 0292 FC 37 15                		xor	r1, r5
 936                             		.balign 8,3,1
 937                             	.L53:
 938                             	.LVL86:
 939                             	.LBE1346:
 940                             	.LBE1378:
 941                             	.LBB1379:
 942                             	.LBB1362:
 943                             	.LBB1355:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 944                             		.loc 3 71 14
 945 0295 53 45                   		and	r4, r5
 946                             	.LVL87:
 947                             	.LBE1355:
 948                             	.LBE1362:
 949                             	.LBB1363:
 950                             	.LBB1359:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 951                             		.loc 3 83 14
 952 0297 FC 37 A5                		xor	r10, r5
 953                             	.LVL88:
 954                             	.LBE1359:
 955                             	.LBE1363:
 956                             	.LBE1379:
 957                             	.LBE1389:
 958                             	.LBE1397:
 959                             	.LBE1405:
 960                             	.LBE1413:
 961                             	.LBE1440:
 962                             	.LBB1441:
 963                             	.LBB1425:
 964                             	.LBB1423:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 965                             		.loc 3 95 14
 966 029a 4B 35                   		add	r3, r5
 967                             	.LVL89:
 968 029c FD BF 5A                		shar	#31, r5, r10
 969 029f FF 22 55                		add	r5, r5, r2
 970 02a2 FC 0B AA                		adc	r10, r10
 971                             	.LBE1423:
 972                             	.LBE1425:
 973                             	.LBE1441:
 974                             	.LBE1261:
 975                             	.LBE1260:
 976                             	.LBB1457:
 977                             	.LBB1458:
 978                             	.LBB1459:
 979                             	.LBB1460:
 980                             	.LBB1461:
 981                             	.LBB1462:
 982                             	.LBB1463:
 983                             	.LBB1464:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 984                             		.loc 3 159 12
 985 02a5 74 05 FF FF FF 3F       		cmp	#0x3fffffff, r5
 986 02ab 2B 05 38 75 01          		bgt	.L59
 987                             	.LVL90:
 988                             	.LBE1464:
 989                             	.LBE1463:
 990                             	.LBE1462:
 991                             	.LBB1465:
 992                             	.LBB1466:
 993                             	.LBB1467:
 994 02b0 74 05 01 00 00 C0       		cmp	#-1073741823, r5
 995 02b6 FC DB 59                		sclt.L	r5
 996                             	.LVL91:
 997 02b9 FC 07 53                		neg	r5, r3
 998                             	.LVL92:
 999 02bc 60 15                   		sub	#1, r5
 1000 02be 74 23 00 00 00 80       		and #-2147483648, r3
 1001                             	.LVL93:
 1002                             	.LBE1467:
 1003                             	.LBE1466:
 1004                             	.LBE1465:
 1005                             	.LBB1468:
 1006                             	.LBB1469:
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              : wide_shifted > max ? max
 1007                             		.loc 3 132 14
 1008 02c4 75 0A FF                		cmp	#-1, r10
 1009 02c7 28 05 38 B7 00          		blt	.L84
 1010 02cc 3A A4 00                		beq	.L101
 1011 02cf 03                      		.balign 8,3,2
 1012                             	.L77:
 1013 02d0 FB 46 FF                		mov.L	#-1, r4
 1014 02d3 66 0A                   		mov.L	#0, r10
 1015                             	.LVL94:
 1016 02d5 FC 13 00                		.balign 8,3,4
 1017                             	.L60:
 1018 02d8 FF 41 24                		and	r2, r4, r1
 1019 02db FC 37 A1                		xor	r10, r1
 1020 02de 53 51                   		and	r5, r1
 1021 02e0 FC 37 31                		xor	r3, r1
 1022                             		.balign 8,3,2
 1023                             	.L85:
 1024                             	.LBE1469:
 1025                             	.LBE1468:
 1026                             	.LBE1461:
 1027                             	.LBE1460:
 1028                             	.LBE1459:
 1029                             	.LBE1458:
 1030                             	.LBE1457:
 855:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, 0> a) {
 856:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, 0> F0;
 857:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   typedef FixedPoint<tRawType, 2> F2;
 858:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F0 half_denominator = RoundingHalfSum(a, F0::One());
 859:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // Newton-Raphson division
 860:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
 861:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   // Refer to that page for the logic behind the 48/17 and 32/17 constants.
 862:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const F2 constant_48_over_17 =
 863:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 864:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const F2 constant_neg_32_over_17 =
 865:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 866:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 867:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   for (int i = 0; i < 3; i++) {
 868:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     F2 half_denominator_times_x = half_denominator * x;
 869:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     F2 one_minus_half_denominator_times_x =
 870:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****         F2::One() - half_denominator_times_x;
 871:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 872:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   }
 873:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return Rescale<0>(ExactMulByPot<-1>(x));
 874:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1031                             		.loc 3 874 1
 1032 02e3 3F 7B 05                		rtsd	#20, r7-r11
 1033                             	.LVL95:
 1034                             	.L90:
 1035                             	.LBB1482:
 1036                             	.LBB1451:
 1037                             	.LBB1442:
 1038                             	.LBB1311:
 1039                             	.LBB1301:
 1040                             	.LBB1291:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1041                             		.loc 3 347 3 is_stmt 1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1042                             		.loc 3 348 49 is_stmt 0
 1043 02e6 EF B8                   		mov.L	r11, r8
 1044 02e8 70 A3 01 00 00 C0       		add	#-1073741823, r10, r3
 1045 02ee FD 74 28 FF             		adc	#-1, r8
 1046 02f2 EF 8A                   		mov.L	r8, r10
 1047                             	.LVL96:
 1048 02f4 26 0E                   		bpz	.L26
 1049 02f6 70 34 FF FF FF 7F       		add	#0x7fffffff, r3, r4
 1050                             	.LVL97:
 1051 02fc FD 74 2A 00             		adc	#0, r10
 1052 0300 EF 43                   		mov.L	r4, r3
 1053                             		.balign 8,3,2
 1054                             	.L26:
 1055 0302 FD C1 A4                		shll	#1, r10, r4
 1056 0305 69 F3                   		shlr	#31, r3
 1057 0307 57 43                   		or	r4, r3
 1058 0309 FD BF A4                		shar	#31, r10, r4
 1059                             	.LVL98:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1060                             		.loc 3 349 3 is_stmt 1
 1061                             	.LBE1291:
 1062                             	.LBE1301:
 1063                             	.LBE1311:
 1064                             	.LBE1442:
 1065                             	.LBB1443:
 1066                             	.LBB1414:
 1067                             	.LBB1406:
 1068                             	.LBB1398:
 1069                             	.LBB1390:
 1070                             	.LBB1380:
 1071                             	.LBB1340:
 1072                             	.LBB1335:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1073                             		.loc 3 159 12 is_stmt 0
 1074 030c 74 03 01 00 00 E0       		cmp	#-536870911, r3
 1075 0312 FC DB A9                		sclt.L	r10
 1076 0315 FF 22 33                		add	r3, r3, r2
 1077 0318 FC 0B 44                		adc	r4, r4
 1078 031b FF 23 22                		add	r2, r2, r3
 1079                             	.LVL99:
 1080 031e FC 0B 44                		adc	r4, r4
 1081                             	.LVL100:
 1082 0321 FC 07 A2                		neg	r10, r2
 1083 0324 60 1A                   		sub	#1, r10
 1084                             	.LVL101:
 1085 0326 74 22 00 00 00 80       		and #-2147483648, r2
 1086                             	.LBE1335:
 1087                             	.LBE1340:
 1088                             	.LBE1380:
 1089                             	.LBB1381:
 1090                             	.LBB1347:
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              : wide_shifted > max ? max
 1091                             		.loc 3 132 14
 1092 032c 75 04 FF                		cmp	#-1, r4
 1093 032f 29 11                   		blt	.L70
 1094 0331 3B 9A FD                		bne	.L30
 1095 0334 74 03 00 00 00 80       		cmp	#-2147483648, r3
 1096 033a 23 05 38 8F FD          		bgeu	.L30
 1097 033f 03                      		.balign 8,3,5
 1098                             	.L70:
 1099 0340 FB 42 00 00 00 80       		mov.L	#-2147483648, r4
 1100 0346 38 8A FD                		bra	.L28
 1101                             	.LVL102:
 1102                             	.L95:
 1103                             	.LBE1347:
 1104                             	.LBE1381:
 1105                             	.LBE1390:
 1106                             	.LBE1398:
 1107                             	.LBE1406:
 1108                             	.LBE1414:
 1109                             	.LBE1443:
 1110                             	.LBE1451:
 1111                             	.LBE1482:
 1112                             	.LBB1483:
 1113                             	.LBB1254:
 1114                             	.LBB1253:
 1115                             	.LBB1252:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1116                             		.loc 3 348 49
 1117 0349 70 21 FF FF FF 7F       		add	#0x7fffffff, r2, r1
 1118                             	.LVL103:
 1119 034f FD 74 2A 00             		adc	#0, r10
 1120 0353 EF 12                   		mov.L	r1, r2
 1121 0355 38 08 FD                		bra	.L64
 1122                             	.LVL104:
 1123                             	.L98:
 1124                             	.LBE1252:
 1125                             	.LBE1253:
 1126                             	.LBE1254:
 1127                             	.LBE1483:
 1128                             	.LBB1484:
 1129                             	.LBB1452:
 1130                             	.LBB1444:
 1131                             	.LBB1415:
 1132                             	.LBB1407:
 1133                             	.LBB1399:
 1134                             	.LBB1391:
 1135                             	.LBB1382:
 1136                             	.LBB1348:
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                   : static_cast<tIntegerType>(wide_shifted);
 1137                             		.loc 3 133 35
 1138 0358 74 0A FF FF FF 7F       		cmp	#0x7fffffff, r10
 1139 035e 24 05 38 20 FE          		bleu	.L81
 1140 0363 77 10 01 00 00          		.balign 8,3,5
 1141                             	.L41:
 1142 0368 7B FB                   		bclr #31, r11
 1143 036a FC 37 B5                		xor	r11, r5
 1144 036d 38 18 FE                		bra	.L39
 1145                             	.LVL105:
 1146                             	.L101:
 1147                             	.LBE1348:
 1148                             	.LBE1382:
 1149                             	.LBE1391:
 1150                             	.LBE1399:
 1151                             	.LBE1407:
 1152                             	.LBE1415:
 1153                             	.LBE1444:
 1154                             	.LBE1452:
 1155                             	.LBE1484:
 1156                             	.LBB1485:
 1157                             	.LBB1480:
 1158                             	.LBB1478:
 1159                             	.LBB1476:
 1160                             	.LBB1474:
 1161                             	.LBB1472:
 1162                             	.LBB1470:
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              : wide_shifted > max ? max
 1163                             		.loc 3 132 14
 1164 0370 74 02 00 00 00 80       		cmp	#-2147483648, r2
 1165 0376 23 05 38 58 FF          		bgeu	.L77
 1166 037b 77 10 01 00 00          		.balign 8,3,5
 1167                             	.L84:
 1168 0380 FB 12 00 00 00 80       		mov.L	#-2147483648, r1
 1169                             	.LBE1470:
 1170                             	.LBE1472:
 1171                             	.LBE1474:
 1172                             	.LBE1476:
 1173                             	.LBE1478:
 1174                             	.LBE1480:
 1175                             	.LBE1485:
 1176                             		.loc 3 874 1
 1177 0386 3F 7B 05                		rtsd	#20, r7-r11
 1178                             	.LVL106:
 1179                             	.L100:
 1180                             	.LBB1486:
 1181                             	.LBB1453:
 1182                             	.LBB1445:
 1183                             	.LBB1416:
 1184                             	.LBB1408:
 1185                             	.LBB1400:
 1186                             	.LBB1392:
 1187                             	.LBB1383:
 1188                             	.LBB1349:
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                   : static_cast<tIntegerType>(wide_shifted);
 1189                             		.loc 3 133 35
 1190 0389 74 0B FF FF FF 7F       		cmp	#0x7fffffff, r11
 1191 038f 24 05 38 FF FE          		bleu	.L83
 1192 0394 76 10 01 00             		.balign 8,3,5
 1193                             	.L55:
 1194 0398 7B F1                   		bclr #31, r1
 1195 039a FC 37 15                		xor	r1, r5
 1196 039d 38 F8 FE                		bra	.L53
 1197                             	.LVL107:
 1198                             	.L96:
 1199                             	.LBE1349:
 1200                             	.LBE1383:
 1201                             	.LBE1392:
 1202                             	.LBE1400:
 1203                             	.LBE1408:
 1204                             	.LBE1416:
 1205                             	.LBE1445:
 1206                             	.LBB1446:
 1207                             	.LBB1312:
 1208                             	.LBB1302:
 1209                             	.LBB1292:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1210                             		.loc 3 347 3 is_stmt 1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1211                             		.loc 3 348 49 is_stmt 0
 1212 03a0 70 A5 01 00 00 C0       		add	#-1073741823, r10, r5
 1213 03a6 FD 74 21 FF             		adc	#-1, r1
 1214 03aa 26 0E                   		bpz	.L37
 1215 03ac 70 5A FF FF FF 7F       		add	#0x7fffffff, r5, r10
 1216                             	.LVL108:
 1217 03b2 FD 74 21 00             		adc	#0, r1
 1218 03b6 EF A5                   		mov.L	r10, r5
 1219                             		.balign 8,3,2
 1220                             	.L37:
 1221 03b8 FD C1 14                		shll	#1, r1, r4
 1222                             	.LVL109:
 1223 03bb FD 9F 5A                		shlr	#31, r5, r10
 1224 03be 57 4A                   		or	r4, r10
 1225 03c0 6B F1                   		shar	#31, r1
 1226                             	.LVL110:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1227                             		.loc 3 349 3 is_stmt 1
 1228                             	.LBE1292:
 1229                             	.LBE1302:
 1230                             	.LBE1312:
 1231                             	.LBE1446:
 1232                             	.LBB1447:
 1233                             	.LBB1417:
 1234                             	.LBB1409:
 1235                             	.LBB1401:
 1236                             	.LBB1393:
 1237                             	.LBB1384:
 1238                             	.LBB1341:
 1239                             	.LBB1336:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1240                             		.loc 3 159 12 is_stmt 0
 1241 03c2 74 0A 01 00 00 E0       		cmp	#-536870911, r10
 1242 03c8 FC DB 49                		sclt.L	r4
 1243 03cb FF 25 AA                		add	r10, r10, r5
 1244 03ce FC 0B 11                		adc	r1, r1
 1245 03d1 FF 2A 55                		add	r5, r5, r10
 1246                             	.LVL111:
 1247 03d4 FC 0B 11                		adc	r1, r1
 1248                             	.LVL112:
 1249 03d7 FC 07 45                		neg	r4, r5
 1250 03da 60 14                   		sub	#1, r4
 1251                             	.LVL113:
 1252 03dc FB 32 00 00 00 80       		mov.L	#-2147483648, r3
 1253 03e2 53 53                   		and	r5, r3
 1254                             	.LBE1336:
 1255                             	.LBE1341:
 1256                             	.LBE1384:
 1257                             	.LBB1385:
 1258                             	.LBB1350:
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****              : wide_shifted > max ? max
 1259                             		.loc 3 132 14
 1260 03e4 75 01 FF                		cmp	#-1, r1
 1261 03e7 29 11                   		blt	.L72
 1262 03e9 3B 87 FD                		bne	.L92
 1263 03ec 74 0A 00 00 00 80       		cmp	#-2147483648, r10
 1264 03f2 23 05 38 7C FD          		bgeu	.L92
 1265 03f7 03                      		.balign 8,3,5
 1266                             	.L72:
 1267 03f8 FB 52 00 00 00 80       		mov.L	#-2147483648, r5
 1268 03fe 38 87 FD                		bra	.L39
 1269                             	.LVL114:
 1270                             	.L94:
 1271                             	.LBE1350:
 1272                             	.LBE1385:
 1273                             	.LBE1393:
 1274                             	.LBE1401:
 1275                             	.LBE1409:
 1276                             	.LBE1417:
 1277                             	.LBE1447:
 1278                             	.LBE1453:
 1279                             	.LBE1486:
 1280                             	.LBB1487:
 1281                             	.LBB1246:
 1282                             	.LBB1244:
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return static_cast<std::int32_t>((sum + sign) / 2);
 1283                             		.loc 3 241 32
 1284 0401 75 0F FF                		cmp	#-1, r15
 1285 0404 3B 0A FC                		bne	.L79
 1286                             	.LBE1244:
 1287                             	.LBE1246:
 1288                             	.LBE1487:
 1289                             	.LBB1488:
 1290                             	.LBB1454:
 1291                             	.LBB1448:
 1292                             	.LBB1313:
 1293                             	.LBB1303:
 1294                             	.LBB1293:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1295                             		.loc 3 345 16
 1296 0407 FB 22 5A 5A 5A 9A       		mov.L	#-1705354662, r2
 1297 040d EF 2A                   		mov.L	r2, r10
 1298                             	.LBE1293:
 1299                             	.LBE1303:
 1300                             	.LBE1313:
 1301                             	.LBE1448:
 1302                             	.LBE1454:
 1303                             	.LBE1488:
 1304                             	.LBB1489:
 1305                             	.LBB1247:
 1306                             	.LBB1245:
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1307                             		.loc 3 242 49
 1308 040f EF FE                   		mov.L	r15, r14
 1309                             	.LBE1245:
 1310                             	.LBE1247:
 1311                             	.LBE1489:
 1312                             	.LBB1490:
 1313                             	.LBB1455:
 1314                             	.LBB1449:
 1315                             	.LBB1314:
 1316                             	.LBB1304:
 1317                             	.LBB1294:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1318                             		.loc 3 345 16
 1319 0411 FB 32 4B 4B 4B 0B       		mov.L	#0xb4b4b4b, r3
 1320 0417 EF 3B                   		mov.L	r3, r11
 1321                             	.LBE1294:
 1322                             	.LBE1304:
 1323                             	.LBE1314:
 1324                             	.LBE1449:
 1325                             	.LBE1455:
 1326                             	.LBE1490:
 1327                             	.LBB1491:
 1328                             	.LBB1259:
 1329                             	.LBB1258:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1330                             		.loc 3 95 14
 1331 0419 FB 52 5A 5A 5A 5A       		mov.L	#0x5a5a5a5a, r5
 1332 041f 38 81 FC                		bra	.L22
 1333                             	.LVL115:
 1334                             	.L59:
 1335                             	.LBE1258:
 1336                             	.LBE1259:
 1337                             	.LBE1491:
 1338                             	.LBB1492:
 1339                             	.LBB1481:
 1340                             	.LBB1479:
 1341                             	.LBB1477:
 1342                             	.LBB1475:
 1343                             	.LBB1473:
 1344                             	.LBB1471:
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****                                   : static_cast<tIntegerType>(wide_shifted);
 1345                             		.loc 3 133 35
 1346 0422 70 25 00 00 00 80       		add	#-2147483648, r2, r5
 1347                             	.LVL116:
 1348 0428 FD 74 2A 00             		adc	#0, r10
 1349 042c FB 12 FF FF FF 7F       		mov.L	#0x7fffffff, r1
 1350 0432 3B B1 FE                		bne	.L85
 1351 0435 FB 56 FF                		mov.L	#-1, r5
 1352 0438 66 03                   		mov.L	#0, r3
 1353 043a 66 04                   		mov.L	#0, r4
 1354 043c EF 1A                   		mov.L	r1, r10
 1355 043e 38 9A FE                		bra	.L60
 1356                             	.LVL117:
 1357                             	.L97:
 1358                             	.LBE1471:
 1359                             	.LBE1473:
 1360                             	.LBE1475:
 1361                             	.LBE1477:
 1362                             	.LBE1479:
 1363                             	.LBE1481:
 1364                             	.LBE1492:
 1365                             	.LBB1493:
 1366                             	.LBB1456:
 1367                             	.LBB1450:
 1368                             	.LBB1418:
 1369                             	.LBB1410:
 1370                             	.LBB1402:
 1371                             	.LBB1394:
 1372                             	.LBB1386:
 1373                             	.LBB1370:
 1374                             	.LBB1368:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1375                             		.loc 3 159 12
 1376 0441 FB 46 FF                		mov.L	#-1, r4
 1377                             	.LVL118:
 1378 0444 66 0B                   		mov.L	#0, r11
 1379 0446 FB 52 FF FF FF 7F       		mov.L	#0x7fffffff, r5
 1380 044c 66 03                   		mov.L	#0, r3
 1381 044e 38 27 FD                		bra	.L43
 1382                             	.LVL119:
 1383                             	.L99:
 1384 0451 FB 46 FF                		mov.L	#-1, r4
 1385                             	.LVL120:
 1386 0454 66 01                   		mov.L	#0, r1
 1387 0456 FB 52 FF FF FF 7F       		mov.L	#0x7fffffff, r5
 1388 045c 66 0A                   		mov.L	#0, r10
 1389 045e 38 27 FE                		bra	.L57
 1390                             	.LBE1368:
 1391                             	.LBE1370:
 1392                             	.LBE1386:
 1393                             	.LBE1394:
 1394                             	.LBE1402:
 1395                             	.LBE1410:
 1396                             	.LBE1418:
 1397                             	.LBE1450:
 1398                             	.LBE1456:
 1399                             	.LBE1493:
 1400                             	.LFE2476:
 1402 0461 FD 70 40 00 00 00 80    		.section	.text._ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10Fixed
 1403                             		.weak	__ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_
 1405                             	__ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES
 1406                             	.LFB2750:
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, 0> a) {
 1407                             		.loc 3 732 25 is_stmt 1
 1408                             	.LVL121:
 1409 0000 6E 6B                   		pushm	r6-r11
 1410                             	.LCFI3:
 1411                             	.LVL122:
 1412                             	.LBB1632:
 1413                             	.LBB1633:
 1414                             	.LBB1634:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1415                             		.loc 3 95 14 is_stmt 0
 1416 0002 70 11 00 00 00 10       		add	#0x10000000, r1
 1417                             	.LVL123:
 1418                             	.LBE1634:
 1419                             	.LBE1633:
 1420                             	.LBE1632:
 1421                             	.LBB1635:
 1422                             	.LBB1636:
 1423                             	.LBB1637:
 1424                             	.LBB1638:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 1425                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 1426                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 1427                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1428                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1429                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1430                             		.loc 3 347 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1431                             		.loc 3 345 16 is_stmt 0
 1432 0008 EF 12                   		mov.L	r1, r2
 1433 000a FC 1B 12                		emul	r1, r2
 1434                             	.LVL124:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1435                             		.loc 3 348 49
 1436 000d 70 27 00 00 00 40       		add	#0x40000000, r2, r7
 1437 0013 FD 74 23 00             		adc	#0, r3
 1438 0017 26 0E                   		bpz	.L103
 1439 0019 70 7A FF FF FF 7F       		add	#0x7fffffff, r7, r10
 1440 001f FD 74 23 00             		adc	#0, r3
 1441 0023 EF A7                   		mov.L	r10, r7
 1442                             		.balign 8,3,2
 1443                             	.L103:
 1444 0025 FD C1 34                		shll	#1, r3, r4
 1445 0028 FD 9F 75                		shlr	#31, r7, r5
 1446 002b 57 45                   		or	r4, r5
 1447 002d 6B F3                   		shar	#31, r3
 1448                             	.LVL125:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1449                             		.loc 3 349 3 is_stmt 1
 1450                             	.LBE1638:
 1451                             	.LBE1637:
 1452                             	.LBE1636:
 1453                             	.LBE1635:
 1454                             	.LBB1642:
 1455                             	.LBB1643:
 1456                             	.LBB1644:
 1457                             	.LBB1645:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 1458                             		.loc 3 342 3
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 1459                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 1460                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1461                             		.loc 3 345 3
 1462                             	.LBE1645:
 1463                             	.LBE1644:
 1464                             	.LBE1643:
 1465                             	.LBE1642:
 1466                             	.LBB1664:
 1467                             	.LBB1641:
 1468                             	.LBB1640:
 1469                             	.LBB1639:
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 1470                             		.loc 3 343 16 is_stmt 0
 1471 002f FD BF 14                		shar	#31, r1, r4
 1472                             	.LBE1639:
 1473                             	.LBE1640:
 1474                             	.LBE1641:
 1475                             	.LBE1664:
 1476                             	.LBB1665:
 1477                             	.LBB1666:
 1478                             	.LBB1667:
 1479                             	.LBB1668:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1480                             		.loc 3 345 16
 1481 0032 FF 37 53                		mul	r5, r3, r7
 1482                             	.LBE1668:
 1483                             	.LBE1667:
 1484                             	.LBE1666:
 1485                             	.LBE1665:
 1486                             	.LBB1684:
 1487                             	.LBB1658:
 1488                             	.LBB1652:
 1489                             	.LBB1646:
 1490 0035 4F 54                   		mul	r5, r4
 1491 0037 4F 13                   		mul	r1, r3
 1492                             	.LVL126:
 1493                             	.LBE1646:
 1494                             	.LBE1652:
 1495                             	.LBE1658:
 1496                             	.LBE1684:
 1497                             	.LBB1685:
 1498                             	.LBB1679:
 1499                             	.LBB1674:
 1500                             	.LBB1669:
 1501 0039 FF 22 77                		add	r7, r7, r2
 1502 003c EF 5A                   		mov.L	r5, r10
 1503 003e FC 1F 5A                		emulu	r5, r10
 1504 0041 EF A6                   		mov.L	r10, r6
 1505 0043 EF B7                   		mov.L	r11, r7
 1506                             	.LBE1669:
 1507                             	.LBE1674:
 1508                             	.LBE1679:
 1509                             	.LBE1685:
 1510                             	.LBB1686:
 1511                             	.LBB1659:
 1512                             	.LBB1653:
 1513                             	.LBB1647:
 1514 0045 EF 1A                   		mov.L	r1, r10
 1515 0047 FC 1F 5A                		emulu	r5, r10
 1516 004a EF AE                   		mov.L	r10, r14
 1517 004c EF BF                   		mov.L	r11, r15
 1518 004e 4B 43                   		add	r4, r3
 1519                             	.LBE1647:
 1520                             	.LBE1653:
 1521                             	.LBE1659:
 1522                             	.LBE1686:
 1523                             	.LBB1687:
 1524                             	.LBB1680:
 1525                             	.LBB1675:
 1526                             	.LBB1670:
 1527 0050 4B 27                   		add	r2, r7
 1528                             	.LBE1670:
 1529                             	.LBE1675:
 1530                             	.LBE1680:
 1531                             	.LBE1687:
 1532                             	.LBB1688:
 1533                             	.LBB1660:
 1534                             	.LBB1654:
 1535                             	.LBB1648:
 1536 0052 4B 3F                   		add	r3, r15
 1537                             	.LVL127:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1538                             		.loc 3 346 3 is_stmt 1
 1539                             	.LBE1648:
 1540                             	.LBE1654:
 1541                             	.LBE1660:
 1542                             	.LBE1688:
 1543                             	.LBB1689:
 1544                             	.LBB1681:
 1545                             	.LBB1676:
 1546                             	.LBB1671:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1547                             		.loc 3 348 49 is_stmt 0
 1548 0054 70 63 00 00 00 40       		add	#0x40000000, r6, r3
 1549 005a FD 74 27 00             		adc	#0, r7
 1550                             	.LBE1671:
 1551                             	.LBE1676:
 1552                             	.LBE1681:
 1553                             	.LBE1689:
 1554                             	.LBB1690:
 1555                             	.LBB1661:
 1556                             	.LBB1655:
 1557                             	.LBB1649:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1558                             		.loc 3 346 35
 1559 005e 61 0F                   		cmp	#0, r15
 1560 0060 FB 62 01 00 00 C0       		mov.L	#-1073741823, r6
 1561 0066 29 08                   		blt 1f
 1562 0068 FB 62 00 00 00 40       		mov #0x40000000, r6
 1563                             	1:
 1564 006e FB 46 FF                		mov.L	#-1, r4
 1565 0071 29 04                   		blt 1f
 1566 0073 66 04                   		mov #0, r4
 1567                             	1:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1568                             		.loc 3 347 3 is_stmt 1
 1569                             	.LVL128:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1570                             		.loc 3 349 3
 1571                             	.LBE1649:
 1572                             	.LBE1655:
 1573                             	.LBE1661:
 1574                             	.LBE1690:
 1575                             	.LBB1691:
 1576                             	.LBB1682:
 1577                             	.LBB1677:
 1578                             	.LBB1672:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 1579                             		.loc 3 342 3
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 1580                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 1581                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1582                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1583                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1584                             		.loc 3 347 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1585                             		.loc 3 348 49 is_stmt 0
 1586 0075 61 07                   		cmp	#0, r7
 1587 0077 28 0E                   		bge	.L107
 1588 0079 70 32 FF FF FF 7F       		add	#0x7fffffff, r3, r2
 1589 007f FD 74 27 00             		adc	#0, r7
 1590 0083 EF 23                   		mov.L	r2, r3
 1591                             		.balign 8,3,2
 1592                             	.L107:
 1593 0085 FD C1 72                		shll	#1, r7, r2
 1594 0088 69 F3                   		shlr	#31, r3
 1595                             	.LBE1672:
 1596                             	.LBE1677:
 1597                             	.LBE1682:
 1598                             	.LBE1691:
 1599                             	.LBB1692:
 1600                             	.LBB1662:
 1601                             	.LBB1656:
 1602                             	.LBB1650:
 1603 008a FF 27 6E                		add	r6, r14, r7
 1604 008d FC 0B F4                		adc	r15, r4
 1605                             	.LVL129:
 1606                             	.LBE1650:
 1607                             	.LBE1656:
 1608                             	.LBE1662:
 1609                             	.LBE1692:
 1610                             	.LBB1693:
 1611                             	.LBB1683:
 1612                             	.LBB1678:
 1613                             	.LBB1673:
 1614 0090 57 23                   		or	r2, r3
 1615                             	.LVL130:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1616                             		.loc 3 349 3 is_stmt 1
 1617                             	.LBE1673:
 1618                             	.LBE1678:
 1619                             	.LBE1683:
 1620                             	.LBE1693:
 1621                             	.LBB1694:
 1622                             	.LBB1695:
 1623                             	.LBB1696:
 1624                             	.LBB1697:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 1625                             		.loc 3 342 3
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 1626                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 1627                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1628                             		.loc 3 345 3
 1629                             	.LBE1697:
 1630                             	.LBE1696:
 1631                             	.LBE1695:
 1632                             	.LBE1694:
 1633                             	.LBB1701:
 1634                             	.LBB1702:
 1635                             	.LBB1703:
 1636                             	.LBB1704:
 1637                             	.LBB1705:
 1638                             	.LBB1706:
 1639                             	.LBB1707:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1640                             		.loc 3 95 14 is_stmt 0
 1641 0092 61 03                   		cmp	#0, r3
 1642 0094 66 26                   		mov.L	#2, r6
 1643                             	.LVL131:
 1644 0096 29 04                   		blt 1f
 1645 0098 66 16                   		mov #1, r6
 1646                             	1:
 1647                             	.LBE1707:
 1648                             	.LBE1706:
 1649                             	.LBB1708:
 1650                             	.LBB1709:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1651                             		.loc 3 71 14
 1652 009a 66 32                   		mov.L	#3, r2
 1653 009c 53 32                   		and	r3, r2
 1654                             	.LVL132:
 1655                             	.LBE1709:
 1656                             	.LBE1708:
 1657                             	.LBB1710:
 1658                             	.LBB1711:
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1659                             		.loc 3 142 15
 1660 009e 6A 23                   		shar	#2, r3
 1661                             	.LVL133:
 1662                             	.LBE1711:
 1663                             	.LBE1710:
 1664                             	.LBB1712:
 1665                             	.LBB1713:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1666                             		.loc 3 71 14
 1667 00a0 47 62                   		cmp	r6, r2
 1668 00a2 FC DB 2A                		scgt.L	r2
 1669                             	.LVL134:
 1670                             	.LBE1713:
 1671                             	.LBE1712:
 1672                             	.LBB1714:
 1673                             	.LBB1715:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1674                             		.loc 3 95 14
 1675 00a5 4B 32                   		add	r3, r2
 1676                             	.LBE1715:
 1677                             	.LBE1714:
 1678                             	.LBE1705:
 1679                             	.LBE1704:
 1680                             	.LBE1703:
 1681                             	.LBE1702:
 1682                             	.LBE1701:
 1683                             	.LBB1716:
 1684                             	.LBB1663:
 1685                             	.LBB1657:
 1686                             	.LBB1651:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1687                             		.loc 3 348 49
 1688 00a7 61 04                   		cmp	#0, r4
 1689 00a9 28 0F                   		bge	.L109
 1690 00ab 70 7B FF FF FF 7F       		add	#0x7fffffff, r7, r11
 1691 00b1 FD 74 24 00             		adc	#0, r4
 1692 00b5 EF B7                   		mov.L	r11, r7
 1693 00b7 03                      		.balign 8,3,1
 1694                             	.L109:
 1695 00b8 6C 14                   		shll	#1, r4
 1696 00ba FD 9F 73                		shlr	#31, r7, r3
 1697 00bd 57 43                   		or	r4, r3
 1698                             	.LBE1651:
 1699                             	.LBE1657:
 1700                             	.LBE1663:
 1701                             	.LBE1716:
 1702                             	.LBB1717:
 1703                             	.LBB1718:
 1704                             	.LBB1719:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1705                             		.loc 3 95 14
 1706 00bf 4B 32                   		add	r3, r2
 1707                             	.LBE1719:
 1708                             	.LBE1718:
 1709                             	.LBE1717:
 1710                             	.LBB1720:
 1711                             	.LBB1700:
 1712                             	.LBB1699:
 1713                             	.LBB1698:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1714                             		.loc 3 345 16
 1715 00c1 FD 70 62 AB AA AA 2A    		emul	#0x2aaaaaab, r2
 1716                             	.LVL135:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1717                             		.loc 3 346 3 is_stmt 1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1718                             		.loc 3 346 35 is_stmt 0
 1719 00c8 61 03                   		cmp	#0, r3
 1720 00ca FB 72 01 00 00 C0       		mov.L	#-1073741823, r7
 1721                             	.LVL136:
 1722 00d0 29 08                   		blt 1f
 1723 00d2 FB 72 00 00 00 40       		mov #0x40000000, r7
 1724                             	1:
 1725                             	.LVL137:
 1726 00d8 FB 46 FF                		mov.L	#-1, r4
 1727                             	.LVL138:
 1728 00db 29 04                   		blt 1f
 1729 00dd 66 04                   		mov #0, r4
 1730                             	1:
 1731                             	.LVL139:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1732                             		.loc 3 347 3 is_stmt 1
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1733                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1734                             		.loc 3 348 49 is_stmt 0
 1735 00df FF 2E 72                		add	r7, r2, r14
 1736                             	.LVL140:
 1737 00e2 FC 0B 34                		adc	r3, r4
 1738                             	.LVL141:
 1739 00e5 26 0E                   		bpz	.L118
 1740 00e7 70 E3 FF FF FF 7F       		add	#0x7fffffff, r14, r3
 1741                             	.LVL142:
 1742 00ed FD 74 24 00             		adc	#0, r4
 1743 00f1 EF 3E                   		mov.L	r3, r14
 1744                             		.balign 8,3,1
 1745                             	.L118:
 1746 00f3 6C 14                   		shll	#1, r4
 1747 00f5 FD 9F E3                		shlr	#31, r14, r3
 1748 00f8 57 43                   		or	r4, r3
 1749                             	.LBE1698:
 1750                             	.LBE1699:
 1751                             	.LBE1700:
 1752                             	.LBE1720:
 1753                             	.LBB1721:
 1754                             	.LBB1722:
 1755                             	.LBB1723:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1756                             		.loc 3 95 14
 1757 00fa 4B 35                   		add	r3, r5
 1758                             	.LVL143:
 1759                             	.LBE1723:
 1760                             	.LBE1722:
 1761                             	.LBE1721:
 1762                             	.LBB1724:
 1763                             	.LBB1725:
 1764                             	.LBB1726:
 1765                             	.LBB1727:
 1766                             	.LBB1728:
 1767                             	.LBB1729:
 1768                             	.LBB1730:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1769                             		.loc 3 71 14
 1770 00fc 66 17                   		mov.L	#1, r7
 1771 00fe 53 57                   		and	r5, r7
 1772                             	.LVL144:
 1773 0100 FD A1 54                		shar	#1, r5, r4
 1774                             	.LBE1730:
 1775                             	.LBE1729:
 1776                             	.LBB1731:
 1777                             	.LBB1732:
 1778                             	.LBB1733:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1779                             		.loc 3 159 12
 1780 0103 61 05                   		cmp	#0, r5
 1781 0105 29 04                   		blt	.L120
 1782                             	.LVL145:
 1783 0107 4B 74                   		add	r7, r4
 1784                             	.LVL146:
 1785                             		.balign 8,3,1
 1786                             	.L120:
 1787                             	.LBE1733:
 1788                             	.LBE1732:
 1789                             	.LBE1731:
 1790                             	.LBE1728:
 1791                             	.LBE1727:
 1792                             	.LBE1726:
 1793                             	.LBE1725:
 1794                             	.LBE1724:
 1795                             	.LBB1734:
 1796                             	.LBB1735:
 1797                             	.LBB1736:
 1798                             	.LBB1737:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 1799                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 1800                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 1801                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1802                             		.loc 3 345 3
 1803                             	.LBE1737:
 1804                             	.LBE1736:
 1805                             	.LBE1735:
 1806                             	.LBE1734:
 1807                             	.LBB1741:
 1808                             	.LBB1742:
 1809                             	.LBB1743:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1810                             		.loc 3 95 14 is_stmt 0
 1811 0109 4B 14                   		add	r1, r4
 1812                             	.LVL147:
 1813                             	.LBE1743:
 1814                             	.LBE1742:
 1815                             	.LBE1741:
 1816                             	.LBB1744:
 1817                             	.LBB1740:
 1818                             	.LBB1739:
 1819                             	.LBB1738:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1820                             		.loc 3 345 16
 1821 010b FD 70 64 94 A8 F5 70    		emul	#0x70f5a894, r4
 1822                             	.LVL148:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1823                             		.loc 3 346 3 is_stmt 1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1824                             		.loc 3 346 35 is_stmt 0
 1825 0112 61 05                   		cmp	#0, r5
 1826 0114 FB 72 01 00 00 C0       		mov.L	#-1073741823, r7
 1827                             	.LVL149:
 1828 011a 29 08                   		blt 1f
 1829 011c FB 72 00 00 00 40       		mov #0x40000000, r7
 1830                             	1:
 1831 0122 FB 36 FF                		mov.L	#-1, r3
 1832 0125 29 04                   		blt 1f
 1833 0127 66 03                   		mov #0, r3
 1834                             	1:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1835                             		.loc 3 347 3 is_stmt 1
 1836                             	.LVL150:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1837                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1838                             		.loc 3 348 49 is_stmt 0
 1839 0129 FF 21 74                		add	r7, r4, r1
 1840                             	.LVL151:
 1841 012c FC 0B 35                		adc	r3, r5
 1842                             	.LVL152:
 1843 012f 26 0E                   		bpz	.L116
 1844 0131 70 1B FF FF FF 7F       		add	#0x7fffffff, r1, r11
 1845 0137 FD 74 25 00             		adc	#0, r5
 1846 013b EF B1                   		mov.L	r11, r1
 1847                             		.balign 8,3,1
 1848                             	.L116:
 1849 013d 6C 15                   		shll	#1, r5
 1850 013f 69 F1                   		shlr	#31, r1
 1851 0141 57 51                   		or	r5, r1
 1852                             	.LBE1738:
 1853                             	.LBE1739:
 1854                             	.LBE1740:
 1855                             	.LBE1744:
 1856                             	.LBB1745:
 1857                             	.LBB1746:
 1858                             	.LBB1747:
 1859                             	.LBB1748:
 1860                             	.LBB1749:
 1861                             	.LBB1750:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1862                             		.loc 3 95 14
 1863 0143 70 11 94 A8 F5 70       		add	#0x70f5a894, r1
 1864                             	.LVL153:
 1865                             	.LBE1750:
 1866                             	.LBE1749:
 1867                             	.LBE1748:
 1868                             	.LBE1747:
 1869                             	.LBE1746:
 1870                             	.LBE1745:
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 1871                             		.loc 3 753 1
 1872 0149 3F 6B 06                		rtsd	#24, r6-r11
 1873                             	.LFE2750:
 1875 014c 76 10 01 00             		.section	.text._ZN8gemmlowp22exp_on_negative_valuesIlLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE
 1876                             		.weak	__ZN8gemmlowp22exp_on_negative_valuesIlLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE
 1878                             	__ZN8gemmlowp22exp_on_negative_valuesIlLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE:
 1879                             	.LFB2695:
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a) {
 1880                             		.loc 3 757 25 is_stmt 1
 1881                             	.LVL154:
 1882 0000 6E 6C                   		pushm	r6-r12
 1883                             	.LCFI4:
 1884                             	.LVL155:
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a) {
 1885                             		.loc 3 757 25 is_stmt 0
 1886 0002 EF 17                   		mov.L	r1, r7
 1887                             	.LVL156:
 1888                             	.LBB2063:
 1889                             	.LBB2064:
 1890                             	.LBB2065:
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1891                             		.loc 3 107 14
 1892 0004 FB 62 00 00 00 FE       		mov.L	#-33554432, r6
 1893 000a 57 16                   		or	r1, r6
 1894                             	.LVL157:
 1895                             	.LBE2065:
 1896                             	.LBE2064:
 1897                             	.LBE2063:
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       Rescale<0>(a_mod_quarter_minus_one_quarter));
 1898                             		.loc 3 766 75
 1899 000c FD C4 61                		shll	#4, r6, r1
 1900                             	.LVL158:
 1901 000f 05 00 00 00             		bsr	__ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li
 1902                             	.LVL159:
 1903                             	.LBB2066:
 1904                             	.LBB2067:
 1905                             	.LBB2068:
 1906                             	.LBB2069:
 1907                             	.LBB2070:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1908                             		.loc 3 345 16
 1909 0013 FB 22 7B BE AF 63       		mov.L	#0x63afbe7b, r2
 1910 0019 FC 1B 12                		emul	r1, r2
 1911 001c EF 2A                   		mov.L	r2, r10
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1912                             		.loc 3 346 35
 1913 001e 71 3B 00                		add	#0, r3, r11
 1914 0021 FB 52 01 00 00 C0       		mov.L	#-1073741823, r5
 1915 0027 29 08                   		blt 1f
 1916 0029 FB 52 00 00 00 40       		mov #0x40000000, r5
 1917                             	1:
 1918 002f FB 26 FF                		mov.L	#-1, r2
 1919 0032 29 04                   		blt 1f
 1920 0034 66 02                   		mov #0, r2
 1921                             	1:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1922                             		.loc 3 348 49
 1923 0036 FF 23 5A                		add	r5, r10, r3
 1924 0039 FC 0B B2                		adc	r11, r2
 1925                             	.LBE2070:
 1926                             	.LBE2069:
 1927                             	.LBE2068:
 1928                             	.LBE2067:
 1929                             	.LBE2066:
 1930                             	.LBB2087:
 1931                             	.LBB2088:
 1932                             	.LBB2089:
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1933                             		.loc 3 107 14
 1934 003c FF 05 76                		sub	r7, r6, r5
 1935                             	.LVL160:
 1936                             	.LBE2089:
 1937                             	.LBE2088:
 1938                             	.LBE2087:
 1939                             	.LBB2090:
 1940                             	.LBB2074:
 1941                             	.LBB2075:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1942                             		.loc 3 159 12
 1943 003f FD 99 54                		shlr	#25, r5, r4
 1944 0042 64 14                   		and #1, r4
 1945 0044 FC 07 4A                		neg	r4, r10
 1946                             	.LVL161:
 1947                             	.LBE2075:
 1948                             	.LBE2074:
 1949                             	.LBB2076:
 1950                             	.LBB2073:
 1951                             	.LBB2072:
 1952                             	.LBB2071:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 1953                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 1954                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 1955                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 1956                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 1957                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 1958                             		.loc 3 347 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1959                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 1960                             		.loc 3 348 49 is_stmt 0
 1961 0047 61 02                   		cmp	#0, r2
 1962 0049 28 0F                   		bge	.L154
 1963 004b 70 39 FF FF FF 7F       		add	#0x7fffffff, r3, r9
 1964 0051 FD 74 22 00             		adc	#0, r2
 1965 0055 EF 93                   		mov.L	r9, r3
 1966 0057 03                      		.balign 8,3,1
 1967                             	.L154:
 1968 0058 6C 12                   		shll	#1, r2
 1969 005a 69 F3                   		shlr	#31, r3
 1970 005c 57 23                   		or	r2, r3
 1971                             	.LBE2071:
 1972                             	.LBE2072:
 1973                             	.LBE2073:
 1974                             	.LBE2076:
 1975                             	.LBB2077:
 1976                             	.LBB2078:
 1977                             	.LBB2079:
 1978                             	.LBB2080:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1979                             		.loc 3 71 14
 1980 005e 60 14                   		sub	#1, r4
 1981                             	.LVL162:
 1982                             	.LBE2080:
 1983                             	.LBE2079:
 1984                             	.LBB2082:
 1985                             	.LBB2083:
 1986 0060 53 A3                   		and	r10, r3
 1987                             	.LBE2083:
 1988                             	.LBE2082:
 1989                             	.LBB2084:
 1990                             	.LBB2081:
 1991 0062 53 14                   		and	r1, r4
 1992                             	.LVL163:
 1993                             	.LBE2081:
 1994                             	.LBE2084:
 1995                             	.LBB2085:
 1996                             	.LBB2086:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 1997                             		.loc 3 83 14
 1998 0064 FC 37 34                		xor	r3, r4
 1999                             	.LVL164:
 2000                             	.LBE2086:
 2001                             	.LBE2085:
 2002                             	.LBE2078:
 2003                             	.LBE2077:
 2004                             	.LBE2090:
 2005                             	.LBB2091:
 2006                             	.LBB2092:
 2007                             	.LBB2093:
 2008                             	.LBB2094:
 2009                             	.LBB2095:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2010                             		.loc 3 345 16
 2011 0067 FB 12 F2 CB A2 4D       		mov.L	#0x4da2cbf2, r1
 2012 006d FC 1B 41                		emul	r4, r1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2013                             		.loc 3 346 35
 2014 0070 71 2B 00                		add	#0, r2, r11
 2015 0073 FB 32 01 00 00 C0       		mov.L	#-1073741823, r3
 2016 0079 29 08                   		blt 1f
 2017 007b FB 32 00 00 00 40       		mov #0x40000000, r3
 2018                             	1:
 2019 0081 FB E6 FF                		mov.L	#-1, r14
 2020 0084 29 04                   		blt 1f
 2021 0086 66 0E                   		mov #0, r14
 2022                             	1:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2023                             		.loc 3 348 49
 2024 0088 FF 22 31                		add	r3, r1, r2
 2025 008b FC 0B BE                		adc	r11, r14
 2026                             	.LBE2095:
 2027                             	.LBE2094:
 2028                             	.LBE2093:
 2029                             	.LBE2092:
 2030                             	.LBB2099:
 2031                             	.LBB2100:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2032                             		.loc 3 159 12
 2033 008e FD 9A 53                		shlr	#26, r5, r3
 2034 0091 64 13                   		and #1, r3
 2035 0093 FC 07 3A                		neg	r3, r10
 2036                             	.LVL165:
 2037                             	.LBE2100:
 2038                             	.LBE2099:
 2039                             	.LBB2101:
 2040                             	.LBB2098:
 2041                             	.LBB2097:
 2042                             	.LBB2096:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 2043                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 2044                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 2045                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2046                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2047                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 2048                             		.loc 3 347 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2049                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2050                             		.loc 3 348 49 is_stmt 0
 2051 0096 61 0E                   		cmp	#0, r14
 2052 0098 28 0E                   		bge	.L149
 2053 009a 70 21 FF FF FF 7F       		add	#0x7fffffff, r2, r1
 2054 00a0 FD 74 2E 00             		adc	#0, r14
 2055 00a4 EF 12                   		mov.L	r1, r2
 2056                             		.balign 8,3,1
 2057                             	.L149:
 2058 00a6 6C 1E                   		shll	#1, r14
 2059 00a8 69 F2                   		shlr	#31, r2
 2060 00aa 57 E2                   		or	r14, r2
 2061                             	.LBE2096:
 2062                             	.LBE2097:
 2063                             	.LBE2098:
 2064                             	.LBE2101:
 2065                             	.LBB2102:
 2066                             	.LBB2103:
 2067                             	.LBB2104:
 2068                             	.LBB2105:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2069                             		.loc 3 71 14
 2070 00ac 60 13                   		sub	#1, r3
 2071                             	.LVL166:
 2072                             	.LBE2105:
 2073                             	.LBE2104:
 2074                             	.LBB2107:
 2075                             	.LBB2108:
 2076 00ae 53 A2                   		and	r10, r2
 2077                             	.LBE2108:
 2078                             	.LBE2107:
 2079                             	.LBB2109:
 2080                             	.LBB2106:
 2081 00b0 53 34                   		and	r3, r4
 2082                             	.LVL167:
 2083                             	.LBE2106:
 2084                             	.LBE2109:
 2085                             	.LBB2110:
 2086                             	.LBB2111:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2087                             		.loc 3 83 14
 2088 00b2 FC 37 24                		xor	r2, r4
 2089                             	.LVL168:
 2090                             	.LBE2111:
 2091                             	.LBE2110:
 2092                             	.LBE2103:
 2093                             	.LBE2102:
 2094                             	.LBE2091:
 2095                             	.LBB2112:
 2096                             	.LBB2113:
 2097                             	.LBB2114:
 2098                             	.LBB2115:
 2099                             	.LBB2116:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2100                             		.loc 3 345 16
 2101 00b5 FB 12 6C AC 16 2F       		mov.L	#0x2f16ac6c, r1
 2102 00bb FC 1B 41                		emul	r4, r1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2103                             		.loc 3 346 35
 2104 00be 71 2B 00                		add	#0, r2, r11
 2105 00c1 FB 32 01 00 00 C0       		mov.L	#-1073741823, r3
 2106 00c7 29 08                   		blt 1f
 2107 00c9 FB 32 00 00 00 40       		mov #0x40000000, r3
 2108                             	1:
 2109 00cf FB E6 FF                		mov.L	#-1, r14
 2110 00d2 29 04                   		blt 1f
 2111 00d4 66 0E                   		mov #0, r14
 2112                             	1:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2113                             		.loc 3 348 49
 2114 00d6 FF 2F 31                		add	r3, r1, r15
 2115 00d9 FC 0B 2E                		adc	r2, r14
 2116                             	.LBE2116:
 2117                             	.LBE2115:
 2118                             	.LBE2114:
 2119                             	.LBE2113:
 2120                             	.LBB2120:
 2121                             	.LBB2121:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2122                             		.loc 3 159 12
 2123 00dc FD 9B 52                		shlr	#27, r5, r2
 2124 00df 64 12                   		and #1, r2
 2125 00e1 FC 07 21                		neg	r2, r1
 2126                             	.LVL169:
 2127                             	.LBE2121:
 2128                             	.LBE2120:
 2129                             	.LBB2122:
 2130                             	.LBB2119:
 2131                             	.LBB2118:
 2132                             	.LBB2117:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 2133                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 2134                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 2135                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2136                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2137                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 2138                             		.loc 3 347 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2139                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2140                             		.loc 3 348 49 is_stmt 0
 2141 00e4 61 0E                   		cmp	#0, r14
 2142 00e6 28 0E                   		bge	.L144
 2143 00e8 70 F9 FF FF FF 7F       		add	#0x7fffffff, r15, r9
 2144 00ee FD 74 2E 00             		adc	#0, r14
 2145 00f2 EF 9F                   		mov.L	r9, r15
 2146                             		.balign 8,3,1
 2147                             	.L144:
 2148 00f4 6C 1E                   		shll	#1, r14
 2149 00f6 69 FF                   		shlr	#31, r15
 2150 00f8 57 EF                   		or	r14, r15
 2151                             	.LBE2117:
 2152                             	.LBE2118:
 2153                             	.LBE2119:
 2154                             	.LBE2122:
 2155                             	.LBB2123:
 2156                             	.LBB2124:
 2157                             	.LBB2125:
 2158                             	.LBB2126:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2159                             		.loc 3 71 14
 2160 00fa 60 12                   		sub	#1, r2
 2161                             	.LVL170:
 2162                             	.LBE2126:
 2163                             	.LBE2125:
 2164                             	.LBB2128:
 2165                             	.LBB2129:
 2166 00fc 53 1F                   		and	r1, r15
 2167                             	.LBE2129:
 2168                             	.LBE2128:
 2169                             	.LBB2130:
 2170                             	.LBB2127:
 2171 00fe 53 24                   		and	r2, r4
 2172                             	.LVL171:
 2173                             	.LBE2127:
 2174                             	.LBE2130:
 2175                             	.LBB2131:
 2176                             	.LBB2132:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2177                             		.loc 3 83 14
 2178 0100 FC 37 F4                		xor	r15, r4
 2179                             	.LVL172:
 2180                             	.LBE2132:
 2181                             	.LBE2131:
 2182                             	.LBE2124:
 2183                             	.LBE2123:
 2184                             	.LBE2112:
 2185                             	.LBB2133:
 2186                             	.LBB2134:
 2187                             	.LBB2135:
 2188                             	.LBB2136:
 2189                             	.LBB2137:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2190                             		.loc 3 345 16
 2191 0103 FB B2 A4 AA 52 11       		mov.L	#0x1152aaa4, r11
 2192 0109 FC 1B 4B                		emul	r4, r11
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2193                             		.loc 3 346 35
 2194 010c 71 C3 00                		add	#0, r12, r3
 2195 010f FB 12 01 00 00 C0       		mov.L	#-1073741823, r1
 2196 0115 29 08                   		blt 1f
 2197 0117 FB 12 00 00 00 40       		mov #0x40000000, r1
 2198                             	1:
 2199 011d FB E6 FF                		mov.L	#-1, r14
 2200 0120 29 04                   		blt 1f
 2201 0122 66 0E                   		mov #0, r14
 2202                             	1:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2203                             		.loc 3 348 49
 2204 0124 FF 2A 1B                		add	r1, r11, r10
 2205 0127 FC 0B 3E                		adc	r3, r14
 2206                             	.LBE2137:
 2207                             	.LBE2136:
 2208                             	.LBE2135:
 2209                             	.LBE2134:
 2210                             	.LBB2141:
 2211                             	.LBB2142:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2212                             		.loc 3 159 12
 2213 012a FD 9C 51                		shlr	#28, r5, r1
 2214 012d 64 11                   		and #1, r1
 2215 012f FC 07 13                		neg	r1, r3
 2216                             	.LVL173:
 2217                             	.LBE2142:
 2218                             	.LBE2141:
 2219                             	.LBB2143:
 2220                             	.LBB2140:
 2221                             	.LBB2139:
 2222                             	.LBB2138:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 2223                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 2224                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 2225                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2226                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2227                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 2228                             		.loc 3 347 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2229                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2230                             		.loc 3 348 49 is_stmt 0
 2231 0132 61 0E                   		cmp	#0, r14
 2232 0134 28 0E                   		bge	.L139
 2233 0136 70 A2 FF FF FF 7F       		add	#0x7fffffff, r10, r2
 2234 013c FD 74 2E 00             		adc	#0, r14
 2235 0140 EF 2A                   		mov.L	r2, r10
 2236                             		.balign 8,3,1
 2237                             	.L139:
 2238 0142 6C 1E                   		shll	#1, r14
 2239 0144 69 FA                   		shlr	#31, r10
 2240 0146 57 EA                   		or	r14, r10
 2241                             	.LBE2138:
 2242                             	.LBE2139:
 2243                             	.LBE2140:
 2244                             	.LBE2143:
 2245                             	.LBB2144:
 2246                             	.LBB2145:
 2247                             	.LBB2146:
 2248                             	.LBB2147:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2249                             		.loc 3 71 14
 2250 0148 60 11                   		sub	#1, r1
 2251                             	.LVL174:
 2252                             	.LBE2147:
 2253                             	.LBE2146:
 2254                             	.LBB2149:
 2255                             	.LBB2150:
 2256 014a 53 3A                   		and	r3, r10
 2257                             	.LBE2150:
 2258                             	.LBE2149:
 2259                             	.LBB2151:
 2260                             	.LBB2148:
 2261 014c 53 14                   		and	r1, r4
 2262                             	.LVL175:
 2263                             	.LBE2148:
 2264                             	.LBE2151:
 2265                             	.LBB2152:
 2266                             	.LBB2153:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2267                             		.loc 3 83 14
 2268 014e FC 37 A4                		xor	r10, r4
 2269                             	.LVL176:
 2270                             	.LBE2153:
 2271                             	.LBE2152:
 2272                             	.LBE2145:
 2273                             	.LBE2144:
 2274                             	.LBE2133:
 2275                             	.LBB2154:
 2276                             	.LBB2155:
 2277                             	.LBB2156:
 2278                             	.LBB2157:
 2279                             	.LBB2158:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2280                             		.loc 3 345 16
 2281 0151 FB 12 B7 2A 58 02       		mov.L	#0x2582ab7, r1
 2282 0157 FC 1B 41                		emul	r4, r1
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2283                             		.loc 3 346 35
 2284 015a 71 2B 00                		add	#0, r2, r11
 2285 015d FB 32 01 00 00 C0       		mov.L	#-1073741823, r3
 2286 0163 29 08                   		blt 1f
 2287 0165 FB 32 00 00 00 40       		mov #0x40000000, r3
 2288                             	1:
 2289 016b FB E6 FF                		mov.L	#-1, r14
 2290 016e 29 04                   		blt 1f
 2291 0170 66 0E                   		mov #0, r14
 2292                             	1:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2293                             		.loc 3 348 49
 2294 0172 FF 2F 31                		add	r3, r1, r15
 2295 0175 FC 0B 2E                		adc	r2, r14
 2296                             	.LBE2158:
 2297                             	.LBE2157:
 2298                             	.LBE2156:
 2299                             	.LBE2155:
 2300                             	.LBB2162:
 2301                             	.LBB2163:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2302                             		.loc 3 159 12
 2303 0178 FD 9D 53                		shlr	#29, r5, r3
 2304 017b 64 13                   		and #1, r3
 2305 017d FC 07 31                		neg	r3, r1
 2306                             	.LVL177:
 2307                             	.LBE2163:
 2308                             	.LBE2162:
 2309                             	.LBB2164:
 2310                             	.LBB2161:
 2311                             	.LBB2160:
 2312                             	.LBB2159:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 2313                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 2314                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 2315                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2316                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2317                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 2318                             		.loc 3 347 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2319                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2320                             		.loc 3 348 49 is_stmt 0
 2321 0180 61 0E                   		cmp	#0, r14
 2322 0182 28 0E                   		bge	.L135
 2323 0184 70 FA FF FF FF 7F       		add	#0x7fffffff, r15, r10
 2324 018a FD 74 2E 00             		adc	#0, r14
 2325 018e EF AF                   		mov.L	r10, r15
 2326                             		.balign 8,3,1
 2327                             	.L135:
 2328 0190 6C 1E                   		shll	#1, r14
 2329 0192 69 FF                   		shlr	#31, r15
 2330 0194 57 EF                   		or	r14, r15
 2331                             	.LBE2159:
 2332                             	.LBE2160:
 2333                             	.LBE2161:
 2334                             	.LBE2164:
 2335                             	.LBB2165:
 2336                             	.LBB2166:
 2337                             	.LBB2167:
 2338                             	.LBB2168:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2339                             		.loc 3 71 14
 2340 0196 60 13                   		sub	#1, r3
 2341                             	.LVL178:
 2342                             	.LBE2168:
 2343                             	.LBE2167:
 2344                             	.LBB2170:
 2345                             	.LBB2171:
 2346 0198 53 1F                   		and	r1, r15
 2347                             	.LBE2171:
 2348                             	.LBE2170:
 2349                             	.LBB2172:
 2350                             	.LBB2169:
 2351 019a 53 34                   		and	r3, r4
 2352                             	.LVL179:
 2353                             	.LBE2169:
 2354                             	.LBE2172:
 2355                             	.LBB2173:
 2356                             	.LBB2174:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2357                             		.loc 3 83 14
 2358 019c EF F3                   		mov.L	r15, r3
 2359 019e FC 37 43                		xor	r4, r3
 2360                             	.LVL180:
 2361                             	.LBE2174:
 2362                             	.LBE2173:
 2363                             	.LBE2166:
 2364                             	.LBE2165:
 2365                             	.LBE2154:
 2366                             	.LBB2175:
 2367                             	.LBB2176:
 2368                             	.LBB2177:
 2369                             	.LBB2178:
 2370                             	.LBB2179:
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2371                             		.loc 3 345 16
 2372 01a1 FB 1E 11 FE 0A          		mov.L	#0xafe11, r1
 2373 01a6 FC 1B 31                		emul	r3, r1
 2374 01a9 EF 1A                   		mov.L	r1, r10
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2375                             		.loc 3 346 35
 2376 01ab 71 2B 00                		add	#0, r2, r11
 2377 01ae FB 42 01 00 00 C0       		mov.L	#-1073741823, r4
 2378 01b4 29 08                   		blt 1f
 2379 01b6 FB 42 00 00 00 40       		mov #0x40000000, r4
 2380                             	1:
 2381 01bc 71 B2 00                		add	#0, r11, r2
 2382 01bf FB 26 FF                		mov.L	#-1, r2
 2383 01c2 29 04                   		blt 1f
 2384 01c4 66 02                   		mov #0, r2
 2385                             	1:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2386                             		.loc 3 348 49
 2387 01c6 FF 21 4A                		add	r4, r10, r1
 2388 01c9 FC 0B B2                		adc	r11, r2
 2389                             	.LBE2179:
 2390                             	.LBE2178:
 2391                             	.LBE2177:
 2392                             	.LBE2176:
 2393                             	.LBE2175:
 2394                             	.LBB2196:
 2395                             	.LBB2197:
 2396                             	.LBB2198:
 2397                             	.LBB2199:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2398                             		.loc 3 159 12
 2399 01cc 61 07                   		cmp	#0, r7
 2400 01ce FC DB 70                		sceq.L	r7
 2401                             	.LBE2199:
 2402                             	.LBE2198:
 2403                             	.LBE2197:
 2404                             	.LBE2196:
 2405                             	.LBB2203:
 2406                             	.LBB2183:
 2407                             	.LBB2184:
 2408 01d1 69 E5                   		shlr	#30, r5
 2409                             	.LVL181:
 2410 01d3 64 15                   		and #1, r5
 2411 01d5 FC 07 54                		neg	r5, r4
 2412                             	.LVL182:
 2413                             	.LBE2184:
 2414                             	.LBE2183:
 2415                             	.LBB2185:
 2416                             	.LBB2182:
 2417                             	.LBB2181:
 2418                             	.LBB2180:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 2419                             		.loc 3 342 3 is_stmt 1
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 2420                             		.loc 3 343 3
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 2421                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2422                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2423                             		.loc 3 346 3
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 2424                             		.loc 3 347 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2425                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2426                             		.loc 3 348 49 is_stmt 0
 2427 01d8 61 02                   		cmp	#0, r2
 2428 01da 28 0E                   		bge	.L133
 2429 01dc 70 16 FF FF FF 7F       		add	#0x7fffffff, r1, r6
 2430                             	.LVL183:
 2431 01e2 FD 74 22 00             		adc	#0, r2
 2432 01e6 EF 61                   		mov.L	r6, r1
 2433                             		.balign 8,3,1
 2434                             	.L133:
 2435 01e8 6C 12                   		shll	#1, r2
 2436 01ea 69 F1                   		shlr	#31, r1
 2437 01ec 57 21                   		or	r2, r1
 2438                             	.LBE2180:
 2439                             	.LBE2181:
 2440                             	.LBE2182:
 2441                             	.LBE2185:
 2442                             	.LBB2186:
 2443                             	.LBB2187:
 2444                             	.LBB2188:
 2445                             	.LBB2189:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2446                             		.loc 3 71 14
 2447 01ee 60 15                   		sub	#1, r5
 2448                             	.LBE2189:
 2449                             	.LBE2188:
 2450                             	.LBB2191:
 2451                             	.LBB2192:
 2452 01f0 53 41                   		and	r4, r1
 2453                             	.LBE2192:
 2454                             	.LBE2191:
 2455                             	.LBB2193:
 2456                             	.LBB2190:
 2457 01f2 FF 44 35                		and	r3, r5, r4
 2458                             	.LBE2190:
 2459                             	.LBE2193:
 2460                             	.LBB2194:
 2461                             	.LBB2195:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2462                             		.loc 3 83 14
 2463 01f5 FC 37 14                		xor	r1, r4
 2464                             	.LBE2195:
 2465                             	.LBE2194:
 2466                             	.LBE2187:
 2467                             	.LBE2186:
 2468                             	.LBE2203:
 2469                             	.LBB2204:
 2470                             	.LBB2205:
 2471                             	.LBB2206:
 2472                             	.LBB2207:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2473                             		.loc 3 71 14
 2474 01f8 71 71 FF                		add	#-1, r7, r1
 2475                             	.LBE2207:
 2476                             	.LBE2206:
 2477                             	.LBE2205:
 2478                             	.LBE2204:
 2479                             	.LBB2215:
 2480                             	.LBB2202:
 2481                             	.LBB2201:
 2482                             	.LBB2200:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2483                             		.loc 3 159 12
 2484 01fb 7E 17                   		neg	r7
 2485                             	.LBE2200:
 2486                             	.LBE2201:
 2487                             	.LBE2202:
 2488                             	.LBE2215:
 2489                             	.LBB2216:
 2490                             	.LBB2214:
 2491                             	.LBB2209:
 2492                             	.LBB2208:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2493                             		.loc 3 71 14
 2494 01fd 53 41                   		and	r4, r1
 2495                             	.LBE2208:
 2496                             	.LBE2209:
 2497                             	.LBB2210:
 2498                             	.LBB2211:
 2499 01ff 7B F7                   		bclr #31, r7
 2500                             	.LBE2211:
 2501                             	.LBE2210:
 2502                             	.LBB2212:
 2503                             	.LBB2213:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2504                             		.loc 3 83 14
 2505 0201 FC 37 71                		xor	r7, r1
 2506                             	.LVL184:
 2507                             	.LBE2213:
 2508                             	.LBE2212:
 2509                             	.LBE2214:
 2510                             	.LBE2216:
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 2511                             		.loc 3 801 1
 2512 0204 3F 6C 07                		rtsd	#28, r6-r12
 2513                             	.LFE2695:
 2515 0207 03                      		.section	.text._ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode,"ax",
 2516                             		.global	__ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode
 2518                             	__ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode:
 2519                             	.LFB2229:
  84:../src/tensorflow/lite/micro/kernels/logistic.cc ****   const TfLiteEvalTensor* input =
 2520                             		.loc 1 84 69 is_stmt 1
 2521                             	.LVL185:
 2522 0000 6E 6D                   		pushm	r6-r13
 2523                             	.LCFI5:
 2524 0002 71 00 A0                		add	#-96, r0
 2525                             	.LCFI6:
  85:../src/tensorflow/lite/micro/kernels/logistic.cc ****       tflite::micro::GetEvalInput(context, node, kInputTensor);
 2526                             		.loc 1 85 3
 2527                             	.LVL186:
 2528                             		.file 4 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/tens
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** /* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** ==============================================================================*/
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** #ifndef TENSORFLOW_LITE_MICRO_KERNELS_KERNEL_UTIL_H_
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** #define TENSORFLOW_LITE_MICRO_KERNELS_KERNEL_UTIL_H_
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** #include <cstdint>
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** #include "tensorflow/lite/c/common.h"
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** #include "tensorflow/lite/kernels/internal/compatibility.h"
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** #include "tensorflow/lite/kernels/internal/types.h"
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** namespace tflite {
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** namespace micro {
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** // Returns a mutable tensor for a given input index. is_variable must be checked
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** // during prepare when the full TfLiteTensor is available.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****                                              const TfLiteNode* node,
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****                                              int index) {
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   TFLITE_DCHECK(context != nullptr);
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   TFLITE_DCHECK(node != nullptr);
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   return context->GetEvalTensor(context, node->inputs->data[index]);
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** }
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** // Returns the TfLiteEvalTensor struct for a given input index in a node.
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****                                             const TfLiteNode* node, int index) {
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   return GetMutableEvalInput(context, node, index);
 2529                             		.loc 4 41 3
 2530                             	.LBB2390:
 2531                             	.LBB2391:
 2532                             	.LBB2392:
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   TFLITE_DCHECK(node != nullptr);
 2533                             		.loc 4 33 3
 2534 0005 61 01                   		cmp	#0, r1
 2535 0007 3A D4 03                		beq	.L175
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   return context->GetEvalTensor(context, node->inputs->data[index]);
 2536                             		.loc 4 34 3 is_stmt 0
 2537 000a 71 2A 00                		add	#0, r2, r10
 2538 000d 3A CE 03                		beq	.L175
 2539 0010 EF 17                   		mov.L	r1, r7
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** }
 2540                             		.loc 4 35 3 is_stmt 1
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** }
 2541                             		.loc 4 35 32 is_stmt 0
 2542 0012 EC A4                   		mov.L	[r10], r4
 2543 0014 AD 1D                   		mov.L	84[r1], r5
 2544 0016 A8 4A                   		mov.L	4[r4], r2
 2545                             	.LVL187:
 2546 0018 7F 15                   		jsr	r5
 2547                             	.LVL188:
 2548 001a EF 1B                   		mov.L	r1, r11
 2549                             	.LVL189:
 2550                             	.LBE2392:
 2551                             	.LBE2391:
 2552                             	.LBE2390:
  87:../src/tensorflow/lite/micro/kernels/logistic.cc ****       tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 2553                             		.loc 1 87 3 is_stmt 1
 2554                             	.LBB2395:
 2555                             	.LBB2396:
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** }
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** // Returns the TfLiteEvalTensor struct for a given output index in a node.
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****                                        const TfLiteNode* node, int index) {
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   TFLITE_DCHECK(context != nullptr);
 2556                             		.loc 4 47 3
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   TFLITE_DCHECK(node != nullptr);
 2557                             		.loc 4 48 3
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   return context->GetEvalTensor(context, node->outputs->data[index]);
 2558                             		.loc 4 49 3
 2559                             		.loc 4 49 32 is_stmt 0
 2560 001c ED A4 01                		mov.L	4[r10], r4
 2561 001f AD 7D                   		mov.L	84[r7], r5
 2562 0021 EF 71                   		mov.L	r7, r1
 2563                             	.LVL190:
 2564 0023 A8 4A                   		mov.L	4[r4], r2
 2565 0025 7F 15                   		jsr	r5
 2566                             	.LVL191:
 2567 0027 EF 16                   		mov.L	r1, r6
 2568                             	.LVL192:
 2569                             	.LBE2396:
 2570                             	.LBE2395:
  90:../src/tensorflow/lite/micro/kernels/logistic.cc ****   OpData* data = static_cast<OpData*>(node->user_data);
 2571                             		.loc 1 90 3 is_stmt 1
 2572 0029 ED A4 04                		mov.L	16[r10], r4
 2573 002c 61 04                   		cmp	#0, r4
 2574 002e 3A AD 03                		beq	.L175
  91:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 2575                             		.loc 1 91 3
 2576                             	.LVL193:
  93:../src/tensorflow/lite/micro/kernels/logistic.cc ****     switch (output->type) {
 2577                             		.loc 1 93 3
  93:../src/tensorflow/lite/micro/kernels/logistic.cc ****     switch (output->type) {
 2578                             		.loc 1 93 14 is_stmt 0
 2579 0031 ED BA 02                		mov.L	8[r11], r10
 2580                             	.LVL194:
  93:../src/tensorflow/lite/micro/kernels/logistic.cc ****     switch (output->type) {
 2581                             		.loc 1 93 3
 2582 0034 61 1A                   		cmp	#1, r10
 2583 0036 3A C6 00                		beq	.L252
 108:../src/tensorflow/lite/micro/kernels/logistic.cc ****     switch (output->type) {
 2584                             		.loc 1 108 10 is_stmt 1
 2585 0039 61 9A                   		cmp	#9, r10
 2586 003b 21 4C                   		bne	.L192
 109:../src/tensorflow/lite/micro/kernels/logistic.cc ****       case kTfLiteInt8: {
 2587                             		.loc 1 109 5
 2588 003d A8 95                   		mov.L	8[r1], r5
 2589 003f 61 95                   		cmp	#9, r5
 2590 0041 21 46                   		bne	.L192
 110:../src/tensorflow/lite/micro/kernels/logistic.cc ****         reference_integer_ops::Logistic(
 2591                             		.loc 1 110 7
 110:../src/tensorflow/lite/micro/kernels/logistic.cc ****         reference_integer_ops::Logistic(
 2592                             		.loc 1 110 25
 111:../src/tensorflow/lite/micro/kernels/logistic.cc ****             data->input_zero_point, data->input_range_radius,
 2593                             		.loc 1 111 9
 114:../src/tensorflow/lite/micro/kernels/logistic.cc ****             tflite::micro::GetTensorData<int8_t>(input),
 2594                             		.loc 1 114 32 is_stmt 0
 2595 0043 ED BC 01                		mov.L	4[r11], r12
 111:../src/tensorflow/lite/micro/kernels/logistic.cc ****             data->input_zero_point, data->input_range_radius,
 2596                             		.loc 1 111 40
 2597 0046 EC 45                   		mov.L	[r4], r5
 2598 0048 ED 4F 01                		mov.L	4[r4], r15
 2599 004b ED 4D 02                		mov.L	8[r4], r13
 2600                             	.LVL195:
 2601                             	.LBB2397:
 2602                             	.LBB2398:
 2603                             		.file 5 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/tens
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** /* Copyright 2017 The TensorFlow Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** ==============================================================================*/
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #ifndef TENSORFLOW_LITE_KERNELS_KERNEL_UTIL_H_
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #define TENSORFLOW_LITE_KERNELS_KERNEL_UTIL_H_
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #include <stdint.h>
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #include <limits>
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #include "tensorflow/lite/c/builtin_op_data.h"
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #include "tensorflow/lite/c/common.h"
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** namespace tflite {
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // A fair number of functions in this header have historically been inline.
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // It is ok to change functions to not be inline if the latency with
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // benchmark_model for MobileNet + MobileBERT is unaffected. If such a change is
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // made, move the newly non-inlined function declarations to the top of this
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // header file.
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Note: You must check if result is not null:
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor = GetInput(context, node, kMyTensorIdx);
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE(context, my_tensor != nullptr);
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // This is because the index might point to the optional tensor constant
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // (kTfLiteOptionalTensor) in which case there is no tensor to return.
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** const TfLiteTensor* GetInput(const TfLiteContext* context,
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                              const TfLiteNode* node, int index);
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Same as `GetInput` but returns boolean and uses output argument for tensor.
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor;
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE_OK(context,
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //                     GetInputSafe(context, node, kMyTensorIdx, &my_tensor));
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   // can use my_tensor directly from here onwards, it is not nullptr
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Should be used in cases where the binary size is too large.
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** TfLiteStatus GetInputSafe(const TfLiteContext* context, const TfLiteNode* node,
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                           int index, const TfLiteTensor** tensor);
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Note: You must check if result is not null:
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor = GetVariableInput(context, node, kMyTensorIdx);
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE(context, my_tensor != nullptr);
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // This is because the index might point to the optional tensor constant
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // (kTfLiteOptionalTensor) in which case there is no tensor to return.
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** TfLiteTensor* GetVariableInput(TfLiteContext* context, const TfLiteNode* node,
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                                int index);
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Note: You must check if result is not null:
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor = GetOutput(context, node, kMyTensorIdx);
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE(context, my_tensor != nullptr);
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // This is because the index might point to the optional tensor constant
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // (kTfLiteOptionalTensor) in which case there is no tensor to return.
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                         int index);
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Same as `GetOutput` but returns boolean and uses output argument for tensor.
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor;
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE_OK(context,
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //                     GetOutputSafe(context, node, kMyTensorIdx, &my_tensor));
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   // can use my_tensor directly from here onwards, it is not nullptr
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Should be used in cases where the binary size is too large.
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** TfLiteStatus GetOutputSafe(const TfLiteContext* context, const TfLiteNode* node,
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                            int index, TfLiteTensor** tensor);
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Note: You must check if result is not null:
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor = GetOptionalInputTensor(context, node, kIdx);
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE(context, my_tensor != nullptr);
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // This is because the index might point to the optional tensor constant
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // (kTfLiteOptionalTensor) in which case there is no tensor to return.
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Deprecated. GetInput has the same functionality.
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                                            const TfLiteNode* node, int index);
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #ifndef TF_LITE_STATIC_MEMORY
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Note: You must check if result is not null:
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor = GetTemporary(context, node, kMyTensorIdx);
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE(context, my_tensor != nullptr);
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // This is because the index might point to the optional tensor constant
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // (kTfLiteOptionalTensor) in which case there is no tensor to return.
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** TfLiteTensor* GetTemporary(TfLiteContext* context, const TfLiteNode* node,
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                            int index);
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Same as `GetTemporary` but returns boolean and uses output argument for
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // tensor.
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor;
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE_OK(context,
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //                     GetTemporarySafe(context, node, kMyTensorIdx,
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //                     &my_tensor));
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   // can use my_tensor directly from here onwards, it is not nullptr
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Should be used in cases where the binary size is too large.
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** TfLiteStatus GetTemporarySafe(const TfLiteContext* context,
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                               const TfLiteNode* node, int index,
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                               TfLiteTensor** tensor);
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Note: You must check if result is not null:
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor = GetIntermediates(context, node, kMyTensorIdx);
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE(context, my_tensor != nullptr);
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // This is because the index might point to the optional tensor constant
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // (kTfLiteOptionalTensor) in which case there is no tensor to return.
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** const TfLiteTensor* GetIntermediates(TfLiteContext* context,
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                                      const TfLiteNode* node, int index);
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Same as `GetIntermediates` but returns boolean and uses output argument for
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // tensor.
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TfLiteTensor* my_tensor;
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   TF_LITE_ENSURE_OK(context,
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //                     GetIntermediatesSafe(context, node, kMyTensorIdx,
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //                     &my_tensor));
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //   // can use my_tensor directly from here onwards, it is not nullptr
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** //
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** // Should be used in cases where the binary size is too large.
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                                   const TfLiteNode* node, int index,
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****                                   TfLiteTensor** tensor);
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #endif  // TF_LITE_STATIC_MEMORY
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****   return t->dims->data[dim];
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** }
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #ifndef TF_LITE_STATIC_MEMORY
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** inline int NumIntermediates(const TfLiteNode* node) {
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****   return node->intermediates->size;
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** }
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** #endif  // TF_LITE_STATIC_MEMORY
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** 
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h **** inline int64_t NumElements(const TfLiteIntArray* dims) {
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****   int64_t count = 1;
 2604                             		.loc 5 162 3 is_stmt 1
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****   for (int i = 0; i < dims->size; ++i) {
 2605                             		.loc 5 163 3
 2606                             	.LBB2399:
 2607                             		.loc 5 163 29 is_stmt 0
 2608 004e EC C9                   		mov.L	[r12], r9
 2609                             	.LBE2399:
 2610                             	.LBE2398:
 2611                             	.LBE2397:
 113:../src/tensorflow/lite/micro/kernels/logistic.cc ****             NumElements(input->dims),
 2612                             		.loc 1 113 43
 2613 0050 A8 C9                   		mov.L	12[r4], r1
 2614                             	.LVL196:
 2615 0052 EC 6A                   		mov.L	[r6], r10
 2616 0054 EC BB                   		mov.L	[r11], r11
 2617                             	.LVL197:
 2618                             	.LBB2403:
 2619                             	.LBB2402:
 2620                             	.LBB2400:
 2621                             		.loc 5 163 21
 2622 0056 61 09                   		cmp	#0, r9
 2623 0058 2B 58                   		ble	.L224
 2624                             	.LBE2400:
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****   for (int i = 0; i < dims->size; ++i) {
 2625                             		.loc 5 162 11
 2626 005a 66 12                   		mov.L	#1, r2
 2627 005c 66 03                   		mov.L	#0, r3
 2628                             	.LBB2401:
 2629                             		.loc 5 163 12
 2630 005e 66 07                   		mov.L	#0, r7
 2631                             	.LVL198:
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****     count *= dims->data[i];
 2632                             		.loc 5 164 26
 2633 0060 62 4C                   		add	#4, r12
 2634                             	.LVL199:
 2635                             		.balign 8,3,3
 2636                             	.L195:
 2637                             		.loc 5 164 5 is_stmt 1
 2638                             		.loc 5 164 26 is_stmt 0
 2639 0062 FE 67 C8                		mov.L	[r7,r12], r8
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****     count *= dims->data[i];
 2640                             		.loc 5 163 3
 2641 0065 62 17                   		add	#1, r7
 2642                             	.LVL200:
 2643                             		.loc 5 164 26
 2644 0067 FD BF 86                		shar	#31, r8, r6
 2645                             		.loc 5 164 11
 2646 006a FF 34 83                		mul	r8, r3, r4
 2647 006d 4F 26                   		mul	r2, r6
 2648 006f FC 1F 82                		emulu	r8, r2
 2649 0072 4B 64                   		add	r6, r4
 2650 0074 4B 43                   		add	r4, r3
 2651                             	.LVL201:
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****     count *= dims->data[i];
 2652                             		.loc 5 163 21
 2653 0076 47 97                   		cmp	r9, r7
 2654 0078 21 EA                   		bne	.L195
 2655                             	.LBE2401:
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****   }
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels\kernel_util.h ****   return count;
 2656                             		.loc 5 166 3 is_stmt 1
 2657                             	.LVL202:
 2658                             	.LBE2402:
 2659                             	.LBE2403:
 2660                             	.LBB2404:
 2661                             	.LBB2405:
 2662                             	.LBB2406:
 2663                             		.file 6 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/tens
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** /* Copyright 2019 The TensorFlow Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** ==============================================================================*/
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** #ifndef TENSORFLOW_LITE_KERNELS_INTERNAL_REFERENCE_INTEGER_OPS_LOGISTIC_H_
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** #define TENSORFLOW_LITE_KERNELS_INTERNAL_REFERENCE_INTEGER_OPS_LOGISTIC_H_
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** #include <limits>
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** #include "tensorflow/lite/kernels/internal/common.h"
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** namespace tflite {
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** namespace reference_integer_ops {
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** inline void Logistic(int32_t input_zero_point, int32_t input_range_radius,
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****                      int32_t input_multiplier, int32_t input_left_shift,
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****                      int32_t input_size, const int8_t* input_data,
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****                      int8_t* output_data) {
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****   // Integer bits must be in sync with Prepare() function.
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****   static constexpr int32_t kInputIntegerBits = 4;
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****   static constexpr int32_t kOutputIntegerBits = 8;
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****   static constexpr int8_t kMinInt8 = std::numeric_limits<int8_t>::min();
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****   static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****   static constexpr int32_t kOutputZeroPoint = -128;
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****   for (int i = 0; i < input_size; ++i) {
 2664                             		.loc 6 35 21 is_stmt 0
 2665 007a 71 27 00                		add	#0, r2, r7
 2666 007d 2A 35                   		bgt	.L194
 2667                             	.LVL203:
 2668 007f 03                      		.balign 8,3,1
 2669                             	.L210:
 2670                             	.LBE2406:
 2671                             	.LBE2405:
 2672                             	.LBE2404:
 117:../src/tensorflow/lite/micro/kernels/logistic.cc ****       }
 2673                             		.loc 1 117 16
 2674 0080 66 0A                   		mov.L	#0, r10
 2675                             		.balign 8,3,1
 2676                             	.L261:
 134:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 2677                             		.loc 1 134 1
 2678 0082 EF A1                   		mov.L	r10, r1
 2679 0084 3F 6D 20                		rtsd	#128, r6-r13
 2680                             	.LVL204:
 2681                             	.L192:
 128:../src/tensorflow/lite/micro/kernels/logistic.cc ****                        TfLiteTypeGetName(input->type),
 2682                             		.loc 1 128 5 is_stmt 1
 128:../src/tensorflow/lite/micro/kernels/logistic.cc ****                        TfLiteTypeGetName(input->type),
 2683                             		.loc 1 128 5
 2684 0087 EF A1                   		mov.L	r10, r1
 2685                             	.LVL205:
 2686 0089 ED 7B 05                		mov.L	20[r7], r11
 2687                             	.LVL206:
 131:../src/tensorflow/lite/micro/kernels/logistic.cc ****   }
 2688                             		.loc 1 131 12 is_stmt 0
 2689 008c 66 1A                   		mov.L	#1, r10
 2690 008e EF 00                   		.balign 8,3,3
 2691                             	.L251:
 128:../src/tensorflow/lite/micro/kernels/logistic.cc ****                        TfLiteTypeGetName(input->type),
 2692                             		.loc 1 128 5
 2693 0090 05 00 00 00             		bsr	_TfLiteTypeGetName
 2694                             	.LVL207:
 2695 0094 EF 1C                   		mov.L	r1, r12
 2696 0096 A8 E1                   		mov.L	8[r6], r1
 2697 0098 05 00 00 00             		bsr	_TfLiteTypeGetName
 2698                             	.LVL208:
 2699 009c A0 81                   		mov.L	r1, 8[r0]
 2700 009e E7 0C 01                		mov.L	r12, 4[r0]
 2701 00a1 EF 71                   		mov.L	r7, r1
 2702 00a3 F8 02 00 00 00 00       		mov.L	#.LC11, [r0]
 2703 00a9 7F 1B                   		jsr	r11
 2704                             	.LVL209:
 131:../src/tensorflow/lite/micro/kernels/logistic.cc ****   }
 2705                             		.loc 1 131 5 is_stmt 1
 134:../src/tensorflow/lite/micro/kernels/logistic.cc **** 
 2706                             		.loc 1 134 1 is_stmt 0
 2707 00ab EF A1                   		mov.L	r10, r1
 2708 00ad 3F 6D 20                		rtsd	#128, r6-r13
 2709                             	.LVL210:
 2710                             	.L224:
 111:../src/tensorflow/lite/micro/kernels/logistic.cc ****             data->input_zero_point, data->input_range_radius,
 2711                             		.loc 1 111 40
 2712 00b0 66 17                   		mov.L	#1, r7
 2713                             	.LVL211:
 2714                             		.balign 8,3,2
 2715                             	.L194:
 2716                             	.LBB2547:
 2717                             	.LBB2541:
 2718                             	.LBB2535:
 2719                             	.LBB2407:
 2720                             	.LBB2408:
 2721                             	.LBB2409:
 2722                             	.LBB2410:
 2723                             	.LBB2411:
 2724                             	.LBB2412:
 2725                             		.file 7 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/tens
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** /* Copyright 2017 The TensorFlow Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** ==============================================================================*/
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #ifndef TENSORFLOW_LITE_KERNELS_INTERNAL_COMMON_H_
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #define TENSORFLOW_LITE_KERNELS_INTERNAL_COMMON_H_
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #ifndef ALLOW_SLOW_GENERIC_DEPTHWISECONV_FALLBACK
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #ifdef GEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #define ALLOW_SLOW_GENERIC_DEPTHWISECONV_FALLBACK
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #endif
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #endif
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #include <functional>
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #include "fixedpoint/fixedpoint.h"
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #include "tensorflow/lite/kernels/internal/cppmath.h"
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #include "tensorflow/lite/kernels/internal/optimized/neon_check.h"
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #include "tensorflow/lite/kernels/internal/types.h"
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** namespace tflite {
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** constexpr int kReverseShift = -1;
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** inline void GetActivationMinMax(FusedActivationFunctionType ac,
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                 float* output_activation_min,
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                 float* output_activation_max) {
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   switch (ac) {
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     case FusedActivationFunctionType::kNone:
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_min = std::numeric_limits<float>::lowest();
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_max = std::numeric_limits<float>::max();
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       break;
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     case FusedActivationFunctionType::kRelu:
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_min = 0.f;
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_max = std::numeric_limits<float>::max();
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       break;
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     case FusedActivationFunctionType::kRelu1:
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_min = -1.f;
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_max = 1.f;
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       break;
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     case FusedActivationFunctionType::kRelu6:
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_min = 0.f;
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       *output_activation_max = 6.f;
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       break;
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   }
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** }
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** template <typename T>
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                       T output_activation_max) {
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using std::max;
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using std::min;
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   return min(max(x, output_activation_min), output_activation_max);
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** }
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** // Legacy function, left for compatibility only.
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** template <FusedActivationFunctionType Ac>
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** float ActivationFunction(float x) {
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   float output_activation_min, output_activation_max;
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   return ActivationFunctionWithMinMax(x, output_activation_min,
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                       output_activation_max);
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** }
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** inline void BiasAndClamp(float clamp_min, float clamp_max, int bias_size,
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                          const float* bias_data, int array_size,
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                          float* array_data) {
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   // Note: see b/132215220: in May 2019 we thought it would be OK to replace
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   // this with the Eigen one-liner:
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   //   return (array.colwise() + bias).cwiseMin(clamp_max).cwiseMin(clamp_max).
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   // This turned out to severely regress performance: +4ms (i.e. 8%) on
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   // MobileNet v2 / 1.0 / 224. So we keep custom NEON code for now.
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   TFLITE_DCHECK_EQ((array_size % bias_size), 0);
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #ifdef USE_NEON
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   float* array_ptr = array_data;
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   float* array_end_ptr = array_ptr + array_size;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   const auto clamp_min_vec = vdupq_n_f32(clamp_min);
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   const auto clamp_max_vec = vdupq_n_f32(clamp_max);
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   for (; array_ptr != array_end_ptr; array_ptr += bias_size) {
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     int i = 0;
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     for (; i <= bias_size - 16; i += 16) {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto b0 = vld1q_f32(bias_data + i);
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto b1 = vld1q_f32(bias_data + i + 4);
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto b2 = vld1q_f32(bias_data + i + 8);
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto b3 = vld1q_f32(bias_data + i + 12);
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto a0 = vld1q_f32(array_ptr + i);
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto a1 = vld1q_f32(array_ptr + i + 4);
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto a2 = vld1q_f32(array_ptr + i + 8);
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto a3 = vld1q_f32(array_ptr + i + 12);
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto x0 = vaddq_f32(a0, b0);
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto x1 = vaddq_f32(a1, b1);
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto x2 = vaddq_f32(a2, b2);
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto x3 = vaddq_f32(a3, b3);
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x0 = vmaxq_f32(clamp_min_vec, x0);
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x1 = vmaxq_f32(clamp_min_vec, x1);
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x2 = vmaxq_f32(clamp_min_vec, x2);
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x3 = vmaxq_f32(clamp_min_vec, x3);
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x0 = vminq_f32(clamp_max_vec, x0);
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x1 = vminq_f32(clamp_max_vec, x1);
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x2 = vminq_f32(clamp_max_vec, x2);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x3 = vminq_f32(clamp_max_vec, x3);
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       vst1q_f32(array_ptr + i, x0);
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       vst1q_f32(array_ptr + i + 4, x1);
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       vst1q_f32(array_ptr + i + 8, x2);
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       vst1q_f32(array_ptr + i + 12, x3);
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     }
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     for (; i <= bias_size - 4; i += 4) {
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto b = vld1q_f32(bias_data + i);
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto a = vld1q_f32(array_ptr + i);
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       auto x = vaddq_f32(a, b);
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x = vmaxq_f32(clamp_min_vec, x);
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       x = vminq_f32(clamp_max_vec, x);
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       vst1q_f32(array_ptr + i, x);
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     }
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     for (; i < bias_size; i++) {
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       array_ptr[i] = ActivationFunctionWithMinMax(array_ptr[i] + bias_data[i],
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                                   clamp_min, clamp_max);
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     }
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   }
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #else  // not NEON
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   for (int array_offset = 0; array_offset < array_size;
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****        array_offset += bias_size) {
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     for (int i = 0; i < bias_size; i++) {
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       array_data[array_offset + i] = ActivationFunctionWithMinMax(
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****           array_data[array_offset + i] + bias_data[i], clamp_min, clamp_max);
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     }
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   }
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** #endif
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** }
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** inline int32_t MultiplyByQuantizedMultiplierSmallerThanOneExp(
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     int32_t x, int32_t quantized_multiplier, int left_shift) {
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using gemmlowp::RoundingDivideByPOT;
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using gemmlowp::SaturatingRoundingDoublingHighMul;
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   return RoundingDivideByPOT(
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****       SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** }
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** inline int32_t MultiplyByQuantizedMultiplierGreaterThanOne(
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****     int32_t x, int32_t quantized_multiplier, int left_shift) {
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using gemmlowp::SaturatingRoundingDoublingHighMul;
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                            quantized_multiplier);
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** }
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** 
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h **** inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                              int32_t quantized_multiplier,
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****                                              int shift) {
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using gemmlowp::RoundingDivideByPOT;
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using gemmlowp::SaturatingRoundingDoublingHighMul;
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   int left_shift = shift > 0 ? shift : 0;
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   int right_shift = shift > 0 ? 0 : -shift;
 2726                             		.loc 7 162 31
 2727 00b2 FC 07 1E                		neg	r1, r14
 2728 00b5 61 01                   		cmp	#0, r1
 2729 00b7 2B 04                   		ble 1f
 2730 00b9 66 0E                   		mov #0, r14
 2731                             	1:
 2732                             	.LBB2413:
 2733                             	.LBB2414:
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType zero = Dup<IntegerType>(0);
 2734                             		.loc 3 371 50
 2735 00bb 71 E4 E0                		add	#-32, r14, r4
 2736 00be 27 4D                   		bn	.L196
 2737 00c0 66 04                   		mov.L	#0, r4
 2738                             		.balign 8,3,1
 2739                             	.L197:
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType zero = Dup<IntegerType>(0);
 2740                             		.loc 3 371 63
 2741 00c2 60 14                   		sub	#1, r4
 2742 00c4 A4 04                   		mov.L	r4, 64[r0]
 2743 00c6 FC 07 F4                		neg	r15, r4
 2744                             	.LBB2415:
 2745                             	.LBB2416:
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2746                             		.loc 3 142 15
 2747 00c9 AC 03                   		mov.L	64[r0], r3
 2748 00cb 6A 13                   		shar	#1, r3
 2749 00cd A4 8B                   		mov.L	r3, 76[r0]
 2750 00cf 66 06                   		mov.L	#0, r6
 2751                             	.LBE2416:
 2752                             	.LBE2415:
 2753                             	.LBE2414:
 2754                             	.LBE2413:
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   int right_shift = shift > 0 ? 0 : -shift;
 2755                             		.loc 7 161 7
 2756 00d1 FD 74 41 00             		max	#0, r1
 2757 00d5 A5 01                   		mov.L	r1, 80[r0]
 2758                             	.LBB2432:
 2759                             	.LBB2433:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2760                             		.loc 3 346 35
 2761 00d7 EF 5C                   		mov.L	r5, r12
 2762 00d9 EF D5                   		mov.L	r13, r5
 2763 00db EF FD                   		mov.L	r15, r13
 2764 00dd 2E 0D                   		bra	.L211
 2765                             	.LVL212:
 2766                             	.L253:
 2767                             	.LBE2433:
 2768                             	.LBE2432:
 2769                             	.LBE2412:
 2770                             	.LBE2411:
 2771                             	.LBE2410:
 2772                             	.LBE2409:
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     const int32_t input =
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****         static_cast<int32_t>(input_data[i]) - input_zero_point;
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     if (input <= -input_range_radius) {
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       output_data[i] = kMinInt8;
 2773                             		.loc 6 39 7 is_stmt 1
 2774                             		.loc 6 39 22 is_stmt 0
 2775 00df F8 A4 80                		mov.B	#-128, [r10]
 2776                             	.LVL213:
 2777                             		.balign 8,3,1
 2778                             	.L199:
 2779                             	.LBE2408:
 2780                             	.LBE2407:
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     const int32_t input =
 2781                             		.loc 6 35 3
 2782 00e2 62 16                   		add	#1, r6
 2783                             	.LVL214:
 2784 00e4 62 1A                   		add	#1, r10
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     const int32_t input =
 2785                             		.loc 6 35 21
 2786 00e6 47 76                   		cmp	r7, r6
 2787 00e8 28 98                   		bge	.L210
 2788                             	.LVL215:
 2789                             		.balign 8,3,5
 2790                             	.L211:
 2791                             	.LBB2529:
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     const int32_t input =
 2792                             		.loc 6 36 5 is_stmt 1
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     if (input <= -input_range_radius) {
 2793                             		.loc 6 37 9 is_stmt 0
 2794 00ea FD 28 B3                		mov.B	[r11+], r3
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     const int32_t input =
 2795                             		.loc 6 36 19
 2796 00ed 43 C3                   		sub	r12, r3
 2797                             	.LVL216:
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       output_data[i] = kMinInt8;
 2798                             		.loc 6 38 5 is_stmt 1
 2799                             	.LBB2523:
 2800 00ef 47 34                   		cmp	r3, r4
 2801 00f1 28 EE                   		bge	.L253
 2802                             	.LBE2523:
 2803                             	.LBE2529:
 2804                             	.LBE2535:
 2805                             	.LBE2541:
 2806                             	.LBE2547:
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     } else if (input >= input_range_radius) {
 2807                             		.loc 6 40 12
 2808                             	.LBB2548:
 2809                             	.LBB2542:
 2810                             	.LBB2536:
 2811                             	.LBB2530:
 2812                             	.LBB2524:
 2813                             	.LBB2518:
 2814 00f3 47 3D                   		cmp	r3, r13
 2815 00f5 2A 1D                   		bgt	.L200
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       output_data[i] = kMaxInt8;
 2816                             		.loc 6 41 7
 2817                             		.loc 6 41 22 is_stmt 0
 2818 00f7 F8 A4 7F                		mov.B	#0x7f, [r10]
 2819 00fa 2E E8                   		bra	.L199
 2820                             	.LVL217:
 2821                             	.L252:
 2822                             	.LBE2518:
 2823                             	.LBE2524:
 2824                             	.LBE2530:
 2825                             	.LBE2536:
 2826                             	.LBE2542:
 2827                             	.LBE2548:
  94:../src/tensorflow/lite/micro/kernels/logistic.cc ****       case kTfLiteFloat32: {
 2828                             		.loc 1 94 5 is_stmt 1
 2829 00fc ED 1C 02                		mov.L	8[r1], r12
 2830 00ff 61 1C                   		cmp	#1, r12
 2831 0101 3A EA 00                		beq	.L254
 102:../src/tensorflow/lite/micro/kernels/logistic.cc ****         TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
 2832                             		.loc 1 102 7
 103:../src/tensorflow/lite/micro/kernels/logistic.cc ****                            TfLiteTypeGetName(input->type),
 2833                             		.loc 1 103 9
 103:../src/tensorflow/lite/micro/kernels/logistic.cc ****                            TfLiteTypeGetName(input->type),
 2834                             		.loc 1 103 9
 2835 0104 EF A1                   		mov.L	r10, r1
 2836                             	.LVL218:
 2837 0106 ED 7B 05                		mov.L	20[r7], r11
 2838                             	.LVL219:
 2839 0109 2E 87                   		bra	.L251
 2840                             	.LVL220:
 2841                             	.L196:
 2842                             	.LBB2549:
 2843                             	.LBB2543:
 2844                             	.LBB2537:
 2845                             	.LBB2531:
 2846                             	.LBB2525:
 2847                             	.LBB2519:
 2848                             	.LBB2514:
 2849                             	.LBB2448:
 2850                             	.LBB2443:
 2851                             	.LBB2437:
 2852                             	.LBB2429:
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType zero = Dup<IntegerType>(0);
 2853                             		.loc 3 371 50 is_stmt 0
 2854 010b 66 14                   		mov.L	#1, r4
 2855 010d FD 62 E4                		shll	r14, r4
 2856 0110 2E B2                   		bra	.L197
 2857                             	.LVL221:
 2858                             	.L200:
 2859                             	.LBE2429:
 2860                             	.LBE2437:
 2861                             	.LBE2443:
 2862                             	.LBE2448:
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****     } else {
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       const int32_t input_in_q4 = MultiplyByQuantizedMultiplier(
 2863                             		.loc 6 43 7 is_stmt 1
 2864                             	.LBB2449:
 2865                             	.LBB2444:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   using gemmlowp::SaturatingRoundingDoublingHighMul;
 2866                             		.loc 7 159 3
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   int left_shift = shift > 0 ? shift : 0;
 2867                             		.loc 7 160 3
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   int right_shift = shift > 0 ? 0 : -shift;
 2868                             		.loc 7 161 3
 2869                             		.loc 7 162 3
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\common.h ****   return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 2870                             		.loc 7 163 3
 2871                             		.loc 7 163 29 is_stmt 0
 2872 0112 EF 31                   		mov.L	r3, r1
 2873 0114 ED 08 14                		mov.L	80[r0], r8
 2874 0117 FD 62 81                		shll	r8, r1
 2875                             	.LVL222:
 2876                             	.LBB2438:
 2877                             	.LBB2434:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 2878                             		.loc 3 342 3 is_stmt 1
 2879 011a EF 18                   		mov.L	r1, r8
 2880                             	.LVL223:
 2881 011c FC 1B 58                		emul	r5, r8
 2882 011f EF 82                   		mov.L	r8, r2
 2883 0121 EF 93                   		mov.L	r9, r3
 2884                             	.LVL224:
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t a_64(a);
 2885                             		.loc 3 342 26 is_stmt 0
 2886 0123 47 15                   		cmp	r1, r5
 2887 0125 3A 93 01                		beq	.L255
 2888                             	.LVL225:
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 2889                             		.loc 3 343 3 is_stmt 1
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 2890                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 2891                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2892                             		.loc 3 346 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 2893                             		.loc 3 346 35 is_stmt 0
 2894 0128 61 09                   		cmp	#0, r9
 2895 012a 28 05 38 B4 01          		blt	.L256
 2896                             	.LVL226:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 2897                             		.loc 3 347 3 is_stmt 1
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2898                             		.loc 3 349 3
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2899                             		.loc 3 348 40 is_stmt 0
 2900 012f EF 31                   		mov.L	r3, r1
 2901 0131 70 28 00 00 00 40       		add	#0x40000000, r2, r8
 2902 0137 FD 74 21 00             		adc	#0, r1
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 2903                             		.loc 3 348 49
 2904 013b 6C 11                   		shll	#1, r1
 2905 013d FD 9F 83                		shlr	#31, r8, r3
 2906 0140 57 31                   		or	r3, r1
 2907                             	.LVL227:
 2908                             		.balign 8,3,2
 2909                             	.L204:
 2910                             	.LBE2434:
 2911                             	.LBE2438:
 2912                             	.LBB2439:
 2913                             	.LBB2430:
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 2914                             		.loc 3 370 3
 2915 0142 75 5E 1F                		cmp	#31, r14
 2916 0145 2B 05 38 7A 02          		bgt	.L257
 2917                             	.LVL228:
 2918                             	.LBB2417:
 2919                             	.LBB2418:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2920                             		.loc 3 71 14
 2921 014a FD 9F 12                		shlr	#31, r1, r2
 2922                             	.LBE2418:
 2923                             	.LBE2417:
 2924                             	.LBB2419:
 2925                             	.LBB2420:
 2926 014d AC 03                   		mov.L	64[r0], r3
 2927 014f 53 13                   		and	r1, r3
 2928                             	.LVL229:
 2929                             	.LBE2420:
 2930                             	.LBE2419:
 2931                             	.LBB2421:
 2932                             	.LBB2422:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2933                             		.loc 3 95 14
 2934 0151 06 89 02 13             		add	76[r0], r2
 2935                             	.LBE2422:
 2936                             	.LBE2421:
 2937                             	.LBB2423:
 2938                             	.LBB2424:
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2939                             		.loc 3 142 15
 2940 0155 FD 61 E1                		shar	r14, r1
 2941                             	.LVL230:
 2942                             	.LBE2424:
 2943                             	.LBE2423:
 2944                             	.LBB2425:
 2945                             	.LBB2426:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2946                             		.loc 3 71 14
 2947 0158 47 23                   		cmp	r2, r3
 2948 015a FC DB 3A                		scgt.L	r3
 2949                             	.LVL231:
 2950                             	.LBE2426:
 2951                             	.LBE2425:
 2952                             	.LBB2427:
 2953                             	.LBB2428:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2954                             		.loc 3 95 14
 2955 015d 4B 31                   		add	r3, r1
 2956                             	.LVL232:
 2957                             	.LBE2428:
 2958                             	.LBE2427:
 2959                             	.LBE2430:
 2960                             	.LBE2439:
 2961                             	.LBE2444:
 2962                             	.LBE2449:
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****           input, input_multiplier, input_left_shift);
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       using FixedPoint4 = gemmlowp::FixedPoint<int32_t, kInputIntegerBits>;
 2963                             		.loc 6 45 7 is_stmt 1
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       const int32_t output_in_q0 =
 2964                             		.loc 6 46 7
 2965 015f FC 07 13                		neg	r1, r3
 2966                             	.LBB2450:
 2967                             	.LBB2451:
 2968                             	.LBB2452:
 2969                             	.LBB2453:
 2970                             	.LBB2454:
 2971                             	.LBB2455:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 2972                             		.loc 3 159 12 is_stmt 0
 2973 0162 61 01                   		cmp	#0, r1
 2974 0164 2B 05 38 4A 02          		bgt	.L227
 2975                             	.LVL233:
 2976                             	.LBE2455:
 2977                             	.LBE2454:
 2978                             	.LBE2453:
 2979                             	.LBE2452:
 2980                             	.LBB2462:
 2981                             	.LBB2463:
 2982                             	.LBB2464:
 2983                             	.LBB2465:
 2984 0169 FC DB 30                		sceq.L	r3
 2985 016c FC 07 38                		neg	r3, r8
 2986 016f 60 13                   		sub	#1, r3
 2987 0171 A4 0B                   		mov.L	r3, 68[r0]
 2988 0173 74 28 00 00 00 40       		and #0x40000000, r8
 2989 0179 F9 06 12 FF             		mov.L	#-1, 72[r0]
 2990                             	.LBE2465:
 2991                             	.LBE2464:
 2992                             	.LBE2463:
 2993                             	.LBE2462:
 2994                             	.LBB2466:
 2995                             	.LBB2460:
 2996                             	.LBB2458:
 2997                             	.LBB2456:
 2998 017d 66 09                   		mov.L	#0, r9
 2999                             	.LVL234:
 3000 017f 03                      		.balign 8,3,5
 3001                             	.L207:
 3002                             	.LBE2456:
 3003                             	.LBE2458:
 3004                             	.LBE2460:
 3005                             	.LBE2466:
 3006                             	.LBB2467:
 3007                             	.LBB2468:
 875:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** 
 876:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** // Returns logistic(x) = 1 / (1 + exp(-x)) for x > 0.
 877:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** template <typename tRawType, int tIntegerBits>
 878:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** FixedPoint<tRawType, 0> logistic_on_positive_values(
 879:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****     FixedPoint<tRawType, tIntegerBits> a) {
 880:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
 3008                             		.loc 3 880 42
 3009 0180 A5 84                   		mov.L	r4, 88[r0]
 3010                             	.LVL235:
 3011 0182 A5 0D                   		mov.L	r5, 84[r0]
 3012 0184 E7 0E 17                		mov.L	r14, 92[r0]
 3013 0187 05 00 00 00             		bsr	__ZN8gemmlowp22exp_on_negative_valuesIlLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE
 3014                             	.LVL236:
 3015 018b 05 00 00 00             		bsr	__ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_
 3016                             	.LVL237:
 3017                             	.LBE2468:
 3018                             	.LBE2467:
 3019                             	.LBB2469:
 3020                             	.LBB2470:
 3021                             	.LBB2471:
 3022                             	.LBB2472:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3023                             		.loc 3 71 14
 3024 018f 53 19                   		and	r1, r9
 3025                             	.LVL238:
 3026                             	.LBE2472:
 3027                             	.LBE2471:
 3028                             	.LBE2470:
 3029                             	.LBE2469:
 3030                             	.LBB2478:
 3031                             	.LBB2479:
 3032                             	.LBB2480:
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3033                             		.loc 3 107 14
 3034 0191 FB 32 FF FF FF 7F       		mov.L	#0x7fffffff, r3
 3035 0197 FF 01 13                		sub	r1, r3, r1
 3036                             	.LVL239:
 3037                             	.LBE2480:
 3038                             	.LBE2479:
 3039                             	.LBE2478:
 3040                             	.LBE2451:
 3041                             	.LBE2450:
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****           gemmlowp::logistic(FixedPoint4::FromRaw(input_in_q4)).raw();
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h **** 
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       // Rescale and downcast.
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       using gemmlowp::RoundingDivideByPOT;
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       int32_t output_in_q23 =
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****           RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****                                         static_cast<int32_t>(kMinInt8)),
 3042                             		.loc 6 54 41
 3043 019a F9 06 09 80             		mov.L	#-128, 36[r0]
 3044                             	.LBB2491:
 3045                             	.LBB2489:
 3046                             	.LBB2481:
 3047                             	.LBB2477:
 3048                             	.LBB2473:
 3049                             	.LBB2474:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3050                             		.loc 3 71 14
 3051 019e 06 91 01 12             		and	72[r0], r1
 3052                             	.LVL240:
 3053                             	.LBE2474:
 3054                             	.LBE2473:
 3055                             	.LBB2475:
 3056                             	.LBB2476:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3057                             		.loc 3 83 14
 3058 01a2 FC 37 91                		xor	r9, r1
 3059                             	.LVL241:
 3060                             	.LBE2476:
 3061                             	.LBE2475:
 3062                             	.LBE2477:
 3063                             	.LBE2481:
 3064                             	.LBB2482:
 3065                             	.LBB2483:
 3066                             	.LBB2484:
 3067                             	.LBB2485:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3068                             		.loc 3 71 14
 3069 01a5 AC 0B                   		mov.L	68[r0], r3
 3070 01a7 53 13                   		and	r1, r3
 3071                             	.LVL242:
 3072                             	.LBE2485:
 3073                             	.LBE2484:
 3074                             	.LBB2486:
 3075                             	.LBB2487:
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3076                             		.loc 3 83 14
 3077 01a9 FC 37 38                		xor	r3, r8
 3078                             	.LVL243:
 3079                             	.LBE2487:
 3080                             	.LBE2486:
 3081                             	.LBE2483:
 3082                             	.LBE2482:
 3083                             	.LBE2489:
 3084                             	.LBE2491:
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       int32_t output_in_q23 =
 3085                             		.loc 6 50 7 is_stmt 1
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****           RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
 3086                             		.loc 6 51 7
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****                                         static_cast<int32_t>(kMinInt8)),
 3087                             		.loc 6 53 7
 3088                             	.LBB2492:
 3089                             	.LBB2493:
 3090                             	.LBB2494:
 3091                             	.LBB2495:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3092                             		.loc 3 95 14 is_stmt 0
 3093 01ac FB 2E 00 00 40          		mov.L	#0x400000, r2
 3094 01b1 27 07                   		bn 1f
 3095 01b3 FB 2E FF FF 3F          		mov #0x3fffff, r2
 3096                             	1:
 3097                             	.LBE2495:
 3098                             	.LBE2494:
 3099                             	.LBB2496:
 3100                             	.LBB2497:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3101                             		.loc 3 71 14
 3102 01b8 FB 3E FF FF 7F          		mov.L	#0x7fffff, r3
 3103 01bd 53 83                   		and	r8, r3
 3104                             	.LVL244:
 3105                             	.LBE2497:
 3106                             	.LBE2496:
 3107                             	.LBB2498:
 3108                             	.LBB2499:
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3109                             		.loc 3 142 15
 3110 01bf 6B 78                   		shar	#23, r8
 3111                             	.LVL245:
 3112                             	.LBE2499:
 3113                             	.LBE2498:
 3114                             	.LBB2500:
 3115                             	.LBB2501:
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3116                             		.loc 3 71 14
 3117 01c1 47 23                   		cmp	r2, r3
 3118 01c3 FC DB 3A                		scgt.L	r3
 3119                             	.LVL246:
 3120                             	.LBE2501:
 3121                             	.LBE2500:
 3122                             	.LBB2502:
 3123                             	.LBB2503:
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3124                             		.loc 3 95 14
 3125 01c6 4B 83                   		add	r8, r3
 3126                             	.LBE2503:
 3127                             	.LBE2502:
 3128                             	.LBE2493:
 3129                             	.LBE2492:
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****                                         static_cast<int32_t>(kMinInt8)),
 3130                             		.loc 6 53 55
 3131 01c8 71 33 80                		add	#-128, r3
 3132 01cb A0 8B                   		mov.L	r3, 12[r0]
 3133                             	.LBB2504:
 3134                             	.LBB2505:
 3135                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3.
   1:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
   3:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // Copyright (C) 2001-2018 Free Software Foundation, Inc.
   4:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** //
   5:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // any later version.
  10:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  11:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  16:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  20:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  25:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** /*
  26:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  *
  27:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  *
  30:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  *
  38:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  *
  39:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  *
  42:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  */
  50:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  51:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****  */
  55:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  56:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  59:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #include <bits/predefined_ops.h>
  72:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  73:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** {
  75:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  77:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #if __cplusplus < 201103L
  78:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   template<bool _BoolType>
  82:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     struct __iter_swap
  83:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     {
  84:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	static void
  86:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	{
  88:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	    _ValueType1;
  90:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
  91:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	  *__a = *__b;
  92:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	  *__b = __tmp;
  93:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	}
  94:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     };
  95:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
  96:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   template<>
  97:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     struct __iter_swap<true>
  98:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     {
  99:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	static void
 101:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	{
 103:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	  swap(*__a, *__b);
 104:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	}
 105:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     };
 106:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #endif
 107:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 108:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   /**
 109:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 112:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 113:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @return   Nothing.
 114:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *
 115:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  iterators themselves.
 117:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   */
 118:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     inline void
 120:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     {
 122:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       // concept requirements
 123:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 125:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 127:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 128:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #if __cplusplus < 201103L
 129:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	_ValueType1;
 131:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	_ValueType2;
 133:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 134:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 				  _ValueType2>)
 136:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 				  _ValueType1>)
 138:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 139:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	_ReferenceType1;
 141:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	_ReferenceType2;
 143:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 147:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #else
 148:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       swap(*__a, *__b);
 149:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** #endif
 150:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     }
 151:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 152:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   /**
 153:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *
 160:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  The ranges must not overlap.
 163:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   */
 164:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     _ForwardIterator2
 166:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     {
 169:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       // concept requirements
 170:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 172:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 174:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 176:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 177:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       return __first2;
 179:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     }
 180:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 181:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   /**
 182:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 183:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *
 188:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  preprocessor macro.
 191:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   */
 192:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   template<typename _Tp>
 193:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 194:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 195:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 196:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     {
 197:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       // concept requirements
 198:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 199:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 200:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       if (__b < __a)
 201:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	return __b;
 202:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       return __a;
 203:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     }
 204:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 
 205:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   /**
 206:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 207:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 208:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 209:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 210:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 211:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *
 212:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 213:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 214:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****    *  preprocessor macro.
 215:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   */
 216:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****   template<typename _Tp>
 217:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 218:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 219:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 220:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****     {
 221:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       // concept requirements
 222:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 223:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 224:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h ****       if (__a < __b)
 3136                             		.loc 8 224 7
 3137 01cd AD 84                   		mov.L	88[r0], r4
 3138 01cf AD 0D                   		mov.L	84[r0], r5
 3139 01d1 ED 0E 17                		mov.L	92[r0], r14
 3140 01d4 75 03 80                		cmp	#-128, r3
 3141 01d7 28 05 38 D7 00          		blt	.L228
 3142                             	.LVL247:
 3143                             	.LBE2505:
 3144                             	.LBE2504:
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****                                static_cast<int32_t>(kMaxInt8));
 3145                             		.loc 6 55 32
 3146 01dc 3E 0F 7F                		mov.L	#0x7f, 60[r0]
 3147                             	.LVL248:
 3148                             	.LBB2507:
 3149                             	.LBB2508:
 200:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\bits\stl_algobase.h **** 	return __b;
 3150                             		.loc 8 200 7
 3151 01df 75 53 80                		cmp	#0x80, r3
 3152 01e2 1C                      		bne	.L209
 3153 01e3 75 43 7F                		mov	#0x7f, r3
 3154                             		.balign 8,3,1
 3155                             	.L209:
 3156                             	.LVL249:
 3157                             	.LBE2508:
 3158                             	.LBE2507:
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference/integer_ops\logistic.h ****       output_data[i] = static_cast<int8_t>(output_in_q23);
 3159                             		.loc 6 56 7 is_stmt 1
 3160                             		.loc 6 56 22 is_stmt 0
 3161 01e6 C3 A3                   		mov.B	r3, [r10]
 3162 01e8 38 FA FE                		bra	.L199
 3163                             	.LVL250:
 3164                             	.L254:
 3165                             	.LBE2514:
 3166                             	.LBE2519:
 3167                             	.LBE2525:
 3168                             	.LBE2531:
 3169                             	.LBE2537:
 3170                             	.LBE2543:
 3171                             	.LBE2549:
  95:../src/tensorflow/lite/micro/kernels/logistic.cc ****         reference_ops::Logistic(tflite::micro::GetTensorShape(input),
 3172                             		.loc 1 95 7 is_stmt 1
  95:../src/tensorflow/lite/micro/kernels/logistic.cc ****         reference_ops::Logistic(tflite::micro::GetTensorShape(input),
 3173                             		.loc 1 95 28
  96:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                 tflite::micro::GetTensorData<float>(input),
 3174                             		.loc 1 96 9
  96:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                 tflite::micro::GetTensorData<float>(input),
 3175                             		.loc 1 96 62 is_stmt 0
 3176 01eb 71 0F 24                		add	#36, r0, r15
 3177 01ee EF B1                   		mov.L	r11, r1
 3178                             	.LVL251:
 3179 01f0 05 00 00 00             		bsr	__ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor
 3180                             	.LVL252:
  98:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                 tflite::micro::GetTensorData<float>(output));
 3181                             		.loc 1 98 62
 3182 01f4 66 CF                   		mov.L	#12, r15
 3183 01f6 4B 0F                   		add	r0, r15
 3184 01f8 EF 61                   		mov.L	r6, r1
 3185                             	.LBB2550:
 3186                             	.LBB2551:
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** }
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** // Returns data for a TfLiteEvalTensor struct.
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** template <typename T>
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** T* GetTensorData(TfLiteEvalTensor* tensor) {
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** }
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** // Returns const data for a TfLiteEvalTensor struct.
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** template <typename T>
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   TFLITE_DCHECK(tensor != nullptr);
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   return reinterpret_cast<const T*>(tensor->data.raw);
 3187                             		.loc 4 62 53
 3188 01fa EC BB                   		mov.L	[r11], r11
 3189                             	.LVL253:
 3190                             	.LBE2551:
 3191                             	.LBE2550:
  98:../src/tensorflow/lite/micro/kernels/logistic.cc ****                                 tflite::micro::GetTensorData<float>(output));
 3192                             		.loc 1 98 62
 3193 01fc 05 00 00 00             		bsr	__ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor
 3194                             	.LVL254:
 3195                             	.LBB2552:
 3196                             	.LBB2553:
 3197                             	.LBB2554:
 3198                             	.LBB2555:
 3199                             		.file 9 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/tens
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** /* Copyright 2018 The TensorFlow Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** ==============================================================================*/
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #ifndef TENSORFLOW_LITE_KERNELS_INTERNAL_TYPES_H_
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #define TENSORFLOW_LITE_KERNELS_INTERNAL_TYPES_H_
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #include <algorithm>
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #include <cstdint>
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #include <cstring>
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #include <initializer_list>
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #include "tensorflow/lite/kernels/internal/compatibility.h"
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** namespace tflite {
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** enum class FusedActivationFunctionType : uint8_t {
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   kNone,
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   kRelu6,
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   kRelu1,
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   kRelu
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** };
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** enum class PaddingType : uint8_t { kNone, kSame, kValid };
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** struct PaddingValues {
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int16_t width;
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int16_t height;
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // offset is used for calculating "remaining" padding, for example, `width`
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // is 1 and `width_offset` is 1, so padding_left is 1 while padding_right is
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // 1 + 1 = 2.
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int16_t width_offset;
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Same as width_offset except it's over the height dimension.
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int16_t height_offset;
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** };
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // This enumeration allows for non-default formats for the weights array
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // of a fully-connected operator, allowing the use of special optimized
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // runtime paths.
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** enum class FullyConnectedWeightsFormat : uint8_t {
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Default format (flat 2D layout, the inner contiguous dimension
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // is input_depth, the outer non-contiguous dimension is output_depth)
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   kDefault,
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Summary: optimized layout for fast CPU runtime implementation,
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // aimed specifically at ARM CPUs at the moment, and specialized for
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // 8-bit quantized layers.
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // The use case we're concerned with here is: 8-bit quantization,
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // large weights matrix that doesn't fit in cache (e.g. 4096x2048 in
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // a key application that drove this), very small batch size (e.g. 1 -- 4).
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Even with 8-bit quantization of weights, the performance of memory
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // accesses to the weights can become the dominant issue when
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // the batch size is small, so each weight value is used in only a few
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // arithmetic ops, i.e. the fully-connected node has a low arithmetic
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // intensity. The specific issues that arise are of three kinds:
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // (1) One may, ideally, max out DRAM bandwidth, i.e. be truly memory
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //     bound. That's the "good" issue to run into.
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // (2) One may run into sub-optimal pre-fetching: the data hasn't been
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //     prefetched into the cache by the time we need it.
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // (3) One may run into cache aliasing: multiple values that are
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //     pre-fetched, alias each other in the L1 cache (which typically
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //     has only 4-way set associativity in ARM CPUs) and thus evict
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //     each other before we get to using them.
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // The point of this shuffling is to avoid issues (2) and (3) so that
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // we get as fast as possible given only the hard constraint (1).
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // This is achieved by turning the difficulty into a solution: the
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // difficulty, that each value loaded from memory is used only in
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // one kernel iteration, making this operation memory-intensive, hints at
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // the solution, of shuffling the weights so that they are stored in the
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // exact order as the kernel needs to load them, so that the memory
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // accesses made by the kernel are trivial. This solves (2) because the
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // trivial memory access pattern allows the CPU's automatic prefetching
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // to perform very well (no need even for preload instructions), and this
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // solves (3) because the values being loaded concurrently are now
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // contiguous in the address space, thus don't alias each other in the cache.
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // On ARM, we typically want our kernel to process a 4x16 block of weights
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // at a time, because:
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //   - 16 is the number of bytes in a NEON register.
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //   - 4 is how many rows we need to handle concurrently in the kernel in
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //     order to have sufficient mutual independence of instructions to
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //     maximize arithmetic throughput.
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Finally, the 'Int8' part in the name refers to the fact that this
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // weights format has each weights value encoded as a signed int8_t value,
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // even if the data type of the weights buffer is uint8_t.  This is intended
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // to save runtime kernels the effort to have to XOR the top bit of these
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // bytes before using them in signed arithmetic, see this file for more
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // explanations on the 'signed int8_t trick' in matrix multiplication kernels:
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //   tensorflow/lite/toco/graph_transformations/ensure_uint8_weights_safe_for_fast_int8_kernels.c
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   //
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   kShuffled4x16Int8,
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** };
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Quantization parameters, determining the mapping of quantized values
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // to real values (i.e. determining how quantized values are mathematically
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // interpreted).
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** //
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // The correspondence is as follows:
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** //
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** //   real_value = scale * (quantized_value - zero_point);
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** //
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // In other words, zero_point designates which quantized value corresponds to
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // the real 0 value, and scale designates the difference between the real values
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // corresponding to consecutive quantized values differing by 1.
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** struct QuantizationParams {
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int32_t zero_point = 0;
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   double scale = 0.0;
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** };
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline bool operator==(const QuantizationParams& qp1,
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                        const QuantizationParams& qp2) {
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return qp1.zero_point == qp2.zero_point && qp1.scale == qp2.scale;
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** template <int N>
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** struct Dims {
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int sizes[N];
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int strides[N];
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** };
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** class RuntimeShape {
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****  public:
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Shapes with dimensions up to 5 are stored directly in the structure, while
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // larger shapes are separately allocated.
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   static constexpr int kMaxSmallSize = 5;
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   RuntimeShape& operator=(RuntimeShape const&) = delete;
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   RuntimeShape() : size_(0) {}
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   explicit RuntimeShape(int dimensions_count) : size_(dimensions_count) {
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (dimensions_count > kMaxSmallSize) {
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #ifdef TF_LITE_STATIC_MEMORY
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       TFLITE_CHECK(false && "No shape resizing supported on this platform");
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #else  // TF_LITE_STATIC_MEMORY
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       dims_pointer_ = new int32_t[dimensions_count];
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   RuntimeShape(int shape_size, int32_t value) : size_(0) {
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     Resize(shape_size);
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     for (int i = 0; i < shape_size; ++i) {
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       SetDim(i, value);
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     ReplaceWith(dimensions_count, dims_data);
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   RuntimeShape(const std::initializer_list<int> init_list) : size_(0) {
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     BuildFrom(init_list);
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Avoid using this constructor.  We should be able to delete it when C++17
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // rolls out.
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   RuntimeShape(RuntimeShape const& other) : size_(other.DimensionsCount()) {
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (size_ > kMaxSmallSize) {
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       dims_pointer_ = new int32_t[size_];
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     std::memcpy(DimsData(), other.DimsData(), sizeof(int32_t) * size_);
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   bool operator==(const RuntimeShape& comp) const {
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return this->size_ == comp.size_ &&
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****            std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                0;
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   ~RuntimeShape() {
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (size_ > kMaxSmallSize) {
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #ifdef TF_LITE_STATIC_MEMORY
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       TFLITE_CHECK(false && "No shape resizing supported on this platform");
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #else  // TF_LITE_STATIC_MEMORY
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       delete[] dims_pointer_;
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline int32_t DimensionsCount() const { return size_; }
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline int32_t Dims(int i) const {
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_GE(i, 0);
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline void SetDim(int i, int32_t val) {
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_GE(i, 0);
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (size_ > kMaxSmallSize) {
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       dims_pointer_[i] = val;
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     } else {
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       dims_[i] = val;
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline int32_t* DimsData() {
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline const int32_t* DimsData() const {
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // The caller must ensure that the shape is no bigger than 5-D.
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline void Resize(int dimensions_count) {
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (size_ > kMaxSmallSize) {
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #ifdef TF_LITE_STATIC_MEMORY
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       TFLITE_CHECK(false && "No shape resizing supported on this platform");
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #else  // TF_LITE_STATIC_MEMORY
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       delete[] dims_pointer_;
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     size_ = dimensions_count;
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (dimensions_count > kMaxSmallSize) {
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #ifdef TF_LITE_STATIC_MEMORY
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       TFLITE_CHECK(false && "No shape resizing supported on this platform");
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #else  // TF_LITE_STATIC_MEMORY
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       dims_pointer_ = new int32_t[dimensions_count];
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     Resize(dimensions_count);
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     int32_t* dst_dims = DimsData();
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   template <typename T>
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline void BuildFrom(const T& src_iterable) {
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     const int dimensions_count =
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****         std::distance(src_iterable.begin(), src_iterable.end());
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     Resize(dimensions_count);
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     int32_t* data = DimsData();
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     for (auto it : src_iterable) {
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       *data = it;
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       ++data;
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // This will probably be factored out. Old code made substantial use of 4-D
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // shapes, and so this function is used to extend smaller shapes. Note that
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // (a) as Dims<4>-dependent code is eliminated, the reliance on this should be
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // reduced, and (b) some kernels are stricly 4-D, but then the shapes of their
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // inputs should already be 4-D, so this function should not be needed.
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline static RuntimeShape ExtendedShape(int new_shape_size,
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                                            const RuntimeShape& shape) {
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return RuntimeShape(new_shape_size, shape, 1);
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline void BuildFrom(const std::initializer_list<int> init_list) {
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     BuildFrom<const std::initializer_list<int>>(init_list);
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // Returns the total count of elements, that is the size when flattened into a
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // vector.
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline int FlatSize() const {
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     int buffer_size = 1;
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     const int* dims_data = reinterpret_cast<const int*>(DimsData());
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     for (int i = 0; i < size_; i++) {
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       buffer_size *= dims_data[i];
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return buffer_size;
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   bool operator!=(const RuntimeShape& comp) const { return !((*this) == comp); }
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****  private:
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // For use only by ExtendedShape(), written to guarantee (return-value) copy
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // elision in C++17.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   // This creates a shape padded to the desired size with the specified value.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       : size_(0) {
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     // If the following check fails, it is likely because a 4D-only kernel is
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     // being used with an array of larger dimension count.
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     Resize(new_shape_size);
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     const int size_increase = new_shape_size - shape.DimensionsCount();
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     for (int i = 0; i < size_increase; ++i) {
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       SetDim(i, pad_value);
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     std::memcpy(DimsData() + size_increase, shape.DimsData(),
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                 sizeof(int32_t) * shape.DimensionsCount());
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int32_t size_;
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   union {
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     int32_t dims_[kMaxSmallSize];
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     int32_t* dims_pointer_;
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   };
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** };
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Converts inference-style shape to legacy tflite::Dims<4>.
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline tflite::Dims<4> ToRuntimeDims(const tflite::RuntimeShape& array_shape) {
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   tflite::Dims<4> result;
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int dimensions_count = array_shape.DimensionsCount();
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_CHECK_LE(dimensions_count, 4);
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int cum_prod = 1;
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   for (int i = 0; i < 4; i++) {
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     const int new_dim =
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****         (i < dimensions_count) ? array_shape.Dims(dimensions_count - 1 - i) : 1;
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     result.sizes[i] = new_dim;
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     result.strides[i] = cum_prod;
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     cum_prod *= new_dim;
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return result;
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // TODO(b/80418076): Move to legacy ops file, update invocations.
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline RuntimeShape DimsToShape(const tflite::Dims<4>& dims) {
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return RuntimeShape(
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       {dims.sizes[3], dims.sizes[2], dims.sizes[1], dims.sizes[0]});
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Gets next index to iterate through a multidimensional array.
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline bool NextIndex(const int num_dims, const int* dims, int* current) {
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   if (num_dims == 0) {
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return false;
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(dims != nullptr);
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(current != nullptr);
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int carry = 1;
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   for (int idx = num_dims - 1; idx >= 0; --idx) {
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     int current_val = current[idx] + carry;
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_GE(dims[idx], current_val);
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (dims[idx] == current_val) {
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       current[idx] = 0;
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     } else {
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       current[idx] = current_val;
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       carry = 0;
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       break;
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return (carry == 0);
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Gets offset of index if reducing on axis. When reducing, the flattened offset
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // will not change, if the input index changes on the given axis. For example,
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // if you have a 3D tensor and you are reducing to 2D by eliminating axis 0,
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // then index (0, 1, 2) and index (1, 1, 2) will map to the same flattened
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // offset.
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // TODO(kanlig): uses Dims to represent dimensions.
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline size_t ReducedOutputOffset(const int num_dims, const int* dims,
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                                   const int* index, const int num_axis,
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                                   const int* axis) {
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   if (num_dims == 0) {
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return 0;
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(dims != nullptr);
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(index != nullptr);
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   size_t offset = 0;
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   for (int idx = 0; idx < num_dims; ++idx) {
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     // if we need to skip this axis
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     bool is_axis = false;
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (axis != nullptr) {
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****         if (idx == axis[axis_idx]) {
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****           is_axis = true;
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****           break;
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****         }
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       }
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     if (!is_axis) {
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       offset = offset * static_cast<size_t>(dims[idx]) +
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                static_cast<size_t>(index[idx]);
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return offset;
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int Offset(const Dims<4>& dims, int i0, int i1, int i2, int i3) {
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i0 >= 0 && i0 < dims.sizes[0]);
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i1 >= 0 && i1 < dims.sizes[1]);
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i2 >= 0 && i2 < dims.sizes[2]);
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(i3 >= 0 && i3 < dims.sizes[3]);
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return i0 * dims.strides[0] + i1 * dims.strides[1] + i2 * dims.strides[2] +
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****          i3 * dims.strides[3];
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int Offset(const Dims<4>& dims, int* index) {
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return Offset(dims, index[0], index[1], index[2], index[3]);
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int Offset(const RuntimeShape& shape, int* index) {
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return Offset(shape, index[0], index[1], index[2], index[3]);
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Get array size, DCHECKing that the dim index is in range.
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** //
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Note that this will be phased out with Dims<4>, since RuntimeShape::Dims()
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // already performs this check.
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** template <int N>
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** int ArraySize(const Dims<N>& array, int index) {
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK(index >= 0 && index < N);
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return array.sizes[index];
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Get common array size, DCHECKing that they all agree.
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** template <typename ArrayType1, typename ArrayType2>
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** int MatchingArraySize(const ArrayType1& array1, int index1,
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                       const ArrayType2& array2, int index2) {
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK_EQ(ArraySize(array1, index1), ArraySize(array2, index2));
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return ArraySize(array1, index1);
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** template <typename ArrayType1, typename ArrayType2, typename... Args>
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** int MatchingArraySize(const ArrayType1& array1, int index1,
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                       const ArrayType2& array2, int index2, Args... args) {
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK_EQ(ArraySize(array1, index1), ArraySize(array2, index2));
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return MatchingArraySize(array1, index1, args...);
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Get common shape dim, DCHECKing that they all agree.
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int MatchingDim(const RuntimeShape& shape1, int index1,
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                        const RuntimeShape& shape2, int index2) {
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return std::min(shape1.Dims(index1), shape2.Dims(index2));
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** template <typename... Args>
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** int MatchingDim(const RuntimeShape& shape1, int index1,
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                 const RuntimeShape& shape2, int index2, Args... args) {
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return MatchingDim(shape1, index1, args...);
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Will be phased out with Dims<4>, replaced by RuntimeShape::FlatSize().
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** template <int N>
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int FlatSize(const Dims<N>& dims) {
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   int flat_size = 1;
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   for (int i = 0; i < N; ++i) {
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     flat_size *= dims.sizes[i];
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return flat_size;
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** TFLITE_DEPRECATED("Prefer FlatSize.")
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int RequiredBufferSizeForDims(const Dims<4>& dims) {
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return FlatSize(dims);
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int MatchingElementsSize(const RuntimeShape& shape,
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                                 const RuntimeShape& check_shape_0) {
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int size_1 = shape.FlatSize();
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int size_2 = check_shape_0.FlatSize();
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_CHECK_EQ(size_1, size_2);
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return size_1;
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int MatchingElementsSize(const RuntimeShape& shape,
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                                 const RuntimeShape& check_shape_0,
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                                 const RuntimeShape& check_shape_1) {
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int size_1 = shape.FlatSize();
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int size_2 = check_shape_0.FlatSize();
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int size_3 = check_shape_1.FlatSize();
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_CHECK_EQ(size_1, size_2);
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_CHECK_EQ(size_2, size_3);
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   return size_1;
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** }
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** 
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // Flat size calculation, checking that dimensions match with one or more other
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** // arrays.
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** inline int MatchingFlatSize(const RuntimeShape& shape,
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****                             const RuntimeShape& check_shape_0) {
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 3200                             		.loc 9 489 3
 3201 0200 AA 0C                   		mov.L	36[r0], r4
 3202 0202 A8 8A                   		mov.L	12[r0], r2
 3203                             	.LBE2555:
 3204                             	.LBE2554:
 3205                             	.LBE2553:
 3206                             	.LBE2552:
 3207                             	.LBB2657:
 3208                             	.LBB2658:
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h **** }
 3209                             		.loc 4 55 28
 3210 0204 EC 69                   		mov.L	[r6], r9
 3211                             	.LVL255:
 3212                             	.LBE2658:
 3213                             	.LBE2657:
 3214                             	.LBB2659:
 3215                             	.LBB2652:
 3216                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/ten
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** /* Copyright 2019 The TensorFlow Authors. All Rights Reserved.
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** Licensed under the Apache License, Version 2.0 (the "License");
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** you may not use this file except in compliance with the License.
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** You may obtain a copy of the License at
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     http://www.apache.org/licenses/LICENSE-2.0
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** Unless required by applicable law or agreed to in writing, software
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** distributed under the License is distributed on an "AS IS" BASIS,
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** See the License for the specific language governing permissions and
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** limitations under the License.
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** ==============================================================================*/
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #ifndef TENSORFLOW_LITE_KERNELS_INTERNAL_REFERENCE_LOGISTIC_H_
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #define TENSORFLOW_LITE_KERNELS_INTERNAL_REFERENCE_LOGISTIC_H_
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #include <cmath>
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #include "fixedpoint/fixedpoint.h"
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #include "tensorflow/lite/kernels/internal/common.h"
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #include "tensorflow/lite/kernels/internal/cppmath.h"
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #include "tensorflow/lite/kernels/internal/quantization_util.h"
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #include "tensorflow/lite/kernels/internal/types.h"
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** #include "tensorflow/lite/kernels/op_macros.h"
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** namespace tflite {
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** namespace reference_ops {
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** inline void Logistic(const RuntimeShape& input_shape, const float* input_data,
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****                      const RuntimeShape& output_shape, float* output_data) {
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   const float cutoff_upper = 16.619047164916992188f;
 3217                             		.loc 10 32 3 is_stmt 1
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   const float cutoff_lower = -9.f;
 3218                             		.loc 10 33 3
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   const int flat_size = MatchingFlatSize(input_shape, output_shape);
 3219                             		.loc 10 35 3
 3220                             	.LBB2634:
 3221                             	.LBB2628:
 3222                             		.loc 9 489 3
 3223                             	.LBE2628:
 3224                             	.LBE2634:
 3225                             	.LBE2652:
 3226                             	.LBE2659:
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline int32_t Dims(int i) const {
 3227                             		.loc 9 194 44
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   inline int32_t Dims(int i) const {
 3228                             		.loc 9 194 44
 3229                             	.LBB2660:
 3230                             	.LBB2653:
 3231                             	.LBB2635:
 3232                             	.LBB2629:
 3233                             		.loc 9 489 3 is_stmt 0
 3234 0206 47 24                   		cmp	r2, r4
 3235 0208 3B D3 01                		bne	.L175
 3236                             	.LVL256:
 3237                             	.LBB2556:
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   const int dims_count = shape.DimensionsCount();
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   for (int i = 0; i < dims_count; ++i) {
 3238                             		.loc 9 491 21
 3239 020b 61 04                   		cmp	#0, r4
 3240 020d 2A 05 38 9C 01          		ble	.L217
 3241                             	.LBB2557:
 3242                             	.LBB2558:
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3243                             		.loc 9 198 36
 3244 0212 AA 83                   		mov.L	40[r0], r3
 3245                             	.LBE2558:
 3246                             	.LBE2557:
 3247                             	.LBB2571:
 3248                             	.LBB2572:
 3249 0214 A9 07                   		mov.L	16[r0], r7
 3250                             	.LVL257:
 3251 0216 61 54                   		cmp	#5, r4
 3252 0218 2B 05 38 E0 00          		bgt	.L179
 3253                             	.LBE2572:
 3254                             	.LBE2571:
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3255                             		.loc 9 492 5 is_stmt 1
 3256                             	.LVL258:
 3257                             	.LBB2585:
 3258                             	.LBB2559:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3259                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3260                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3261                             		.loc 9 198 5
 3262                             	.LBE2559:
 3263                             	.LBE2585:
 3264                             	.LBB2586:
 3265                             	.LBB2573:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3266                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3267                             		.loc 9 197 5
 3268                             	.LBE2573:
 3269                             	.LBE2586:
 3270                             		.loc 9 492 5 is_stmt 0
 3271 021d 47 37                   		cmp	r3, r7
 3272 021f 3B BC 01                		bne	.L175
 3273                             	.LVL259:
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3274                             		.loc 9 491 21
 3275 0222 61 14                   		cmp	#1, r4
 3276 0224 3A 3E 01                		beq	.L221
 3277                             		.loc 9 492 5 is_stmt 1
 3278                             	.LVL260:
 3279                             	.LBB2587:
 3280                             	.LBB2560:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3281                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3282                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3283                             		.loc 9 198 5
 3284                             	.LBE2560:
 3285                             	.LBE2587:
 3286                             	.LBB2588:
 3287                             	.LBB2574:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3288                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3289                             		.loc 9 197 5
 3290                             	.LBE2574:
 3291                             	.LBE2588:
 3292                             		.loc 9 492 5 is_stmt 0
 3293 0227 AA 8F                   		mov.L	44[r0], r7
 3294 0229 06 85 07 05             		cmp	20[r0].L, r7
 3295 022d 3B AE 01                		bne	.L175
 3296                             	.LVL261:
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3297                             		.loc 9 491 21
 3298 0230 61 24                   		cmp	#2, r4
 3299 0232 3A 30 01                		beq	.L221
 3300                             		.loc 9 492 5 is_stmt 1
 3301                             	.LVL262:
 3302                             	.LBB2589:
 3303                             	.LBB2561:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3304                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3305                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3306                             		.loc 9 198 5
 3307                             	.LBE2561:
 3308                             	.LBE2589:
 3309                             	.LBB2590:
 3310                             	.LBB2575:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3311                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3312                             		.loc 9 197 5
 3313                             	.LBE2575:
 3314                             	.LBE2590:
 3315                             		.loc 9 492 5 is_stmt 0
 3316 0235 A9 87                   		mov.L	24[r0], r7
 3317 0237 06 85 07 0C             		cmp	48[r0].L, r7
 3318 023b 3B A0 01                		bne	.L175
 3319                             	.LVL263:
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3320                             		.loc 9 491 21
 3321 023e 61 34                   		cmp	#3, r4
 3322 0240 3A 22 01                		beq	.L221
 3323                             		.loc 9 492 5 is_stmt 1
 3324                             	.LVL264:
 3325                             	.LBB2591:
 3326                             	.LBB2562:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3327                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3328                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3329                             		.loc 9 198 5
 3330                             	.LBE2562:
 3331                             	.LBE2591:
 3332                             	.LBB2592:
 3333                             	.LBB2576:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3334                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3335                             		.loc 9 197 5
 3336                             	.LBE2576:
 3337                             	.LBE2592:
 3338                             		.loc 9 492 5 is_stmt 0
 3339 0243 A9 8F                   		mov.L	28[r0], r7
 3340 0245 06 85 07 0D             		cmp	52[r0].L, r7
 3341 0249 3B 92 01                		bne	.L175
 3342                             	.LVL265:
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3343                             		.loc 9 491 21
 3344 024c 61 44                   		cmp	#4, r4
 3345 024e 3A 14 01                		beq	.L221
 3346                             		.loc 9 492 5 is_stmt 1
 3347                             	.LVL266:
 3348                             	.LBB2593:
 3349                             	.LBB2563:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3350                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3351                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3352                             		.loc 9 198 5
 3353                             	.LBE2563:
 3354                             	.LBE2593:
 3355                             	.LBB2594:
 3356                             	.LBB2577:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3357                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3358                             		.loc 9 197 5
 3359                             	.LBE2577:
 3360                             	.LBE2594:
 3361                             		.loc 9 492 5 is_stmt 0
 3362 0251 AB 87                   		mov.L	56[r0], r7
 3363                             	.LBE2556:
 3364                             	.LBB2609:
 3365                             	.LBB2610:
 3366                             	.LBB2611:
 3367                             	.LBB2612:
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3368                             		.loc 9 214 34
 3369 0253 71 03 28                		add	#40, r0, r3
 3370                             	.LBE2612:
 3371                             	.LBE2611:
 3372                             	.LBE2610:
 3373                             	.LBE2609:
 3374                             	.LBB2622:
 3375                             		.loc 9 492 5
 3376 0256 06 85 07 08             		cmp	32[r0].L, r7
 3377 025a 3B 81 01                		bne	.L175
 3378                             	.LVL267:
 3379                             		.balign 8,3,1
 3380                             	.L180:
 3381                             	.LBE2622:
 3382                             	.LBB2623:
 3383                             	.LBB2618:
 3384                             	.LBB2615:
 3385                             	.LBB2613:
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3386                             		.loc 9 214 34
 3387 025d 66 1A                   		mov.L	#1, r10
 3388 025f 66 07                   		mov.L	#0, r7
 3389                             		.balign 8,3,3
 3390                             	.L184:
 3391                             	.LVL268:
 3392                             	.LBE2613:
 3393                             	.LBE2615:
 3394                             	.LBB2616:
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 3395                             		.loc 9 275 7 is_stmt 1
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 3396                             		.loc 9 275 19 is_stmt 0
 3397 0261 FE 67 35                		mov.L	[r7,r3], r5
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       buffer_size *= dims_data[i];
 3398                             		.loc 9 274 5
 3399 0264 62 17                   		add	#1, r7
 3400                             	.LVL269:
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     }
 3401                             		.loc 9 275 19
 3402 0266 4F 5A                   		mul	r5, r10
 3403                             	.LVL270:
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****       buffer_size *= dims_data[i];
 3404                             		.loc 9 274 23
 3405 0268 47 74                   		cmp	r7, r4
 3406 026a 2A F7                   		bgt	.L184
 3407                             	.LVL271:
 3408                             	.LBE2616:
 3409                             	.LBE2618:
 3410                             	.LBE2623:
 3411                             	.LBE2629:
 3412                             	.LBE2635:
 3413                             	.LBB2636:
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   // Rational for using approximation in reference kernel.
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   // 0. This approximation gives enough precision for float.
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   // 1. This works around an issue on an embedded chipset where exp() does not
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   // return correctly as expected - exp(x) should return inf when overflown
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   // not 1.701417   IEEE 754 defines representation for inf.
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   // 2. This will speed up calculation and is matching the behavior in the
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   // optimized kernels. (check the definition of scalar_logistic_op<float>)
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h **** 
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****   for (int i = 0; i < flat_size; i++) {
 3414                             		.loc 10 45 21
 3415 026c 61 0A                   		cmp	#0, r10
 3416 026e 2A 05 38 15 01          		ble	.L182
 3417                             	.LVL272:
 3418                             		.balign 8,3,1
 3419                             	.L178:
 3420                             	.LBE2636:
 3421                             	.LBB2646:
 3422                             	.LBB2630:
 3423                             	.LBB2624:
 3424                             	.LBB2619:
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     const int* dims_data = reinterpret_cast<const int*>(DimsData());
 3425                             		.loc 9 272 9
 3426 0273 66 07                   		mov.L	#0, r7
 3427                             	.LBE2619:
 3428                             	.LBE2624:
 3429                             	.LBE2630:
 3430                             	.LBE2646:
 3431                             	.LBB2647:
 3432                             	.LBB2637:
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     float val = input_data[i];
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     float result;
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     if (val > cutoff_upper) {
 3433                             		.loc 10 48 5
 3434 0275 FB 62 CF F3 84 41       		mov.L	#0x4184f3cf, r6
 3435                             	.LVL273:
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****       result = 1.0f;
 3436                             		.loc 10 49 14
 3437 027b FB C2 00 00 80 3F       		mov.L	#0x3f800000, r12
 3438 0281 2E 23                   		bra	.L188
 3439                             	.LVL274:
 3440                             	.L259:
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     } else if (val < cutoff_lower) {
 3441                             		.loc 10 50 12 is_stmt 1
 3442 0283 FD 72 11 00 00 10 C1    		fcmp	#0xc1100000, r1
 3443 028a 27 05 38 DC 00          		bpz	.L248
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****       result = std::exp(val);
 3444                             		.loc 10 51 7
 3445                             	.LVL275:
 3446                             	.LBB2638:
 3447                             	.LBB2639:
 3448                             		.file 11 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
   1:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // -*- C++ -*- C forwarding header.
   2:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
   3:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // Copyright (C) 1997-2018 Free Software Foundation, Inc.
   4:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** //
   5:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // software; you can redistribute it and/or modify it under the
   7:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // terms of the GNU General Public License as published by the
   8:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // any later version.
  10:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  11:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // This library is distributed in the hope that it will be useful,
  12:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // GNU General Public License for more details.
  15:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  16:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // 3.1, as published by the Free Software Foundation.
  19:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  20:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // You should have received a copy of the GNU General Public License and
  21:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // <http://www.gnu.org/licenses/>.
  24:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  25:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** /** @file include/cmath
  26:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  *
  29:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  *  as macros in C).
  33:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****  */
  34:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  35:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** //
  36:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // ISO C++ 14882: 26.5  C library
  37:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** //
  38:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  39:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #pragma GCC system_header
  40:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  41:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #include <bits/c++config.h>
  42:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #include <bits/cpp_type_traits.h>
  43:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #include <ext/type_traits.h>
  44:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #include_next <math.h>
  46:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #include <bits/std_abs.h>
  48:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  49:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef _GLIBCXX_CMATH
  50:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #define _GLIBCXX_CMATH 1
  51:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  52:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef div
  54:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef acos
  55:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef asin
  56:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef atan
  57:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef atan2
  58:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef ceil
  59:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef cos
  60:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef cosh
  61:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef exp
  62:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef fabs
  63:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef floor
  64:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef fmod
  65:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef frexp
  66:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef ldexp
  67:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef log
  68:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef log10
  69:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef modf
  70:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef pow
  71:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef sin
  72:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef sinh
  73:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef sqrt
  74:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef tan
  75:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #undef tanh
  76:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  77:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** extern "C++"
  78:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** {
  79:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** {
  81:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  83:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::acos;
  84:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  85:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   acos(float __x)
  88:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_acosf(__x); }
  89:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  90:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   acos(long double __x)
  92:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_acosl(__x); }
  93:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #endif
  94:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
  95:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   template<typename _Tp>
  96:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     inline _GLIBCXX_CONSTEXPR
  97:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****                                     double>::__type
  99:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     acos(_Tp __x)
 100:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     { return __builtin_acos(__x); }
 101:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 102:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::asin;
 103:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 104:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   asin(float __x)
 107:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_asinf(__x); }
 108:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 109:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   asin(long double __x)
 111:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_asinl(__x); }
 112:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #endif
 113:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 114:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   template<typename _Tp>
 115:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     inline _GLIBCXX_CONSTEXPR
 116:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****                                     double>::__type
 118:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     asin(_Tp __x)
 119:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     { return __builtin_asin(__x); }
 120:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 121:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::atan;
 122:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 123:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   atan(float __x)
 126:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_atanf(__x); }
 127:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 128:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   atan(long double __x)
 130:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_atanl(__x); }
 131:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #endif
 132:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 133:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   template<typename _Tp>
 134:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     inline _GLIBCXX_CONSTEXPR
 135:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****                                     double>::__type
 137:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     atan(_Tp __x)
 138:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     { return __builtin_atan(__x); }
 139:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 140:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::atan2;
 141:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 142:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   atan2(float __y, float __x)
 145:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_atan2f(__y, __x); }
 146:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 147:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   atan2(long double __y, long double __x)
 149:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_atan2l(__y, __x); }
 150:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #endif
 151:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 152:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   template<typename _Tp, typename _Up>
 153:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     inline _GLIBCXX_CONSTEXPR
 154:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     atan2(_Tp __y, _Up __x)
 156:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     {
 157:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****       return atan2(__type(__y), __type(__x));
 159:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     }
 160:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 161:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::ceil;
 162:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 163:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   ceil(float __x)
 166:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_ceilf(__x); }
 167:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 168:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   ceil(long double __x)
 170:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_ceill(__x); }
 171:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #endif
 172:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 173:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   template<typename _Tp>
 174:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     inline _GLIBCXX_CONSTEXPR
 175:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****                                     double>::__type
 177:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     ceil(_Tp __x)
 178:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     { return __builtin_ceil(__x); }
 179:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 180:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::cos;
 181:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 182:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   cos(float __x)
 185:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_cosf(__x); }
 186:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 187:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   cos(long double __x)
 189:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_cosl(__x); }
 190:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #endif
 191:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 192:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   template<typename _Tp>
 193:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     inline _GLIBCXX_CONSTEXPR
 194:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****                                     double>::__type
 196:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     cos(_Tp __x)
 197:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     { return __builtin_cos(__x); }
 198:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 199:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::cosh;
 200:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 201:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   cosh(float __x)
 204:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_coshf(__x); }
 205:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 206:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   cosh(long double __x)
 208:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_coshl(__x); }
 209:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #endif
 210:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 211:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   template<typename _Tp>
 212:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     inline _GLIBCXX_CONSTEXPR
 213:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****                                     double>::__type
 215:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     cosh(_Tp __x)
 216:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****     { return __builtin_cosh(__x); }
 217:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 218:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   using ::exp;
 219:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** 
 220:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   exp(float __x)
 223:c:\gcc for renesas rx 8.3.0.202004-gnurx-elf\rx-elf\rx-elf\rx-elf\include\c++\8.3.0.202004-gnurx\cmath ****   { return __builtin_expf(__x); }
 3449                             		.loc 11 223 5
 3450                             		.loc 11 223 26 is_stmt 0
 3451 028f 05 00 00 00             		bsr	_expf
 3452                             	.LVL276:
 3453 0293 77 10 01 00 00          		.balign 8,3,5
 3454                             	.L185:
 3455                             	.LBE2639:
 3456                             	.LBE2638:
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     } else {
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****       result = 1.f / (1.f + std::exp(-val));
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     }
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     output_data[i] = result;
 3457                             		.loc 10 55 5 is_stmt 1
 3458                             		.loc 10 55 20 is_stmt 0
 3459 0298 FE 27 91                		mov.L	r1, [r7,r9]
 3460                             	.LBE2637:
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     float val = input_data[i];
 3461                             		.loc 10 45 3
 3462 029b 62 17                   		add	#1, r7
 3463                             	.LVL277:
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     float val = input_data[i];
 3464                             		.loc 10 45 21
 3465 029d 47 A7                   		cmp	r10, r7
 3466 029f 29 05 38 E2 00          		bge	.L258
 3467                             	.LVL278:
 3468                             		.balign 8,3,3
 3469                             	.L188:
 3470                             	.LBB2644:
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     float result;
 3471                             		.loc 10 46 5 is_stmt 1
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     float result;
 3472                             		.loc 10 46 11 is_stmt 0
 3473 02a4 FE 67 B1                		mov.L	[r7,r11], r1
 3474                             	.LVL279:
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     if (val > cutoff_upper) {
 3475                             		.loc 10 47 5 is_stmt 1
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****       result = 1.0f;
 3476                             		.loc 10 48 5
 3477 02a7 FC 87 16                		fcmp	r1, r6
 3478 02aa 26 D9                   		bpz	.L259
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     } else if (val < cutoff_lower) {
 3479                             		.loc 10 49 14 is_stmt 0
 3480 02ac EF C1                   		mov.L	r12, r1
 3481                             	.LVL280:
 3482 02ae 2E EA                   		bra	.L185
 3483                             	.LVL281:
 3484                             	.L228:
 3485                             	.LBE2644:
 3486                             	.LBE2647:
 3487                             	.LBE2653:
 3488                             	.LBE2660:
 3489                             	.LBB2661:
 3490                             	.LBB2544:
 3491                             	.LBB2538:
 3492                             	.LBB2532:
 3493                             	.LBB2526:
 3494                             	.LBB2520:
 3495                             	.LBB2515:
 3496                             	.LBB2509:
 3497                             	.LBB2506:
 3498                             		.loc 8 224 7
 3499 02b0 FB 36 80                		mov.L	#-128, r3
 3500                             	.LBE2506:
 3501                             	.LBE2509:
 3502                             		.loc 6 56 7 is_stmt 1
 3503                             		.loc 6 56 22 is_stmt 0
 3504 02b3 C3 A3                   		mov.B	r3, [r10]
 3505 02b5 38 2D FE                		bra	.L199
 3506                             	.LVL282:
 3507                             	.L255:
 3508                             	.LBB2510:
 3509                             	.LBB2445:
 3510                             	.LBB2440:
 3511                             	.LBB2435:
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t b_64(b);
 3512                             		.loc 3 343 3 is_stmt 1
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int64_t ab_64 = a_64 * b_64;
 3513                             		.loc 3 344 3
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 3514                             		.loc 3 345 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 3515                             		.loc 3 346 3
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 3516                             		.loc 3 346 35 is_stmt 0
 3517 02b8 61 09                   		cmp	#0, r9
 3518 02ba FB 82 01 00 00 C0       		mov.L	#-1073741823, r8
 3519 02c0 29 08                   		blt 1f
 3520 02c2 FB 82 00 00 00 40       		mov #0x40000000, r8
 3521                             	1:
 3522 02c8 FB 16 FF                		mov.L	#-1, r1
 3523 02cb 29 04                   		blt 1f
 3524 02cd 66 01                   		mov #0, r1
 3525                             	1:
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****       static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 3526                             		.loc 3 347 3 is_stmt 1
 3527                             	.LVL283:
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3528                             		.loc 3 349 3
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3529                             		.loc 3 349 19 is_stmt 0
 3530 02cf 74 05 00 00 00 80       		cmp	#-2147483648, r5
 3531 02d5 21 14                   		bne	.L216
 3532 02d7 FB 12 FF FF FF 7F       		mov.L	#0x7fffffff, r1
 3533                             	.LVL284:
 3534 02dd 38 65 FE                		bra	.L204
 3535                             	.LVL285:
 3536                             	.L256:
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   std::int32_t ab_x2_high32 =
 3537                             		.loc 3 346 35
 3538 02e0 FB 82 01 00 00 C0       		mov.L	#-1073741823, r8
 3539 02e6 FB 16 FF                		mov.L	#-1, r1
 3540                             	.LVL286:
 3541                             		.balign 8,3,2
 3542                             	.L216:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 3543                             		.loc 3 348 49
 3544 02e9 FF 29 28                		add	r2, r8, r9
 3545 02ec FC 0B 31                		adc	r3, r1
 3546 02ef 27 65                   		bn	.L260
 3547                             		.balign 8,3,1
 3548                             	.L205:
 3549 02f1 6C 11                   		shll	#1, r1
 3550 02f3 69 F9                   		shlr	#31, r9
 3551 02f5 57 91                   		or	r9, r1
 3552 02f7 38 4B FE                		bra	.L204
 3553                             	.LVL287:
 3554                             	.L179:
 3555                             	.LBE2435:
 3556                             	.LBE2440:
 3557                             	.LBE2445:
 3558                             	.LBE2510:
 3559                             	.LBE2515:
 3560                             	.LBE2520:
 3561                             	.LBE2526:
 3562                             	.LBE2532:
 3563                             	.LBE2538:
 3564                             	.LBE2544:
 3565                             	.LBE2661:
 3566                             	.LBB2662:
 3567                             	.LBB2654:
 3568                             	.LBB2648:
 3569                             	.LBB2631:
 3570                             	.LBB2625:
 3571                             		.loc 9 492 5 is_stmt 1
 3572                             	.LBB2595:
 3573                             	.LBB2564:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3574                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3575                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3576                             		.loc 9 198 5
 3577                             	.LBE2564:
 3578                             	.LBE2595:
 3579                             	.LBB2596:
 3580                             	.LBB2578:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3581                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3582                             		.loc 9 197 5
 3583                             	.LBE2578:
 3584                             	.LBE2596:
 3585                             		.loc 9 492 5 is_stmt 0
 3586 02fa EC 7A                   		mov.L	[r7], r10
 3587 02fc 06 84 3A                		cmp	[r3].L, r10
 3588 02ff 3B DC 00                		bne	.L175
 3589                             	.LVL288:
 3590                             		.loc 9 492 5 is_stmt 1
 3591                             	.LBB2597:
 3592                             	.LBB2565:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3593                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3594                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3595                             		.loc 9 198 5
 3596                             	.LBE2565:
 3597                             	.LBE2597:
 3598                             	.LBB2598:
 3599                             	.LBB2579:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3600                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3601                             		.loc 9 197 5
 3602                             	.LBE2579:
 3603                             	.LBE2598:
 3604                             		.loc 9 492 5 is_stmt 0
 3605 0302 ED 7A 01                		mov.L	4[r7], r10
 3606 0305 06 85 3A 01             		cmp	4[r3].L, r10
 3607 0309 3B D2 00                		bne	.L175
 3608                             	.LVL289:
 3609                             		.loc 9 492 5 is_stmt 1
 3610                             	.LBB2599:
 3611                             	.LBB2566:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3612                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3613                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3614                             		.loc 9 198 5
 3615                             	.LBE2566:
 3616                             	.LBE2599:
 3617                             	.LBB2600:
 3618                             	.LBB2580:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3619                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3620                             		.loc 9 197 5
 3621                             	.LBE2580:
 3622                             	.LBE2600:
 3623                             		.loc 9 492 5 is_stmt 0
 3624 030c ED 7A 02                		mov.L	8[r7], r10
 3625 030f 06 85 3A 02             		cmp	8[r3].L, r10
 3626 0313 3B C8 00                		bne	.L175
 3627                             	.LVL290:
 3628                             		.loc 9 492 5 is_stmt 1
 3629                             	.LBB2601:
 3630                             	.LBB2567:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3631                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3632                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3633                             		.loc 9 198 5
 3634                             	.LBE2567:
 3635                             	.LBE2601:
 3636                             	.LBB2602:
 3637                             	.LBB2581:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3638                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3639                             		.loc 9 197 5
 3640                             	.LBE2581:
 3641                             	.LBE2602:
 3642                             		.loc 9 492 5 is_stmt 0
 3643 0316 ED 7A 03                		mov.L	12[r7], r10
 3644 0319 06 85 3A 03             		cmp	12[r3].L, r10
 3645 031d 3B BE 00                		bne	.L175
 3646                             	.LVL291:
 3647                             		.loc 9 492 5 is_stmt 1
 3648                             	.LBB2603:
 3649                             	.LBB2568:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3650                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3651                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3652                             		.loc 9 198 5
 3653                             	.LBE2568:
 3654                             	.LBE2603:
 3655                             	.LBB2604:
 3656                             	.LBB2582:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3657                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3658                             		.loc 9 197 5
 3659                             	.LBE2582:
 3660                             	.LBE2604:
 3661                             		.loc 9 492 5 is_stmt 0
 3662 0320 ED 7A 04                		mov.L	16[r7], r10
 3663 0323 06 85 3A 04             		cmp	16[r3].L, r10
 3664 0327 3B B4 00                		bne	.L175
 3665                             	.LVL292:
 3666                             		.loc 9 492 5 is_stmt 1
 3667                             	.LBB2605:
 3668                             	.LBB2569:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3669                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3670                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3671                             		.loc 9 198 5
 3672                             	.LBE2569:
 3673                             	.LBE2605:
 3674                             	.LBB2606:
 3675                             	.LBB2583:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3676                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3677                             		.loc 9 197 5
 3678                             	.LBE2583:
 3679                             	.LBE2606:
 3680                             		.loc 9 492 5 is_stmt 0
 3681 032a ED 3A 05                		mov.L	20[r3], r10
 3682 032d 06 85 7A 05             		cmp	20[r7].L, r10
 3683 0331 3B AA 00                		bne	.L175
 3684                             	.LVL293:
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3685                             		.loc 9 491 21
 3686 0334 61 64                   		cmp	#6, r4
 3687 0336 3A 27 FF                		beq	.L180
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3688                             		.loc 9 491 3
 3689 0339 66 6A                   		mov.L	#6, r10
 3690                             	.LVL294:
 3691                             		.balign 8,3,3
 3692                             	.L181:
 3693                             		.loc 9 492 5 is_stmt 1
 3694                             	.LBB2607:
 3695                             	.LBB2570:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3696                             		.loc 9 196 5
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3697                             		.loc 9 197 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3698                             		.loc 9 198 5
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3699                             		.loc 9 198 34 is_stmt 0
 3700 033b FE 6A 35                		mov.L	[r10,r3], r5
 3701                             	.LVL295:
 3702                             	.LBE2570:
 3703                             	.LBE2607:
 3704                             	.LBB2608:
 3705                             	.LBB2584:
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_LT(i, size_);
 3706                             		.loc 9 196 5 is_stmt 1
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 3707                             		.loc 9 197 5
 3708 033e 47 A2                   		cmp	r10, r2
 3709 0340 3A 9B 00                		beq	.L175
 3710                             	.LVL296:
 3711                             	.LBE2584:
 3712                             	.LBE2608:
 3713                             		.loc 9 492 5 is_stmt 0
 3714 0343 FE 6A 71                		mov.L	[r10,r7], r1
 3715 0346 47 51                   		cmp	r5, r1
 3716 0348 3B 93 00                		bne	.L175
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3717                             		.loc 9 491 3
 3718 034b 62 1A                   		add	#1, r10
 3719                             	.LVL297:
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 3720                             		.loc 9 491 21
 3721 034d 47 A4                   		cmp	r10, r4
 3722 034f 21 EC                   		bne	.L181
 3723 0351 38 0C FF                		bra	.L180
 3724                             	.LVL298:
 3725                             	.L260:
 3726                             	.LBE2625:
 3727                             	.LBE2631:
 3728                             	.LBE2648:
 3729                             	.LBE2654:
 3730                             	.LBE2662:
 3731                             	.LBB2663:
 3732                             	.LBB2545:
 3733                             	.LBB2539:
 3734                             	.LBB2533:
 3735                             	.LBB2527:
 3736                             	.LBB2521:
 3737                             	.LBB2516:
 3738                             	.LBB2511:
 3739                             	.LBB2446:
 3740                             	.LBB2441:
 3741                             	.LBB2436:
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 3742                             		.loc 3 348 49
 3743 0354 70 92 FF FF FF 7F       		add	#0x7fffffff, r9, r2
 3744 035a FD 74 21 00             		adc	#0, r1
 3745 035e EF 29                   		mov.L	r2, r9
 3746 0360 2E 91                   		bra	.L205
 3747                             	.LVL299:
 3748                             	.L221:
 3749                             	.LBE2436:
 3750                             	.LBE2441:
 3751                             	.LBE2446:
 3752                             	.LBE2511:
 3753                             	.LBE2516:
 3754                             	.LBE2521:
 3755                             	.LBE2527:
 3756                             	.LBE2533:
 3757                             	.LBE2539:
 3758                             	.LBE2545:
 3759                             	.LBE2663:
 3760                             	.LBB2664:
 3761                             	.LBB2655:
 3762                             	.LBB2649:
 3763                             	.LBB2632:
 3764                             	.LBB2626:
 3765                             	.LBB2620:
 3766                             	.LBB2617:
 3767                             	.LBB2614:
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****   }
 3768                             		.loc 9 214 34
 3769 0362 71 03 28                		add	#40, r0, r3
 3770 0365 38 F8 FE                		bra	.L180
 3771                             	.LVL300:
 3772                             	.L248:
 3773                             	.LBE2614:
 3774                             	.LBE2617:
 3775                             	.LBE2620:
 3776                             	.LBE2626:
 3777                             	.LBE2632:
 3778                             	.LBE2649:
 3779                             	.LBB2650:
 3780                             	.LBB2645:
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     }
 3781                             		.loc 10 53 7 is_stmt 1
 3782                             	.LBB2640:
 3783                             	.LBB2641:
 3784                             		.loc 11 223 5
 3785                             	.LBE2641:
 3786                             	.LBE2640:
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     }
 3787                             		.loc 10 53 37 is_stmt 0
 3788 0368 70 11 00 00 00 80       		add	#-2147483648, r1
 3789                             	.LVL301:
 3790                             	.LBB2643:
 3791                             	.LBB2642:
 3792                             		.loc 11 223 26
 3793 036e 05 00 00 00             		bsr	_expf
 3794                             	.LVL302:
 3795                             	.LBE2642:
 3796                             	.LBE2643:
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     }
 3797                             		.loc 10 53 27
 3798 0372 FD 72 21 00 00 80 3F    		fadd	#0x3f800000, r1
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal/reference\logistic.h ****     }
 3799                             		.loc 10 53 14
 3800 0379 EF C2                   		mov.L	r12, r2
 3801 037b FC 93 12                		fdiv	r1, r2
 3802 037e EF 21                   		mov.L	r2, r1
 3803                             	.LVL303:
 3804 0380 38 18 FF                		bra	.L185
 3805                             	.L258:
 3806 0383 A8 8A                   		mov.L	12[r0], r2
 3807                             	.LVL304:
 3808                             		.balign 8,3,1
 3809                             	.L182:
 3810                             	.LBE2645:
 3811                             	.LBE2650:
 3812                             	.LBE2655:
 3813                             	.LBE2664:
 3814                             	.LBB2665:
 3815                             	.LBB2666:
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #ifdef TF_LITE_STATIC_MEMORY
 3816                             		.loc 9 185 5 is_stmt 1
 3817 0385 61 52                   		cmp	#5, r2
 3818 0387 2B 0B                   		ble	.L189
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3819                             		.loc 9 189 7
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3820                             		.loc 9 189 16 is_stmt 0
 3821 0389 A9 01                   		mov.L	16[r0], r1
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3822                             		.loc 9 189 29
 3823 038b 61 01                   		cmp	#0, r1
 3824 038d 15                      		beq	.L189
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3825                             		.loc 9 189 16
 3826 038e 05 00 00 00             		bsr	__ZdaPv
 3827                             	.LVL305:
 3828                             		.balign 8,3,1
 3829                             	.L189:
 3830                             	.LBE2666:
 3831                             	.LBE2665:
 3832                             	.LBB2667:
 3833                             	.LBB2668:
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #ifdef TF_LITE_STATIC_MEMORY
 3834                             		.loc 9 185 5 is_stmt 1
 3835 0392 AA 0F                   		mov.L	36[r0], r7
 3836 0394 61 57                   		cmp	#5, r7
 3837 0396 2A 05 38 E8 FC          		ble	.L210
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3838                             		.loc 9 189 7
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3839                             		.loc 9 189 16 is_stmt 0
 3840 039b AA 81                   		mov.L	40[r0], r1
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3841                             		.loc 9 189 29
 3842 039d 61 01                   		cmp	#0, r1
 3843 039f 3A E1 FC                		beq	.L210
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h **** #endif  // TF_LITE_STATIC_MEMORY
 3844                             		.loc 9 189 16
 3845 03a2 05 00 00 00             		bsr	__ZdaPv
 3846                             	.LVL306:
 3847                             	.LBE2668:
 3848                             	.LBE2667:
 100:../src/tensorflow/lite/micro/kernels/logistic.cc ****       }
 3849                             		.loc 1 100 9 is_stmt 1
 117:../src/tensorflow/lite/micro/kernels/logistic.cc ****       }
 3850                             		.loc 1 117 16 is_stmt 0
 3851 03a6 66 0A                   		mov.L	#0, r10
 3852 03a8 38 DA FC                		bra	.L261
 3853                             	.LVL307:
 3854                             	.L217:
 3855                             	.LBB2669:
 3856                             	.LBB2656:
 3857                             	.LBB2651:
 3858                             	.LBB2633:
 3859                             	.LBB2627:
 3860                             	.LBB2621:
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/kernels/internal\types.h ****     const int* dims_data = reinterpret_cast<const int*>(DimsData());
 3861                             		.loc 9 272 9
 3862 03ab EF CA                   		mov.L	r12, r10
 3863 03ad 38 C6 FE                		bra	.L178
 3864                             	.LVL308:
 3865                             	.L227:
 3866                             	.LBE2621:
 3867                             	.LBE2627:
 3868                             	.LBE2633:
 3869                             	.LBE2651:
 3870                             	.LBE2656:
 3871                             	.LBE2669:
 3872                             	.LBB2670:
 3873                             	.LBB2546:
 3874                             	.LBB2540:
 3875                             	.LBB2534:
 3876                             	.LBB2528:
 3877                             	.LBB2522:
 3878                             	.LBB2517:
 3879                             	.LBB2512:
 3880                             	.LBB2490:
 3881                             	.LBB2488:
 3882                             	.LBB2461:
 3883                             	.LBB2459:
 3884                             	.LBB2457:
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3885                             		.loc 3 159 12
 3886 03b0 EF 31                   		mov.L	r3, r1
 3887                             	.LVL309:
 3888 03b2 F9 06 11 FF             		mov.L	#-1, 68[r0]
 3889 03b6 66 08                   		mov.L	#0, r8
 3890 03b8 3E 82 00                		mov.L	#0, 72[r0]
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h **** }
 3891                             		.loc 3 159 20
 3892 03bb FB 96 FF                		mov.L	#-1, r9
 3893 03be 38 C2 FD                		bra	.L207
 3894                             	.LVL310:
 3895                             	.L257:
 3896                             	.LBE2457:
 3897                             	.LBE2459:
 3898                             	.LBE2461:
 3899                             	.LBE2488:
 3900                             	.LBE2490:
 3901                             	.LBE2512:
 3902                             	.LBB2513:
 3903                             	.LBB2447:
 3904                             	.LBB2442:
 3905                             	.LBB2431:
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\third_party\gemmlowp/fixedpoint\fixedpoint.h ****   const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 3906                             		.loc 3 370 3
 3907 03c1 FB 42 23 00 00 00       		mov.L	#.LC12, r4
 3908 03c7 FB 32 00 00 00 00       		mov.L	#.LANCHOR1, r3
 3909 03cd FB 2A 72 01             		mov.L	#0x172, r2
 3910 03d1 FB 12 32 00 00 00       		mov.L	#.LC13, r1
 3911 03d7 05 00 00 00             		bsr	___assert_func
 3912                             	.LVL311:
 3913                             	.L175:
 3914                             	.LBE2431:
 3915                             	.LBE2442:
 3916                             	.LBE2447:
 3917                             	.LBE2513:
 3918                             	.LBE2517:
 3919                             	.LBE2522:
 3920                             	.LBE2528:
 3921                             	.LBE2534:
 3922                             	.LBE2540:
 3923                             	.LBE2546:
 3924                             	.LBE2670:
 3925                             	.LBB2671:
 3926                             	.LBB2394:
 3927                             	.LBB2393:
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src/tensorflow/lite/micro/kernels\kernel_util.h ****   TFLITE_DCHECK(node != nullptr);
 3928                             		.loc 4 33 3
 3929 03db 05 00 00 00             		bsr	_abort
 3930                             	.LVL312:
 3931                             	.LBE2393:
 3932                             	.LBE2394:
 3933                             	.LBE2671:
 3934                             	.LFE2229:
 3936 03df 03                      		.section C,"a",@progbits
 3937                             		.p2align 2
 3938                             		.balign 4
 3939                             		.set	.LANCHOR0,. + 0
 3940                             	.LC0:
 3941 0000 00 00 00 00             		.long	__ZN6tflite3ops5micro11activations12LogisticInitEP13TfLiteContextPKcm
 3942 0004 00 00 00 00             		.long	0
 3943 0008 00 00 00 00             		.long	__ZN6tflite3ops5micro11activations15LogisticPrepareEP13TfLiteContextP10TfLiteNode
 3944 000c 00 00 00 00             		.long	__ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode
 3945 0010 00 00 00 00             		.long	0
 3946 0014 00 00 00 00             		.long	0
 3947 0018 00 00 00 00             		.long	0
 3948 001c 00 00 00 00             		.long	0
 3949                             		.section	.rodata._ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode.str
 3950                             	.LC11:
 3951 0000 49 6E 70 75 74 20 25 73 		.string	"Input %s, output %s not supported."
 3951      2C 20 6F 75 74 70 75 74 
 3951      20 25 73 20 6E 6F 74 20 
 3951      73 75 70 70 6F 72 74 65 
 3951      64 2E 00 
 3952                             	.LC12:
 3953 0023 65 78 70 6F 6E 65 6E 74 		.string	"exponent <= 31"
 3953      20 3C 3D 20 33 31 00 
 3954                             	.LC13:
 3955 0032 43 3A 5C 55 73 65 72 73 		.string	"C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\thi
 3955      5C 61 35 31 31 36 39 33 
 3955      38 5C 44 65 73 6B 74 6F 
 3955      70 5C 65 32 5F 73 74 75 
 3955      64 69 6F 5F 77 6F 72 6B 
 3956                             		.section	.rodata._ZN6tflite3ops5micro11activations15LogisticPrepareEP13TfLiteContextP10TfLiteNode.
 3957                             	.LC1:
 3958 0000 69 6E 70 75 74 20 21 3D 		.string	"input != nullptr"
 3958      20 6E 75 6C 6C 70 74 72 
 3958      00 
 3959                             	.LC2:
 3960 0011 2E 2E 2F 73 72 63 2F 74 		.string	"../src/tensorflow/lite/micro/kernels/logistic.cc"
 3960      65 6E 73 6F 72 66 6C 6F 
 3960      77 2F 6C 69 74 65 2F 6D 
 3960      69 63 72 6F 2F 6B 65 72 
 3960      6E 65 6C 73 2F 6C 6F 67 
 3961                             	.LC3:
 3962 0042 25 73 3A 25 64 20 25 73 		.string	"%s:%d %s was not true."
 3962      20 77 61 73 20 6E 6F 74 
 3962      20 74 72 75 65 2E 00 
 3963                             	.LC4:
 3964 0059 6F 75 74 70 75 74 20 21 		.string	"output != nullptr"
 3964      3D 20 6E 75 6C 6C 70 74 
 3964      72 00 
 3965                             	.LC5:
 3966 006b 6F 75 74 70 75 74 2D 3E 		.string	"output->type"
 3966      74 79 70 65 00 
 3967                             	.LC6:
 3968 0078 69 6E 70 75 74 2D 3E 74 		.string	"input->type"
 3968      79 70 65 00 
 3969                             	.LC7:
 3970 0084 25 73 3A 25 64 20 25 73 		.string	"%s:%d %s != %s (%s != %s)"
 3970      20 21 3D 20 25 73 20 28 
 3970      25 73 20 21 3D 20 25 73 
 3970      29 00 
 3971                             	.LC8:
 3972 009e 73 74 64 3A 3A 6E 75 6D 		.string	"std::numeric_limits<int8_t>::min()"
 3972      65 72 69 63 5F 6C 69 6D 
 3972      69 74 73 3C 69 6E 74 38 
 3972      5F 74 3E 3A 3A 6D 69 6E 
 3972      28 29 00 
 3973                             	.LC9:
 3974 00c1 6F 75 74 70 75 74 2D 3E 		.string	"output->params.zero_point"
 3974      70 61 72 61 6D 73 2E 7A 
 3974      65 72 6F 5F 70 6F 69 6E 
 3974      74 00 
 3975                             	.LC10:
 3976 00db 25 73 3A 25 64 20 25 73 		.string	"%s:%d %s != %s (%d != %d)"
 3976      20 21 3D 20 25 73 20 28 
 3976      25 64 20 21 3D 20 25 64 
 3976      29 00 
 3977                             		.section	.rodata._ZZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_E19__PRETTY_FUNCTION__,"a"
 3978                             		.set	.LANCHOR1,. + 0
 3981                             	__ZZN8gemmlowp19RoundingDivideByPOTIliEET_S1_T0_E19__PRETTY_FUNCTION__:
 3982 0000 49 6E 74 65 67 65 72 54 		.string	"IntegerType gemmlowp::RoundingDivideByPOT(IntegerType, ExponentType) [with IntegerType = 
 3982      79 70 65 20 67 65 6D 6D 
 3982      6C 6F 77 70 3A 3A 52 6F 
 3982      75 6E 64 69 6E 67 44 69 
 3982      76 69 64 65 42 79 50 4F 
 4149                             	.Letext0:
 4150                             		.file 12 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4151                             		.file 13 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4152                             		.file 14 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4153                             		.file 15 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4154                             		.file 16 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4155                             		.file 17 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4156                             		.file 18 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4157                             		.file 19 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4158                             		.file 20 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4159                             		.file 21 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4160                             		.file 22 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4161                             		.file 23 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4162                             		.file 24 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4163                             		.file 25 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4164                             		.file 26 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4165                             		.file 27 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4166                             		.file 28 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4167                             		.file 29 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4168                             		.file 30 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4169                             		.file 31 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4170                             		.file 32 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\8.3
 4171                             		.file 33 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.2
 4172                             		.file 34 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\
 4173                             		.file 35 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\loc
 4174                             		.file 36 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_ty
 4175                             		.file 37 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\ree
 4176                             		.file 38 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.2
 4177                             		.file 39 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\wchar.h"
 4178                             		.file 40 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_st
 4179                             		.file 41 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\stdint.h
 4180                             		.file 42 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\locale.h
 4181                             		.file 43 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\ctype.h"
 4182                             		.file 44 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\stdlib.h
 4183                             		.file 45 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\stdio.h"
 4184                             		.file 46 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\err
 4185                             		.file 47 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 4186                             		.file 48 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\string.h
 4187                             		.file 49 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/ten
 4188                             		.file 50 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src/ten
 4189                             		.file 51 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\assert.h
 4190                             		.file 52 "<built-in>"
