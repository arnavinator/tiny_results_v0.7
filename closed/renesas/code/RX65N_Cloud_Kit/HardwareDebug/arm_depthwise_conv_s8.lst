   1                             		.file	"arm_depthwise_conv_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_depthwise_conv_s8,"ax",@progbits
   5                             		.global	_arm_depthwise_conv_s8
   7                             	_arm_depthwise_conv_s8:
   8                             	.LFB84:
   9                             		.file 1 "../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c"
   1:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** /*
   2:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * Copyright (C) 2010-2020 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
   4:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
   6:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
  10:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
  12:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  */
  18:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  19:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * Title:        arm_depthwise_conv_s8.c
  22:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * Description:  s8 version of depthwise convolution.
  23:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
  24:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * $Date:        11. May 2021
  25:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * $Revision:    V.2.5.0
  26:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
  27:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * Target Processor:  Cortex-M CPUs
  28:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
  29:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * -------------------------------------------------------------------- */
  30:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  31:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** #include "arm_nnfunctions.h"
  32:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** #include "arm_nnsupportfunctions.h"
  33:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  34:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** /**
  35:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *  @ingroup groupNN
  36:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  */
  37:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  38:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** /**
  39:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * @addtogroup NNConv
  40:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  * @{
  41:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  */
  42:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  43:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** static void depthwise_conv_s8_mult_4(const int8_t *input,
  44:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t input_x,
  45:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t input_y,
  46:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t input_ch,
  47:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int8_t *kernel,
  48:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t output_ch,
  49:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t ch_mult,
  50:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t kernel_x,
  51:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t kernel_y,
  52:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t pad_x,
  53:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t pad_y,
  54:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t stride_x,
  55:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t stride_y,
  56:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t *bias,
  57:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      int8_t *output,
  58:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t *output_shift,
  59:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t *output_mult,
  60:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t output_x,
  61:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t output_y,
  62:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t output_offset,
  63:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t input_offset,
  64:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t output_activation_min,
  65:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                      const int32_t output_activation_max)
  66:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** {
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h
  68:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w 
  70:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
  72:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                  ++in_ch, out_ch += ch_mult)
  73:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
  74:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
  75:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
  76:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     int32_t out_buff[4];
  77:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  78:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[0] = bias[out_ch + 0 + mult_tile];
  79:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = bias[out_ch + 1 + mult_tile];
  80:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = bias[out_ch + 2 + mult_tile];
  81:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = bias[out_ch + 3 + mult_tile];
  82:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_
  84:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
  85:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch 
  86:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + 
  87:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
  89:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                              ++ker_w, ker_idx += output_ch)
  90:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
  91:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
  96:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         }
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     }
  98:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** #if defined(ARM_MATH_MVEI)
  99:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     (void)out_idx;
 100:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     int32x4_t res = vldrwq_s32(out_buff);
 101:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     res = arm_requantize_mve_32x4(res,
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                                   vldrwq_s32(&output_mult[out_ch + mult_tile]),
 103:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                                   vldrwq_s32(&output_shift[out_ch + mult_tile]));
 104:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     res = vaddq_n_s32(res, output_offset);
 105:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 106:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
 107:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     res = vminq_s32(res, vdupq_n_s32(output_activation_max));
 108:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     vstrbq_s32(output, res);
 109:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output += 4;
 110:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** #else
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[0] = arm_nn_requantize(
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 +
 113:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = arm_nn_requantize(
 114:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 +
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = arm_nn_requantize(
 116:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 +
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = arm_nn_requantize(
 118:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 +
 119:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[0] += output_offset;
 121:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] += output_offset;
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] += output_offset;
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] += output_offset;
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_ma
 126:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_ma
 127:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_ma
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_ma
 129:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 130:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[0];
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[1];
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[2];
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[3];
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 135:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** #endif
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 }
 137:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             }
 138:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         }
 139:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     }
 140:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** }
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** static void depthwise_conv_s8_generic(const q7_t *input,
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t input_batches,
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t input_x,
 145:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t input_y,
 146:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t input_ch,
 147:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const q7_t *kernel,
 148:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t output_ch,
 149:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t ch_mult,
 150:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t kernel_x,
 151:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t kernel_y,
 152:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t pad_x,
 153:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t pad_y,
 154:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t stride_x,
 155:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t stride_y,
 156:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const int32_t *bias,
 157:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       q7_t *output,
 158:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const int32_t *output_shift,
 159:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const int32_t *output_mult,
 160:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t output_x,
 161:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const uint16_t output_y,
 162:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const int32_t output_offset,
 163:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const int32_t input_offset,
 164:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const int32_t output_activation_min,
 165:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                       const int32_t output_activation_max)
 166:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** {
 167:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)output_ch;
 168:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     int i_out = 0;
 169:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     int i_batch;
 170:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     for (i_batch = 0; i_batch < input_batches; i_batch++)
 172:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 174:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 175:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 177:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 178:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 181:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 183:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int idx_out_ch = i_ch_mult + i_input_ch * ch_mult;
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         int32_t acc_0;
 185:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start)
 186:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_y_start = MAX(0, -base_idx_y);
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_start = MAX(0, -base_idx_x);
 188:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < i
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = bias[idx_out_ch];
 192:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             const int32_t idx_y = base_idx_y + i_ker_y;
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 197:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             {
 198:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                 const int32_t idx_x = base_idx_x + i_ker_x;
 199:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                 int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 200:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                 int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch
 201:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                 acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
 203:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             }
 204:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         }
 205:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 206:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         /* Requantize and clamp output to provided range */
 207:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 += output_offset;
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MAX(acc_0, output_activation_min);
 210:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MIN(acc_0, output_activation_max);
 211:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         output[i_out++] = acc_0;
 213:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     }
 214:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 }
 215:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             }
 216:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         }
 217:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         /* Advance to the next batch */
 218:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         input += (input_x * input_y * input_ch);
 219:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     }
 220:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** }
 221:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 222:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** /*
 223:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *  Basic s8 depthwise convolution function.
 224:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
 225:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *  Refer header file for details.
 226:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *  Optimization using DSP extension is not available for the generic case where channel multiplier
 227:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  *
 228:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****  */
 229:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** arm_status arm_depthwise_conv_s8(const cmsis_nn_context *ctx,
 230:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const cmsis_nn_dw_conv_params *dw_conv_params,
 231:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const cmsis_nn_per_channel_quant_params *quant_params,
 232:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const cmsis_nn_dims *input_dims,
 233:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const q7_t *input,
 234:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const cmsis_nn_dims *filter_dims,
 235:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const q7_t *kernel,
 236:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const cmsis_nn_dims *bias_dims,
 237:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const int32_t *bias,
 238:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  const cmsis_nn_dims *output_dims,
 239:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  q7_t *output)
 240:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** {
  10                             		.loc 1 240 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 72 00 0C FF             		add	#-244, r0
  15                             	.LCFI1:
  16                             		.loc 1 240 1 is_stmt 0
  17 0006 FB 7A 18 01             		mov.L	#0x118, r7
  18 000a 4B 07                   		add	r0, r7
  19 000c A8 7D                   		mov.L	4[r7], r5
  20 000e ED 7A 05                		mov.L	20[r7], r10
 241:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)dw_conv_params->dilation;
 242:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)bias_dims;
 243:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)ctx;
 244:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 245:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1)
  21                             		.loc 1 245 23
  22 0011 ED 28 02                		mov.L	8[r2], r8
 240:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)dw_conv_params->dilation;
  23                             		.loc 1 240 1
  24 0014 E4 70 1B                		mov.L	[r7], 108[r0]
  25 0017 E5 70 02 2B             		mov.L	8[r7], 172[r0]
  26 001b E5 70 04 01             		mov.L	16[r7], 4[r0]
 241:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)dw_conv_params->dilation;
  27                             		.loc 1 241 5 is_stmt 1
 242:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)ctx;
  28                             		.loc 1 242 5
 243:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
  29                             		.loc 1 243 5
  30                             		.loc 1 245 5
 240:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     (void)dw_conv_params->dilation;
  31                             		.loc 1 240 1 is_stmt 0
  32 001f E5 70 06 2A             		mov.L	24[r7], 168[r0]
  33 0023 EC 47                   		mov.L	[r4], r7
  34 0025 E5 40 02 1A             		mov.L	8[r4], 104[r0]
  35 0029 E5 40 01 1E             		mov.L	4[r4], 120[r0]
  36 002d E5 40 03 02             		mov.L	12[r4], 8[r0]
  37 0031 E5 50 02 1D             		mov.L	8[r5], 116[r0]
  38 0035 E5 50 01 21             		mov.L	4[r5], 132[r0]
  39 0039 E5 20 05 19             		mov.L	20[r2], 100[r0]
  40 003d A9 A5                   		mov.L	24[r2], r5
  41 003f E5 20 03 13             		mov.L	12[r2], 76[r0]
  42 0043 E5 20 04 14             		mov.L	16[r2], 80[r0]
  43 0047 E5 30 01 1F             		mov.L	4[r3], 124[r0]
  44 004b E4 30 20                		mov.L	[r3], 128[r0]
  45 004e E5 A0 02 10             		mov.L	8[r10], 64[r0]
  46 0052 E5 A0 01 1C             		mov.L	4[r10], 112[r0]
  47 0056 E5 20 01 0B             		mov.L	4[r2], 44[r0]
  48 005a E4 20 29                		mov.L	[r2], 164[r0]
  49 005d E5 20 09 0C             		mov.L	36[r2], 48[r0]
  50 0061 E5 20 0A 0A             		mov.L	40[r2], 40[r0]
  51                             		.loc 1 245 8
  52 0065 FD 74 C8 03             		tst	#3, r8
  53 0069 1F                      		bne	.L2
  54                             		.loc 1 245 42 discriminator 1
  55 006a 61 17                   		cmp	#1, r7
  56 006c 3A A1 02                		beq	.L81
  57 006f 03                      		.balign 8,3,4
  58                             	.L2:
 246:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 247:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         depthwise_conv_s8_mult_4(input,
 248:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  input_dims->w,
 249:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  input_dims->h,
 250:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  input_dims->c,
 251:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  kernel,
 252:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  output_dims->c,
 253:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->ch_mult,
 254:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  filter_dims->w,
 255:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  filter_dims->h,
 256:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->padding.w,
 257:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->padding.h,
 258:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->stride.w,
 259:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->stride.h,
 260:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  bias,
 261:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  output,
 262:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  quant_params->shift,
 263:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  quant_params->multiplier,
 264:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  output_dims->w,
 265:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  output_dims->h,
 266:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->output_offset,
 267:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->input_offset,
 268:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->activation.min,
 269:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  dw_conv_params->activation.max);
 270:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     }
 271:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     else
 272:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 273:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         depthwise_conv_s8_generic(input,
  59                             		.loc 1 273 9 is_stmt 1
  60 0070 77 27 FF FF 00          		and	#0xffff, r7
  61 0075 A5 0F                   		mov.L	r7, 84[r0]
  62 0077 ED 0B 19                		mov.L	100[r0], r11
  63 007a DF B4                   		mov.W	r11, r4
  64                             	.LVL1:
  65 007c AC 89                   		mov.L	76[r0], r1
  66                             	.LVL2:
  67 007e D7 01 26                		mov.W	r1, 76[r0]
  68 0081 AD 02                   		mov.L	80[r0], r2
  69                             	.LVL3:
  70 0083 D7 02 28                		mov.W	r2, 80[r0]
  71                             	.LVL4:
  72                             	.LBB79:
  73                             	.LBB80:
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
  74                             		.loc 1 171 5 is_stmt 0
  75 0086 3A 57 02                		beq	.L3
  76 0089 ED 0D 02                		mov.L	8[r0], r13
  77 008c 77 2D FF FF 00          		and #0xffff, r13
  78 0091 ED 0E 1A                		mov.L	104[r0], r14
  79 0094 77 2E FF FF 00          		and #0xffff, r14
  80 0099 FB 9E FF FF 00          		mov.L	#0xffff, r9
  81 009e 53 89                   		and	r8, r9
  82 00a0 AF 83                   		mov.L	120[r0], r3
  83                             	.LVL5:
  84 00a2 77 23 FF FF 00          		and #0xffff, r3
  85 00a7 A6 03                   		mov.L	r3, 96[r0]
  86 00a9 FF 36 DE                		mul	r13, r14, r6
  87 00ac A6 86                   		mov.L	r6, 104[r0]
  88 00ae AF 07                   		mov.L	112[r0], r7
  89 00b0 77 27 FF FF 00          		and #0xffff, r7
  90 00b5 A6 0F                   		mov.L	r7, 100[r0]
  91                             	.LVL6:
  92 00b7 ED 0A 10                		mov.L	64[r0], r10
  93                             	.LVL7:
  94 00ba 77 2A FF FF 00          		and #0xffff, r10
  95 00bf E7 0A 12                		mov.L	r10, 72[r0]
  96                             	.LBB81:
  97                             	.LBB82:
  98                             	.LBB83:
  99                             	.LBB84:
 100                             	.LBB85:
 101                             	.LBB86:
 102                             	.LBB87:
 103                             	.LBB88:
 104                             	.LBB89:
 105                             	.LBB90:
 106                             	.LBB91:
 200:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 107                             		.loc 1 200 96
 108 00c2 FF 3B 9D                		mul	r9, r13, r11
 109 00c5 E7 0B 09                		mov.L	r11, 36[r0]
 110                             	.LBE91:
 111                             	.LBE90:
 112                             	.LBE89:
 113                             	.LBE88:
 114                             	.LBE87:
 115                             	.LBE86:
 116                             	.LBE85:
 117                             	.LBE84:
 118                             	.LBE83:
 119                             	.LBE82:
 120                             	.LBE81:
 218:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     }
 121                             		.loc 1 218 37
 122 00c8 4F 63                   		mul	r6, r3
 123 00ca E7 03 22                		mov.L	r3, 136[r0]
 124 00cd 61 07                   		cmp	#0, r7
 125 00cf 3A 0E 02                		beq	.L3
 126 00d2 FD C2 91                		shll	#2, r9, r1
 127 00d5 A1 81                   		mov.L	r1, 24[r0]
 128 00d7 ED 0C 1D                		mov.L	116[r0], r12
 129 00da 77 2C FF FF 00          		and #0xffff, r12
 130 00df ED 02 20                		mov.L	128[r0], r2
 131 00e2 A8 0B                   		mov.L	4[r0], r3
 132 00e4 FF 0A 32                		sub	r3, r2, r10
 133 00e7 AF 8F                   		mov.L	124[r0], r7
 134 00e9 43 37                   		sub	r3, r7
 135 00eb 4B 13                   		add	r1, r3
 136 00ed E7 03 25                		mov.L	r3, 148[r0]
 137 00f0 FB 66 FC                		mov.L	#-4, r6
 138 00f3 4F 96                   		mul	r9, r6
 139 00f5 E7 06 24                		mov.L	r6, 144[r0]
 140 00f8 FF 0B 1A                		sub	r1, r10, r11
 141 00fb E7 0B 23                		mov.L	r11, 140[r0]
 142 00fe 43 17                   		sub	r1, r7
 143 0100 E7 07 20                		mov.L	r7, 128[r0]
 144 0103 AA 09                   		mov.L	36[r0], r1
 145 0105 4F C1                   		mul	r12, r1
 146 0107 E7 01 26                		mov.L	r1, 152[r0]
 168:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     int i_batch;
 147                             		.loc 1 168 9
 148 010a 3E 08 00                		mov.L	#0, 32[r0]
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 149                             		.loc 1 171 18
 150 010d 3E 07 00                		mov.L	#0, 28[r0]
 151 0110 7E 15                   		neg	r5
 152                             	.LVL8:
 153 0112 D7 05 50                		mov.W	r5, 160[r0]
 154                             	.LBB128:
 155                             	.LBB125:
 156                             	.LBB122:
 157                             	.LBB118:
 158                             	.LBB114:
 159                             	.LBB109:
 160                             	.LBB103:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 161                             		.loc 1 189 35
 162 0115 ED 02 21                		mov.L	132[r0], r2
 163 0118 77 22 FF FF 00          		and #0xffff, r2
 164 011d E7 02 21                		mov.L	r2, 132[r0]
 165 0120 7E 14                   		neg	r4
 166 0122 D7 04 4E                		mov.W	r4, 156[r0]
 167 0125 EF 98                   		mov.L	r9, r8
 168                             	.LVL9:
 169 0127 E7 0E 16                		mov.L	r14, 88[r0]
 170 012a E7 0C 17                		mov.L	r12, 92[r0]
 171 012d EF DC                   		mov.L	r13, r12
 172                             	.LVL10:
 173 012f 03                      		.balign 8,3,1
 174                             	.L31:
 175 0130 D5 00 50 06             		mov.W	160[r0], 12[r0]
 176                             	.LBE103:
 177                             	.LBE109:
 178                             	.LBE114:
 179                             	.LBE118:
 180                             	.LBE122:
 181                             	.LBE125:
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 182                             		.loc 1 173 18
 183 0134 3E 01 00                		mov.L	#0, 4[r0]
 184 0137 EF CD                   		mov.L	r12, r13
 185                             	.LVL11:
 186                             		.balign 8,3,1
 187                             	.L47:
 188                             	.LBB126:
 175:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 189                             		.loc 1 175 13 is_stmt 1
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 190                             		.loc 1 176 13
 191                             	.LBB123:
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 192                             		.loc 1 176 18
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 193                             		.loc 1 176 13 is_stmt 0
 194 0139 AC 83                   		mov.L	72[r0], r3
 195 013b 61 03                   		cmp	#0, r3
 196 013d 3A 73 01                		beq	.L32
 197 0140 99 87                   		mov.W	12[r0], r7
 198 0142 D5 00 4E 08             		mov.W	156[r0], 16[r0]
 199                             	.LBB119:
 200                             	.LBB115:
 201                             	.LBB110:
 202                             	.LBB104:
 186:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_start = MAX(0, -base_idx_x);
 203                             		.loc 1 186 49
 204 0146 FC 07 7E                		neg	r7, r14
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 205                             		.loc 1 189 47
 206 0149 ED 0A 18                		mov.L	96[r0], r10
 207 014c 43 7A                   		sub	r7, r10
 208 014e 61 07                   		cmp	#0, r7
 209 0150 2B 04                   		ble 1f
 210 0152 66 0E                   		mov #0, r14
 211                             	1:
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 212                             		.loc 1 189 35
 213 0154 ED 04 21                		mov.L	132[r0], r4
 214 0157 FC 17 A4                		min	r10, r4
 215 015a A3 0C                   		mov.L	r4, 52[r0]
 216 015c 4B E7                   		add	r14, r7
 217 015e AD 8D                   		mov.L	92[r0], r5
 218 0160 4F E5                   		mul	r14, r5
 219 0162 A7 05                   		mov.L	r5, 112[r0]
 220 0164 AD 86                   		mov.L	88[r0], r6
 221 0166 4F 76                   		mul	r7, r6
 222 0168 A7 0E                   		mov.L	r6, 116[r0]
 223                             	.LBE104:
 224                             	.LBE110:
 225                             	.LBE115:
 226                             	.LBE119:
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 227                             		.loc 1 176 22
 228 016a F8 06 00                		mov.L	#0, [r0]
 229 016d EF 8F                   		mov.L	r8, r15
 230 016f E7 0E 11                		mov.L	r14, 68[r0]
 231                             	.LVL12:
 232                             		.balign 8,3,1
 233                             	.L46:
 234                             	.LBB120:
 178:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 235                             		.loc 1 178 17 is_stmt 1
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 236                             		.loc 1 179 17
 237                             	.LBB116:
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 238                             		.loc 1 179 22
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 239                             		.loc 1 179 17 is_stmt 0
 240 0172 61 0D                   		cmp	#0, r13
 241 0174 3A 21 01                		beq	.L33
 242 0177 9A 04                   		mov.W	16[r0], r4
 243                             	.LBB111:
 244                             	.LBB105:
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = bias[idx_out_ch];
 245                             		.loc 1 190 35
 246 0179 ED 0A 25                		mov.L	148[r0], r10
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < i
 247                             		.loc 1 187 49
 248 017c FC 07 4E                		neg	r4, r14
 249 017f AF 0F                   		mov.L	116[r0], r7
 250 0181 4B 47                   		add	r4, r7
 251 0183 61 04                   		cmp	#0, r4
 252 0185 2B 04                   		ble 1f
 253 0187 66 0E                   		mov #0, r14
 254                             	1:
 255 0189 AF 05                   		mov.L	112[r0], r5
 256 018b 4B E5                   		add	r14, r5
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = bias[idx_out_ch];
 257                             		.loc 1 190 47
 258 018d ED 0B 16                		mov.L	88[r0], r11
 259 0190 FF 04 4B                		sub	r4, r11, r4
 260 0193 AA 09                   		mov.L	36[r0], r1
 261 0195 4F 15                   		mul	r1, r5
 262 0197 4B E7                   		add	r14, r7
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = bias[idx_out_ch];
 263                             		.loc 1 190 35
 264 0199 AD 8A                   		mov.L	92[r0], r2
 265 019b FC 17 42                		min	r4, r2
 266 019e A3 82                   		mov.L	r2, 56[r0]
 267 01a0 06 89 05 2B             		add	172[r0], r5
 268 01a4 A1 0D                   		mov.L	r5, 20[r0]
 269 01a6 4F D7                   		mul	r13, r7
 270 01a8 A7 87                   		mov.L	r7, 120[r0]
 271                             	.LBE105:
 272                             	.LBE111:
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 273                             		.loc 1 179 26
 274 01aa 66 0B                   		mov.L	#0, r11
 275 01ac FC 43 EB                		xchg	r14, r11
 276                             	.LVL13:
 277 01af 03                      		.balign 8,3,1
 278                             	.L34:
 279                             	.LBB112:
 181:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 280                             		.loc 1 181 21
 281 01b0 61 0F                   		cmp	#0, r15
 282 01b2 3A D2 00                		beq	.L45
 283 01b5 ED 01 24                		mov.L	144[r0], r1
 284 01b8 4B A1                   		add	r10, r1
 285 01ba ED 02 2A                		mov.L	168[r0], r2
 286 01bd 06 89 02 08             		add	32[r0], r2
 287 01c1 ED 03 23                		mov.L	140[r0], r3
 288 01c4 4B A3                   		add	r10, r3
 289 01c6 A4 03                   		mov.L	r3, 64[r0]
 290 01c8 ED 04 20                		mov.L	128[r0], r4
 291 01cb 4B A4                   		add	r10, r4
 292 01cd A3 8C                   		mov.L	r4, 60[r0]
 293 01cf A9 0D                   		mov.L	20[r0], r5
 294 01d1 EF 58                   		mov.L	r5, r8
 295                             	.LVL14:
 296                             		.balign 8,3,3
 297                             	.L35:
 298                             	.LBB106:
 183:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         int32_t acc_0;
 299                             		.loc 1 183 25 is_stmt 1
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start)
 300                             		.loc 1 184 25
 186:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_start = MAX(0, -base_idx_x);
 301                             		.loc 1 186 25
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < i
 302                             		.loc 1 187 25
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 303                             		.loc 1 189 25
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = bias[idx_out_ch];
 304                             		.loc 1 190 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 305                             		.loc 1 191 25
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 306                             		.loc 1 191 31 is_stmt 0
 307 01d3 FD 2A 15                		mov.L	[r1+], r5
 308 01d6 A0 85                   		mov.L	r5, 8[r0]
 309                             	.LVL15:
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
 310                             		.loc 1 193 25 is_stmt 1
 311                             	.LBB96:
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
 312                             		.loc 1 193 30
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
 313                             		.loc 1 193 25 is_stmt 0
 314 01d8 AB 0E                   		mov.L	52[r0], r6
 315 01da AC 0F                   		mov.L	68[r0], r7
 316 01dc 47 76                   		cmp	r7, r6
 317 01de 2B 4D                   		ble	.L36
 318 01e0 AF 86                   		mov.L	120[r0], r6
 319 01e2 EF 74                   		mov.L	r7, r4
 320 01e4 EF 89                   		mov.L	r8, r9
 321                             	.LVL16:
 322                             		.balign 8,3,1
 323                             	.L39:
 324                             	.LBB95:
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 325                             		.loc 1 195 29 is_stmt 1
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             {
 326                             		.loc 1 196 29
 327                             	.LBB94:
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             {
 328                             		.loc 1 196 34
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             {
 329                             		.loc 1 196 29 is_stmt 0
 330 01e6 AB 83                   		mov.L	56[r0], r3
 331 01e8 47 B3                   		cmp	r11, r3
 332 01ea 2B 31                   		ble	.L37
 333 01ec FF 27 E6                		add	r14, r6, r7
 334 01ef EF 9C                   		mov.L	r9, r12
 335 01f1 06 89 07 1B             		add	108[r0], r7
 336 01f5 EF B3                   		mov.L	r11, r3
 337 01f7 E7 0A 2C                		mov.L	r10, 176[r0]
 338                             	.LVL17:
 339                             		.balign 8,3,5
 340                             	.L38:
 341                             	.LBB92:
 198:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                 int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 342                             		.loc 1 198 33 is_stmt 1
 199:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                 int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch
 343                             		.loc 1 199 33
 200:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 344                             		.loc 1 200 33
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             }
 345                             		.loc 1 202 33
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             }
 346                             		.loc 1 202 48 is_stmt 0
 347 01fa CC 75                   		mov.B	[r7], r5
 348                             	.LBE92:
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             {
 349                             		.loc 1 196 89
 350 01fc 62 13                   		add	#1, r3
 351                             	.LVL18:
 352                             	.LBB93:
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             }
 353                             		.loc 1 202 80
 354 01fe CC CA                   		mov.B	[r12], r10
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             }
 355                             		.loc 1 202 56
 356 0200 06 89 05 29             		add	164[r0], r5
 357 0204 4B D7                   		add	r13, r7
 358                             	.LVL19:
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             }
 359                             		.loc 1 202 72
 360 0206 4F A5                   		mul	r10, r5
 361 0208 06 89 0C 09             		add	36[r0], r12
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             }
 362                             		.loc 1 202 39
 363 020c 06 89 05 02             		add	8[r0], r5
 364 0210 A0 85                   		mov.L	r5, 8[r0]
 365                             	.LVL20:
 366                             	.LBE93:
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             {
 367                             		.loc 1 196 29
 368 0212 AB 85                   		mov.L	56[r0], r5
 369                             	.LVL21:
 370 0214 47 35                   		cmp	r3, r5
 371 0216 21 E4                   		bne	.L38
 372 0218 ED 0A 2C                		mov.L	176[r0], r10
 373                             	.LVL22:
 374                             		.balign 8,3,1
 375                             	.L37:
 376                             	.LBE94:
 377                             	.LBE95:
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
 378                             		.loc 1 193 85
 379 021b 62 14                   		add	#1, r4
 380                             	.LVL23:
 381 021d 06 89 09 26             		add	152[r0], r9
 382 0221 06 89 06 1A             		add	104[r0], r6
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
 383                             		.loc 1 193 25
 384 0225 AB 0F                   		mov.L	52[r0], r7
 385 0227 47 47                   		cmp	r4, r7
 386 0229 21 BD                   		bne	.L39
 387                             	.LVL24:
 388                             		.balign 8,3,1
 389                             	.L36:
 390                             	.LBE96:
 207:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 += output_offset;
 391                             		.loc 1 207 25 is_stmt 1
 207:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 += output_offset;
 392                             		.loc 1 207 33 is_stmt 0
 393 022b AB 8B                   		mov.L	60[r0], r3
 394 022d FD 2A 35                		mov.L	[r3+], r5
 395 0230 A3 8B                   		mov.L	r3, 60[r0]
 396                             	.LVL25:
 397 0232 AC 06                   		mov.L	64[r0], r6
 398 0234 FD 2A 64                		mov.L	[r6+], r4
 399 0237 A4 06                   		mov.L	r6, 64[r0]
 400                             	.LVL26:
 401                             	.LBB97:
 402                             	.LBB98:
 403                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 404                             		.loc 2 816 5 is_stmt 1
 405                             		.loc 2 816 25 is_stmt 0
 406 0239 66 07                   		mov.L	#0, r7
 407 023b FC 13 57                		max	r5, r7
 408                             		.loc 2 816 11
 409 023e A8 83                   		mov.L	8[r0], r3
 410 0240 FD 62 73                		shll	r7, r3
 411 0243 EF 37                   		mov.L	r3, r7
 412                             	.LVL27:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 413                             		.loc 2 817 5 is_stmt 1
 414                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 415 0245 FD 03 74                		emula r7, r4, a0
 416 0248 FD 19 00                	racl #1, a0
 417 024b FD 1F 07                	mvfachi #0, a0, r7
 418                             	
 419                             	 ; 0 "" 2
 420                             	.LVL28:
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
 421                             		.loc 2 823 5
 422                             		.loc 2 823 22 is_stmt 0
 423 024e 61 05                   		cmp	#0, r5
 424 0250 2A 05 38 B6 00          		ble	.L82
 425 0255 66 05                   		mov.L	#0, r5
 426                             	.LVL29:
 427 0257 03                      		.balign 8,3,1
 428                             	.L40:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 429                             		.loc 2 824 5 is_stmt 1
 430                             		.loc 2 824 8 is_stmt 0
 431 0258 61 07                   		cmp	#0, r7
 432 025a 28 05 38 86 00          		blt	.L83
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 433                             		.loc 2 833 9 is_stmt 1
 434                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 435 025f FD 60 57                		shlr r5, r7
 436 0262 FD 74 27 00             	adc #0, r7
 437                             	
 438                             	 ; 0 "" 2
 439                             	.LVL30:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 440                             		.loc 2 839 5
 441                             	.LBE98:
 442                             	.LBE97:
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MAX(acc_0, output_activation_min);
 443                             		.loc 1 208 25
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MAX(acc_0, output_activation_min);
 444                             		.loc 1 208 31 is_stmt 0
 445 0266 06 89 07 0B             		add	44[r0], r7
 446                             	.LVL31:
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MIN(acc_0, output_activation_max);
 447                             		.loc 1 209 25 is_stmt 1
 448 026a 62 18                   		add	#1, r8
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MIN(acc_0, output_activation_max);
 449                             		.loc 1 209 31 is_stmt 0
 450 026c AB 06                   		mov.L	48[r0], r6
 451 026e FC 13 67                		max	r6, r7
 452                             	.LVL32:
 210:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 453                             		.loc 1 210 25 is_stmt 1
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     }
 454                             		.loc 1 212 25
 210:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 455                             		.loc 1 210 31 is_stmt 0
 456 0271 AA 83                   		mov.L	40[r0], r3
 457 0273 FC 17 37                		min	r3, r7
 458                             	.LVL33:
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     }
 459                             		.loc 1 212 41
 460 0276 FD 20 27                		mov.B	r7, [r2+]
 461                             	.LVL34:
 462                             	.LBE106:
 181:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 463                             		.loc 1 181 21
 464 0279 47 1A                   		cmp	r1, r10
 465 027b 3B 58 FF                		bne	.L35
 466                             	.LVL35:
 467                             		.balign 8,3,1
 468                             	.L43:
 469 027e AA 04                   		mov.L	32[r0], r4
 470 0280 4B F4                   		add	r15, r4
 471 0282 A2 04                   		mov.L	r4, 32[r0]
 472                             	.LVL36:
 473                             		.balign 8,3,1
 474                             	.L45:
 475                             	.LBE112:
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 476                             		.loc 1 179 75
 477 0284 62 1E                   		add	#1, r14
 478                             	.LVL37:
 479 0286 06 89 0A 06             		add	24[r0], r10
 480 028a A9 0D                   		mov.L	20[r0], r5
 481 028c 4B F5                   		add	r15, r5
 482 028e A1 0D                   		mov.L	r5, 20[r0]
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 483                             		.loc 1 179 17
 484 0290 47 ED                   		cmp	r14, r13
 485 0292 3B 1E FF                		bne	.L34
 486                             	.LVL38:
 487                             		.balign 8,3,1
 488                             	.L33:
 489                             	.LBE116:
 490                             	.LBE120:
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 491                             		.loc 1 176 62
 492 0295 EC 06                   		mov.L	[r0], r6
 493 0297 62 16                   		add	#1, r6
 494 0299 E3 06                   		mov.L	r6, [r0]
 495                             	.LVL39:
 496 029b DD 07 26                		mov.W	76[r0], r7
 497 029e DD 0A 08                		mov.W	16[r0], r10
 498 02a1 4B A7                   		add	r10, r7
 499 02a3 92 07                   		mov.W	r7, 16[r0]
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 500                             		.loc 1 176 13
 501 02a5 ED 0B 12                		mov.L	72[r0], r11
 502 02a8 47 6B                   		cmp	r6, r11
 503 02aa 3B C8 FE                		bne	.L46
 504 02ad EF F8                   		mov.L	r15, r8
 505                             	.LVL40:
 506 02af 03                      		.balign 8,3,1
 507                             	.L32:
 508                             	.LBE123:
 509                             	.LBE126:
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 510                             		.loc 1 173 58
 511 02b0 A8 09                   		mov.L	4[r0], r1
 512 02b2 62 11                   		add	#1, r1
 513 02b4 A0 09                   		mov.L	r1, 4[r0]
 514                             	.LVL41:
 515 02b6 DD 02 28                		mov.W	80[r0], r2
 516 02b9 99 83                   		mov.W	12[r0], r3
 517 02bb 4B 32                   		add	r3, r2
 518 02bd 91 82                   		mov.W	r2, 12[r0]
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 519                             		.loc 1 173 9
 520 02bf AE 0C                   		mov.L	100[r0], r4
 521 02c1 47 41                   		cmp	r4, r1
 522 02c3 3B 76 FE                		bne	.L47
 523 02c6 EF DC                   		mov.L	r13, r12
 524                             	.LBE128:
 218:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     }
 525                             		.loc 1 218 9 is_stmt 1
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 526                             		.loc 1 171 55 is_stmt 0
 527 02c8 A9 8D                   		mov.L	28[r0], r5
 528 02ca 62 15                   		add	#1, r5
 529 02cc A1 8D                   		mov.L	r5, 28[r0]
 218:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     }
 530                             		.loc 1 218 15
 531 02ce AE 8E                   		mov.L	108[r0], r6
 532 02d0 06 89 06 22             		add	136[r0], r6
 533 02d4 A6 8E                   		mov.L	r6, 108[r0]
 534                             	.LVL42:
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 535                             		.loc 1 171 5
 536 02d6 AD 0F                   		mov.L	84[r0], r7
 537 02d8 47 75                   		cmp	r7, r5
 538 02da 3B 56 FE                		bne	.L31
 539                             	.LVL43:
 540                             		.balign 8,3,1
 541                             	.L3:
 542                             	.LBE80:
 543                             	.LBE79:
 274:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   input_dims->n,
 275:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   input_dims->w,
 276:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   input_dims->h,
 277:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   input_dims->c,
 278:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   kernel,
 279:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   output_dims->c,
 280:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->ch_mult,
 281:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   filter_dims->w,
 282:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   filter_dims->h,
 283:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->padding.w,
 284:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->padding.h,
 285:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->stride.w,
 286:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->stride.h,
 287:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   bias,
 288:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   output,
 289:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   quant_params->shift,
 290:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   quant_params->multiplier,
 291:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   output_dims->w,
 292:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   output_dims->h,
 293:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->output_offset,
 294:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->input_offset,
 295:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->activation.min,
 296:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                   dw_conv_params->activation.max);
 297:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     }
 298:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 299:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     /* Return to application */
 300:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     return ARM_MATH_SUCCESS;
 544                             		.loc 1 300 5 is_stmt 1
 301:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** }
 545                             		.loc 1 301 1 is_stmt 0
 546 02dd 66 01                   		mov.L	#0, r1
 547 02df 3F 6D 45                		rtsd	#276, r6-r13
 548                             	.LVL44:
 549                             	.L83:
 550                             	.LBB131:
 551                             	.LBB130:
 552                             	.LBB129:
 553                             	.LBB127:
 554                             	.LBB124:
 555                             	.LBB121:
 556                             	.LBB117:
 557                             	.LBB113:
 558                             	.LBB107:
 559                             	.LBB101:
 560                             	.LBB99:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 561                             		.loc 2 825 9 is_stmt 1
 562                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 563 02e2 7E 17                   		neg r7
 564 02e4 FD 60 57                	shlr r5, r7
 565 02e7 FD 74 27 00             	adc #0, r7
 566 02eb 7E 17                   	neg r7
 567                             	
 568                             	 ; 0 "" 2
 569                             	.LVL45:
 570                             		.loc 2 839 5
 571                             	.LBE99:
 572                             	.LBE101:
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MAX(acc_0, output_activation_min);
 573                             		.loc 1 208 25
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MAX(acc_0, output_activation_min);
 574                             		.loc 1 208 31 is_stmt 0
 575 02ed 06 89 07 0B             		add	44[r0], r7
 576                             	.LVL46:
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MIN(acc_0, output_activation_max);
 577                             		.loc 1 209 25 is_stmt 1
 578 02f1 62 18                   		add	#1, r8
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         acc_0 = MIN(acc_0, output_activation_max);
 579                             		.loc 1 209 31 is_stmt 0
 580 02f3 AB 04                   		mov.L	48[r0], r4
 581 02f5 FC 13 47                		max	r4, r7
 582                             	.LVL47:
 210:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 583                             		.loc 1 210 25 is_stmt 1
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     }
 584                             		.loc 1 212 25
 210:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 585                             		.loc 1 210 31 is_stmt 0
 586 02f8 AA 85                   		mov.L	40[r0], r5
 587                             	.LVL48:
 588 02fa FC 17 57                		min	r5, r7
 589                             	.LVL49:
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     }
 590                             		.loc 1 212 41
 591 02fd FD 20 27                		mov.B	r7, [r2+]
 592                             	.LVL50:
 593                             	.LBE107:
 181:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 594                             		.loc 1 181 21
 595 0300 47 1A                   		cmp	r1, r10
 596 0302 3B D1 FE                		bne	.L35
 597 0305 38 79 FF                		bra	.L43
 598                             	.LVL51:
 599                             	.L82:
 600                             	.LBB108:
 601                             	.LBB102:
 602                             	.LBB100:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 603                             		.loc 2 823 22
 604 0308 7E 15                   		neg	r5
 605                             	.LVL52:
 606 030a 38 4E FF                		bra	.L40
 607                             	.LVL53:
 608                             	.L81:
 609                             	.LBE100:
 610                             	.LBE102:
 611                             	.LBE108:
 612                             	.LBE113:
 613                             	.LBE117:
 614                             	.LBE121:
 615                             	.LBE124:
 616                             	.LBE127:
 617                             	.LBE129:
 618                             	.LBE130:
 619                             	.LBE131:
 247:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                                  input_dims->w,
 620                             		.loc 1 247 9 is_stmt 1
 621 030d E1 A0 03                		mov.L	12[r10], [r0]
 622                             	.LVL54:
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 623                             		.loc 1 67 5
 624                             	.LBB132:
 625                             	.LBB133:
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 626                             		.loc 1 67 10
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 627                             		.loc 1 67 18 is_stmt 0
 628 0310 FC 07 51                		neg	r5, r1
 629                             	.LVL55:
 630 0313 A0 89                   		mov.L	r1, 12[r0]
 631                             	.LVL56:
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 632                             		.loc 1 67 5
 633 0315 AF 02                   		mov.L	112[r0], r2
 634                             	.LVL57:
 635 0317 61 02                   		cmp	#0, r2
 636 0319 2B C4                   		ble	.L3
 637 031b 71 87 FF                		add	#-1, r8, r7
 638 031e AE 0B                   		mov.L	100[r0], r3
 639                             	.LVL58:
 640 0320 7E 13                   		neg	r3
 641 0322 E7 03 2F                		mov.L	r3, 188[r0]
 642                             	.LBB134:
 643                             	.LBB135:
 644                             	.LBB136:
 645                             	.LBB137:
 646                             	.LBB138:
 647                             	.LBB139:
  85:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + 
 648                             		.loc 1 85 62
 649 0325 AF 0C                   		mov.L	116[r0], r4
 650                             	.LVL59:
 651 0327 EC 06                   		mov.L	[r0], r6
 652 0329 4F 64                   		mul	r6, r4
 653 032b E7 04 23                		mov.L	r4, 140[r0]
  86:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 654                             		.loc 1 86 69
 655 032e ED 0A 02                		mov.L	8[r0], r10
 656                             	.LVL60:
 657 0331 ED 0B 1A                		mov.L	104[r0], r11
 658 0334 4F BA                   		mul	r11, r10
 659 0336 E7 0A 24                		mov.L	r10, 144[r0]
 660 0339 A1 05                   		mov.L	r5, 16[r0]
 661 033b A8 81                   		mov.L	8[r0], r1
 662                             	.LVL61:
 663 033d AC 8A                   		mov.L	76[r0], r2
 664 033f 4F 21                   		mul	r2, r1
 665 0341 E7 01 30                		mov.L	r1, 192[r0]
 666 0344 A8 84                   		mov.L	8[r0], r4
 667 0346 4F 43                   		mul	r4, r3
 668 0348 E7 03 34                		mov.L	r3, 208[r0]
 669 034b FB 56 FC                		mov.L	#-4, r5
 670 034e 53 75                   		and	r7, r5
 671 0350 E7 05 31                		mov.L	r5, 196[r0]
 672                             	.LBE139:
 673                             	.LBE138:
 674                             	.LBE137:
 675                             	.LBE136:
 676                             	.LBE135:
 677                             	.LBE134:
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 678                             		.loc 1 67 44
 679 0353 3E 82 00                		mov.L	#0, 72[r0]
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 680                             		.loc 1 67 33
 681 0356 3E 81 00                		mov.L	#0, 68[r0]
 682 0359 E7 05 32                		mov.L	r5, 200[r0]
 683 035c A8 0E                   		mov.L	4[r0], r6
 684                             	.LVL62:
 685 035e 71 66 10                		add	#16, r6
 686 0361 E7 06 33                		mov.L	r6, 204[r0]
 687 0364 E7 08 22                		mov.L	r8, 136[r0]
 688 0367 ED 0F 0A                		mov.L	40[r0], r15
 689                             	.LVL63:
 690                             		.balign 8,3,1
 691                             	.L29:
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 692                             		.loc 1 69 9 is_stmt 1
 693                             	.LBB176:
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 694                             		.loc 1 69 14
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 695                             		.loc 1 69 62 is_stmt 0
 696 036a A9 07                   		mov.L	16[r0], r7
 697 036c ED 0A 03                		mov.L	12[r0], r10
 698 036f 61 0A                   		cmp	#0, r10
 699 0371 EF 7E                   		mov.L	r7, r14
 700 0373 2B 04                   		ble 1f
 701 0375 66 0E                   		mov #0, r14
 702                             	1:
 703                             	.LVL64:
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 704                             		.loc 1 69 9
 705 0377 ED 0B 10                		mov.L	64[r0], r11
 706 037a 61 0B                   		cmp	#0, r11
 707 037c 2A 05 38 AC 02          		ble	.L5
 708                             	.LBB173:
 709                             	.LBB169:
 710                             	.LBB165:
 711                             	.LBB146:
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 712                             		.loc 1 83 63
 713 0381 AF 87                   		mov.L	120[r0], r7
 714 0383 06 89 07 04             		add	16[r0], r7
 715 0387 4B EA                   		add	r14, r10
 716 0389 ED 01 21                		mov.L	132[r0], r1
 717 038c FC 17 71                		min	r7, r1
 718 038f A5 89                   		mov.L	r1, 92[r0]
 719 0391 ED 07 23                		mov.L	140[r0], r7
 720 0394 4F E7                   		mul	r14, r7
 721 0396 ED 0D 19                		mov.L	100[r0], r13
 722 0399 ED 02 24                		mov.L	144[r0], r2
 723 039c 4F A2                   		mul	r10, r2
 724 039e E7 02 2E                		mov.L	r2, 184[r0]
 725 03a1 06 89 07 2B             		add	172[r0], r7
 726 03a5 E7 07 2D                		mov.L	r7, 180[r0]
 727 03a8 E5 00 34 0F             		mov.L	208[r0], 60[r0]
 728                             	.LBE146:
 729                             	.LBE165:
 730                             	.LBE169:
 731                             	.LBE173:
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 732                             		.loc 1 69 22
 733 03ac E5 00 2F 0D             		mov.L	188[r0], 52[r0]
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 734                             		.loc 1 69 37
 735 03b0 3E 0E 00                		mov.L	#0, 56[r0]
 736 03b3 E7 0E 18                		mov.L	r14, 96[r0]
 737 03b6 EF D8                   		mov.L	r13, r8
 738 03b8 EF FD                   		mov.L	r15, r13
 739                             	.LVL65:
 740                             		.balign 8,3,1
 741                             	.L28:
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                  ++in_ch, out_ch += ch_mult)
 742                             		.loc 1 71 13 is_stmt 1
 743                             	.LBB174:
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                  ++in_ch, out_ch += ch_mult)
 744                             		.loc 1 71 18
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                  ++in_ch, out_ch += ch_mult)
 745                             		.loc 1 71 63 is_stmt 0
 746 03ba AB 0B                   		mov.L	52[r0], r3
 747 03bc 61 03                   		cmp	#0, r3
 748 03be EF 8E                   		mov.L	r8, r14
 749 03c0 2B 04                   		ble 1f
 750 03c2 66 0E                   		mov #0, r14
 751                             	1:
 752                             	.LVL66:
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                  ++in_ch, out_ch += ch_mult)
 753                             		.loc 1 71 13
 754 03c4 EC 04                   		mov.L	[r0], r4
 755 03c6 61 04                   		cmp	#0, r4
 756 03c8 2A 05 38 39 02          		ble	.L7
 757                             	.LBB170:
 758                             	.LBB166:
 759                             	.LBB147:
 760                             	.LBB144:
 761                             	.LBB140:
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                              ++ker_w, ker_idx += output_ch)
 762                             		.loc 1 88 67
 763 03cd AE 87                   		mov.L	104[r0], r7
 764 03cf 4B 87                   		add	r8, r7
 765 03d1 AB 8D                   		mov.L	60[r0], r5
 766 03d3 06 89 05 2E             		add	184[r0], r5
 767 03d7 ED 0A 02                		mov.L	8[r0], r10
 768 03da 4F EA                   		mul	r14, r10
 769 03dc AF 0E                   		mov.L	116[r0], r6
 770 03de FC 17 76                		min	r7, r6
 771 03e1 A5 0E                   		mov.L	r6, 84[r0]
 772                             	.LBE140:
  85:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + 
 773                             		.loc 1 85 88
 774 03e3 EF 47                   		mov.L	r4, r7
 775 03e5 4F E7                   		mul	r14, r7
 776 03e7 4B A5                   		add	r10, r5
 777 03e9 A2 05                   		mov.L	r5, 32[r0]
 778 03eb 06 89 07 2D             		add	180[r0], r7
 779 03ef E7 07 25                		mov.L	r7, 148[r0]
 780                             	.LBE144:
 781                             	.LBE147:
 782                             	.LBE166:
 783                             	.LBE170:
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                  ++in_ch, out_ch += ch_mult)
 784                             		.loc 1 71 37
 785 03f2 66 09                   		mov.L	#0, r9
 786 03f4 E7 0E 16                		mov.L	r14, 88[r0]
 787 03f7 E7 08 28                		mov.L	r8, 160[r0]
 788 03fa EF 98                   		mov.L	r9, r8
 789 03fc EF DB                   		mov.L	r13, r11
 790                             	.LVL67:
 791 03fe EF 00                   		.balign 8,3,2
 792                             	.L8:
 793                             	.LBB171:
  74:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 794                             		.loc 1 74 17
 795 0400 ED 07 22                		mov.L	136[r0], r7
 796 0403 61 07                   		cmp	#0, r7
 797 0405 2A 05 38 E4 01          		ble	.L27
 798 040a ED 07 32                		mov.L	200[r0], r7
 799 040d 4B 87                   		add	r8, r7
 800 040f FD C2 8A                		shll	#2, r8, r10
 801 0412 6C 27                   		shll	#2, r7
 802 0414 ED 0F 01                		mov.L	4[r0], r15
 803 0417 4B AF                   		add	r10, r15
 804 0419 ED 0E 2A                		mov.L	168[r0], r14
 805 041c 06 89 0E 12             		add	72[r0], r14
 806 0420 ED 0D 20                		mov.L	128[r0], r13
 807 0423 4B AD                   		add	r10, r13
 808 0425 AF 8E                   		mov.L	124[r0], r6
 809 0427 4B A6                   		add	r10, r6
 810 0429 ED 0A 25                		mov.L	148[r0], r10
 811 042c 4B 8A                   		add	r8, r10
 812 042e E7 0A 09                		mov.L	r10, 36[r0]
 813 0431 06 89 07 33             		add	204[r0], r7
 814 0435 E7 07 26                		mov.L	r7, 152[r0]
 815 0438 E7 08 2C                		mov.L	r8, 176[r0]
 816 043b EF 6C                   		mov.L	r6, r12
 817 043d EF E3                   		mov.L	r14, r3
 818                             	.LVL68:
 819 043f 03                      		.balign 8,3,1
 820                             	.L25:
 821                             	.LBB167:
  76:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 822                             		.loc 1 76 21 is_stmt 1
  78:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = bias[out_ch + 1 + mult_tile];
 823                             		.loc 1 78 21
  78:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = bias[out_ch + 1 + mult_tile];
 824                             		.loc 1 78 39 is_stmt 0
 825 0440 EC F7                   		mov.L	[r15], r7
 826                             	.LVL69:
  79:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = bias[out_ch + 2 + mult_tile];
 827                             		.loc 1 79 21 is_stmt 1
  79:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = bias[out_ch + 2 + mult_tile];
 828                             		.loc 1 79 39 is_stmt 0
 829 0442 E5 F0 01 05             		mov.L	4[r15], 20[r0]
 830                             	.LVL70:
  80:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = bias[out_ch + 3 + mult_tile];
 831                             		.loc 1 80 21 is_stmt 1
  80:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = bias[out_ch + 3 + mult_tile];
 832                             		.loc 1 80 39 is_stmt 0
 833 0446 E5 F0 02 07             		mov.L	8[r15], 28[r0]
 834                             	.LVL71:
  81:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 835                             		.loc 1 81 21 is_stmt 1
  81:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 836                             		.loc 1 81 39 is_stmt 0
 837 044a E5 F0 03 06             		mov.L	12[r15], 24[r0]
 838                             	.LVL72:
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 839                             		.loc 1 83 21 is_stmt 1
 840                             	.LBB148:
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 841                             		.loc 1 83 26
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 842                             		.loc 1 83 21 is_stmt 0
 843 044e AD 89                   		mov.L	92[r0], r1
 844 0450 AE 02                   		mov.L	96[r0], r2
 845 0452 47 21                   		cmp	r2, r1
 846 0454 2B 7C                   		ble	.L9
 847 0456 EF 24                   		mov.L	r2, r4
 848 0458 AE 8A                   		mov.L	108[r0], r2
 849 045a 06 89 02 08             		add	32[r0], r2
 850 045e E5 00 09 0A             		mov.L	36[r0], 40[r0]
 851 0462 EF 26                   		mov.L	r2, r6
 852                             	.LVL73:
 853                             		.balign 8,3,1
 854                             	.L12:
 855                             	.LBB145:
  85:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + 
 856                             		.loc 1 85 25 is_stmt 1
  86:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 857                             		.loc 1 86 25
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                              ++ker_w, ker_idx += output_ch)
 858                             		.loc 1 88 25
 859                             	.LBB143:
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                              ++ker_w, ker_idx += output_ch)
 860                             		.loc 1 88 30
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                              ++ker_w, ker_idx += output_ch)
 861                             		.loc 1 88 25 is_stmt 0
 862 0464 AD 85                   		mov.L	88[r0], r5
 863 0466 ED 0A 15                		mov.L	84[r0], r10
 864 0469 47 A5                   		cmp	r10, r5
 865 046b 28 4E                   		bge	.L10
 866 046d ED 0A 0A                		mov.L	40[r0], r10
 867 0470 EF 61                   		mov.L	r6, r1
 868 0472 EF 52                   		mov.L	r5, r2
 869 0474 E7 0B 35                		mov.L	r11, 212[r0]
 870                             	.LVL74:
 871 0477 03                      		.balign 8,3,5
 872                             	.L11:
 873                             	.LBB141:
  91:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 874                             		.loc 1 91 29 is_stmt 1
  91:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 875                             		.loc 1 91 51 is_stmt 0
 876 0478 CC 15                   		mov.B	[r1], r5
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 877                             		.loc 1 92 59
 878 047a CC AE                   		mov.B	[r10], r14
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 879                             		.loc 1 93 59
 880 047c CD A8 01                		mov.B	1[r10], r8
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 881                             		.loc 1 94 59
 882 047f CD A9 02                		mov.B	2[r10], r9
  91:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 883                             		.loc 1 91 37
 884 0482 06 89 05 29             		add	164[r0], r5
 885                             	.LVL75:
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 886                             		.loc 1 92 29 is_stmt 1
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         }
 887                             		.loc 1 95 59 is_stmt 0
 888 0486 CD AB 03                		mov.B	3[r10], r11
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 889                             		.loc 1 92 51
 890 0489 4F 5E                   		mul	r5, r14
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 891                             		.loc 1 93 51
 892 048b 4F 58                   		mul	r5, r8
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 893                             		.loc 1 94 51
 894 048d 4F 59                   		mul	r5, r9
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         }
 895                             		.loc 1 95 51
 896 048f 4F B5                   		mul	r11, r5
 897                             	.LVL76:
 898                             	.LBE141:
  89:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         {
 899                             		.loc 1 89 30
 900 0491 62 12                   		add	#1, r2
 901                             	.LVL77:
 902                             	.LBB142:
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 903                             		.loc 1 92 41
 904 0493 4B E7                   		add	r14, r7
 905                             	.LVL78:
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 906                             		.loc 1 93 29 is_stmt 1
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 907                             		.loc 1 93 41 is_stmt 0
 908 0495 06 89 08 05             		add	20[r0], r8
 909 0499 E7 08 05                		mov.L	r8, 20[r0]
 910                             	.LVL79:
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 911                             		.loc 1 94 29 is_stmt 1
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                             out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 912                             		.loc 1 94 41 is_stmt 0
 913 049c 06 89 09 07             		add	28[r0], r9
 914 04a0 E7 09 07                		mov.L	r9, 28[r0]
 915                             	.LVL80:
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         }
 916                             		.loc 1 95 29 is_stmt 1
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         }
 917                             		.loc 1 95 41 is_stmt 0
 918 04a3 06 89 05 06             		add	24[r0], r5
 919 04a7 A1 85                   		mov.L	r5, 24[r0]
 920                             	.LVL81:
 921 04a9 06 89 01 02             		add	8[r0], r1
 922                             	.LVL82:
 923 04ad 06 88 0A                		add	[r0], r10
 924                             	.LBE142:
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                              ++ker_w, ker_idx += output_ch)
 925                             		.loc 1 88 25
 926 04b0 AD 0D                   		mov.L	84[r0], r5
 927                             	.LVL83:
 928 04b2 47 52                   		cmp	r5, r2
 929 04b4 21 C4                   		bne	.L11
 930 04b6 ED 0B 35                		mov.L	212[r0], r11
 931                             	.LVL84:
 932                             		.balign 8,3,1
 933                             	.L10:
 934                             	.LBE143:
 935                             	.LBE145:
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 936                             		.loc 1 83 94
 937 04b9 62 14                   		add	#1, r4
 938                             	.LVL85:
 939 04bb 06 89 06 24             		add	144[r0], r6
 940 04bf ED 0A 0A                		mov.L	40[r0], r10
 941 04c2 06 89 0A 23             		add	140[r0], r10
 942 04c6 E7 0A 0A                		mov.L	r10, 40[r0]
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     {
 943                             		.loc 1 83 21
 944 04c9 AD 89                   		mov.L	92[r0], r1
 945 04cb 47 41                   		cmp	r4, r1
 946 04cd 21 97                   		bne	.L12
 947                             	.LVL86:
 948 04cf 03                      		.balign 8,3,1
 949                             	.L9:
 950                             	.LBE148:
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 +
 951                             		.loc 1 111 21 is_stmt 1
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 +
 952                             		.loc 1 111 35 is_stmt 0
 953 04d0 EC CA                   		mov.L	[r12], r10
 954                             	.LVL87:
 955                             	.LBB149:
 956                             	.LBB150:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 957                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 958                             		.loc 2 817 5 is_stmt 0
 959 04d2 EC D5                   		mov.L	[r13], r5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 960                             		.loc 2 816 25
 961 04d4 66 04                   		mov.L	#0, r4
 962 04d6 FC 13 A4                		max	r10, r4
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 963                             		.loc 2 816 11
 964 04d9 FD 62 47                		shll	r4, r7
 965                             	.LVL88:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 966                             		.loc 2 817 5 is_stmt 1
 967                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 968 04dc FD 03 75                		emula r7, r5, a0
 969 04df FD 19 00                	racl #1, a0
 970 04e2 FD 1F 07                	mvfachi #0, a0, r7
 971                             	
 972                             	 ; 0 "" 2
 973                             	.LVL89:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 974                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 975                             		.loc 2 823 22 is_stmt 0
 976 04e5 61 0A                   		cmp	#0, r10
 977 04e7 2A 05 38 98 01          		ble	.L84
 978 04ec 66 0A                   		mov.L	#0, r10
 979                             	.LVL90:
 980                             		.balign 8,3,1
 981                             	.L13:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 982                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 983                             		.loc 2 824 8 is_stmt 0
 984 04ee 61 07                   		cmp	#0, r7
 985 04f0 28 05 38 81 01          		blt	.L85
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 986                             		.loc 2 833 9 is_stmt 1
 987                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 988 04f5 FD 60 A7                		shlr r10, r7
 989 04f8 FD 74 27 00             	adc #0, r7
 990                             	
 991                             	 ; 0 "" 2
 992                             	.LVL91:
 993                             		.balign 8,3,1
 994                             	.L15:
 995                             		.loc 2 839 5
 996                             	.LBE150:
 997                             	.LBE149:
 113:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 +
 998                             		.loc 1 113 21
 113:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 +
 999                             		.loc 1 113 35 is_stmt 0
 1000 04fc ED CA 01                		mov.L	4[r12], r10
 1001                             	.LVL92:
 1002                             	.LBB152:
 1003                             	.LBB153:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1004                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1005                             		.loc 2 817 5 is_stmt 0
 1006 04ff ED D4 01                		mov.L	4[r13], r4
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1007                             		.loc 2 816 25
 1008 0502 66 05                   		mov.L	#0, r5
 1009 0504 FC 13 A5                		max	r10, r5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1010                             		.loc 2 816 11
 1011 0507 A9 0A                   		mov.L	20[r0], r2
 1012 0509 FD 62 52                		shll	r5, r2
 1013 050c EF 25                   		mov.L	r2, r5
 1014                             	.LVL93:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1015                             		.loc 2 817 5 is_stmt 1
 1016                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1017 050e FD 03 54                		emula r5, r4, a0
 1018 0511 FD 19 00                	racl #1, a0
 1019 0514 FD 1F 05                	mvfachi #0, a0, r5
 1020                             	
 1021                             	 ; 0 "" 2
 1022                             	.LVL94:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1023                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1024                             		.loc 2 823 22 is_stmt 0
 1025 0517 61 0A                   		cmp	#0, r10
 1026 0519 2A 05 38 79 01          		ble	.L86
 1027 051e 66 0A                   		mov.L	#0, r10
 1028                             	.LVL95:
 1029                             		.balign 8,3,1
 1030                             	.L16:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1031                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1032                             		.loc 2 824 8 is_stmt 0
 1033 0520 61 05                   		cmp	#0, r5
 1034 0522 28 05 38 62 01          		blt	.L87
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 1035                             		.loc 2 833 9 is_stmt 1
 1036                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1037 0527 FD 60 A5                		shlr r10, r5
 1038 052a FD 74 25 00             	adc #0, r5
 1039                             	
 1040                             	 ; 0 "" 2
 1041                             	.LVL96:
 1042                             		.balign 8,3,1
 1043                             	.L18:
 1044                             		.loc 2 839 5
 1045                             	.LBE153:
 1046                             	.LBE152:
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 +
 1047                             		.loc 1 115 21
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 +
 1048                             		.loc 1 115 35 is_stmt 0
 1049 052e ED C4 02                		mov.L	8[r12], r4
 1050                             	.LVL97:
 1051                             	.LBB155:
 1052                             	.LBB156:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1053                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1054                             		.loc 2 817 5 is_stmt 0
 1055 0531 ED D2 02                		mov.L	8[r13], r2
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1056                             		.loc 2 816 25
 1057 0534 66 0A                   		mov.L	#0, r10
 1058                             	.LVL98:
 1059 0536 FC 13 4A                		max	r4, r10
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1060                             		.loc 2 816 11
 1061 0539 A9 8E                   		mov.L	28[r0], r6
 1062 053b FD 62 A6                		shll	r10, r6
 1063 053e EF 6A                   		mov.L	r6, r10
 1064                             	.LVL99:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1065                             		.loc 2 817 5 is_stmt 1
 1066                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1067 0540 FD 03 A2                		emula r10, r2, a0
 1068 0543 FD 19 00                	racl #1, a0
 1069 0546 FD 1F 0A                	mvfachi #0, a0, r10
 1070                             	
 1071                             	 ; 0 "" 2
 1072                             	.LVL100:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1073                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1074                             		.loc 2 823 22 is_stmt 0
 1075 0549 61 04                   		cmp	#0, r4
 1076 054b 2A 05 38 21 01          		ble	.L88
 1077 0550 66 04                   		mov.L	#0, r4
 1078                             	.LVL101:
 1079                             		.balign 8,3,1
 1080                             	.L19:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1081                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1082                             		.loc 2 824 8 is_stmt 0
 1083 0552 61 0A                   		cmp	#0, r10
 1084 0554 28 05 38 0A 01          		blt	.L89
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 1085                             		.loc 2 833 9 is_stmt 1
 1086                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1087 0559 FD 60 4A                		shlr r4, r10
 1088 055c FD 74 2A 00             	adc #0, r10
 1089                             	
 1090                             	 ; 0 "" 2
 1091                             	.LVL102:
 1092                             		.balign 8,3,1
 1093                             	.L21:
 1094                             		.loc 2 839 5
 1095                             	.LBE156:
 1096                             	.LBE155:
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 +
 1097                             		.loc 1 117 21
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                         out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 +
 1098                             		.loc 1 117 35 is_stmt 0
 1099 0560 ED C4 03                		mov.L	12[r12], r4
 1100                             	.LVL103:
 1101                             	.LBB158:
 1102                             	.LBB159:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1103                             		.loc 2 816 5 is_stmt 1
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1104                             		.loc 2 817 5 is_stmt 0
 1105 0563 ED D1 03                		mov.L	12[r13], r1
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1106                             		.loc 2 816 25
 1107 0566 66 02                   		mov.L	#0, r2
 1108 0568 FC 13 42                		max	r4, r2
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 1109                             		.loc 2 816 11
 1110 056b A9 86                   		mov.L	24[r0], r6
 1111 056d FD 62 26                		shll	r2, r6
 1112 0570 EF 62                   		mov.L	r6, r2
 1113                             	.LVL104:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 1114                             		.loc 2 817 5 is_stmt 1
 1115                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1116 0572 FD 03 21                		emula r2, r1, a0
 1117 0575 FD 19 00                	racl #1, a0
 1118 0578 FD 1F 02                	mvfachi #0, a0, r2
 1119                             	
 1120                             	 ; 0 "" 2
 1121                             	.LVL105:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1122                             		.loc 2 823 5
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1123                             		.loc 2 823 22 is_stmt 0
 1124 057b 61 04                   		cmp	#0, r4
 1125 057d 2A 05 38 DC 00          		ble	.L90
 1126 0582 66 04                   		mov.L	#0, r4
 1127                             	.LVL106:
 1128                             		.balign 8,3,1
 1129                             	.L22:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1130                             		.loc 2 824 5 is_stmt 1
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 1131                             		.loc 2 824 8 is_stmt 0
 1132 0584 61 02                   		cmp	#0, r2
 1133 0586 28 05 38 C5 00          		blt	.L91
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 1134                             		.loc 2 833 9 is_stmt 1
 1135                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1136 058b FD 60 42                		shlr r4, r2
 1137 058e FD 74 22 00             	adc #0, r2
 1138                             	
 1139                             	 ; 0 "" 2
 1140                             	.LVL107:
 1141                             		.balign 8,3,1
 1142                             	.L24:
 1143                             		.loc 2 839 5
 1144                             	.LBE159:
 1145                             	.LBE158:
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] += output_offset;
 1146                             		.loc 1 120 21
 121:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] += output_offset;
 1147                             		.loc 1 121 21
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] += output_offset;
 1148                             		.loc 1 122 21
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 1149                             		.loc 1 123 21
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_ma
 1150                             		.loc 1 125 21
 126:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_ma
 1151                             		.loc 1 126 21
 127:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_ma
 1152                             		.loc 1 127 21
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 1153                             		.loc 1 128 21
 130:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[1];
 1154                             		.loc 1 130 21
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] += output_offset;
 1155                             		.loc 1 120 33 is_stmt 0
 1156 0592 06 89 07 0B             		add	44[r0], r7
 1157                             	.LVL108:
 121:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] += output_offset;
 1158                             		.loc 1 121 33
 1159 0596 06 89 05 0B             		add	44[r0], r5
 1160                             	.LVL109:
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] += output_offset;
 1161                             		.loc 1 122 33
 1162 059a 06 89 0A 0B             		add	44[r0], r10
 1163                             	.LVL110:
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 1164                             		.loc 1 123 33
 1165 059e 06 89 02 0B             		add	44[r0], r2
 1166                             	.LVL111:
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_ma
 1167                             		.loc 1 125 35
 1168 05a2 AB 01                   		mov.L	48[r0], r1
 1169 05a4 FC 13 17                		max	r1, r7
 126:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_ma
 1170                             		.loc 1 126 35
 1171 05a7 FC 13 15                		max	r1, r5
 127:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_ma
 1172                             		.loc 1 127 35
 1173 05aa FC 13 1A                		max	r1, r10
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 1174                             		.loc 1 128 35
 1175 05ad FC 13 12                		max	r1, r2
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_ma
 1176                             		.loc 1 125 35
 1177 05b0 FC 17 B7                		min	r11, r7
 1178                             	.LVL112:
 126:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_ma
 1179                             		.loc 1 126 35
 1180 05b3 FC 17 B5                		min	r11, r5
 1181                             	.LVL113:
 127:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_ma
 1182                             		.loc 1 127 35
 1183 05b6 FC 17 BA                		min	r11, r10
 1184                             	.LVL114:
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 1185                             		.loc 1 128 35
 1186 05b9 FC 17 B2                		min	r11, r2
 1187                             	.LVL115:
 130:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[1];
 1188                             		.loc 1 130 41
 1189 05bc C3 37                   		mov.B	r7, [r3]
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[2];
 1190                             		.loc 1 131 21 is_stmt 1
 1191                             	.LVL116:
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[2];
 1192                             		.loc 1 131 41 is_stmt 0
 1193 05be 80 3D                   		mov.B	r5, 1[r3]
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[3];
 1194                             		.loc 1 132 21 is_stmt 1
 1195                             	.LVL117:
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                     output[out_idx++] = (int8_t)out_buff[3];
 1196                             		.loc 1 132 41 is_stmt 0
 1197 05c0 C7 3A 02                		mov.B	r10, 2[r3]
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 1198                             		.loc 1 133 21 is_stmt 1
 1199                             	.LVL118:
 1200 05c3 71 FF 10                		add	#16, r15
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** 
 1201                             		.loc 1 133 41 is_stmt 0
 1202 05c6 80 BA                   		mov.B	r2, 3[r3]
 1203                             	.LVL119:
 1204 05c8 71 DD 10                		add	#16, r13
 1205 05cb 62 43                   		add	#4, r3
 1206                             	.LVL120:
 1207 05cd 71 CC 10                		add	#16, r12
 1208 05d0 AA 0A                   		mov.L	36[r0], r2
 1209                             	.LVL121:
 1210 05d2 62 42                   		add	#4, r2
 1211 05d4 A2 0A                   		mov.L	r2, 36[r0]
 1212                             	.LBE167:
  74:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                 {
 1213                             		.loc 1 74 17
 1214 05d6 ED 04 26                		mov.L	152[r0], r4
 1215                             	.LVL122:
 1216 05d9 47 F4                   		cmp	r15, r4
 1217 05db 3B 65 FE                		bne	.L25
 1218 05de ED 08 2C                		mov.L	176[r0], r8
 1219 05e1 AC 87                   		mov.L	72[r0], r7
 1220                             	.LVL123:
 1221 05e3 62 47                   		add	#4, r7
 1222 05e5 06 89 07 31             		add	196[r0], r7
 1223 05e9 A4 87                   		mov.L	r7, 72[r0]
 1224                             	.LVL124:
 1225                             		.balign 8,3,1
 1226                             	.L27:
 1227                             	.LBE171:
  72:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****             {
 1228                             		.loc 1 72 34
 1229 05eb 06 89 08 22             		add	136[r0], r8
 1230                             	.LVL125:
 1231 05ef AA 05                   		mov.L	32[r0], r5
 1232 05f1 62 15                   		add	#1, r5
 1233 05f3 A2 05                   		mov.L	r5, 32[r0]
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****                  ++in_ch, out_ch += ch_mult)
 1234                             		.loc 1 71 13
 1235 05f5 EC 06                   		mov.L	[r0], r6
 1236 05f7 47 86                   		cmp	r8, r6
 1237 05f9 2B 05 38 05 FE          		bgt	.L8
 1238 05fe ED 08 28                		mov.L	160[r0], r8
 1239                             	.LVL126:
 1240 0601 EF BD                   		mov.L	r11, r13
 1241                             	.LVL127:
 1242                             		.balign 8,3,1
 1243                             	.L7:
 1244                             	.LBE174:
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 1245                             		.loc 1 69 113
 1246 0603 ED 0A 0E                		mov.L	56[r0], r10
 1247 0606 62 1A                   		add	#1, r10
 1248 0608 E7 0A 0E                		mov.L	r10, 56[r0]
 1249                             	.LVL128:
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 1250                             		.loc 1 69 100
 1251 060b ED 0B 0D                		mov.L	52[r0], r11
 1252 060e 06 89 0B 13             		add	76[r0], r11
 1253 0612 E7 0B 0D                		mov.L	r11, 52[r0]
 1254                             	.LVL129:
 1255 0615 AC 89                   		mov.L	76[r0], r1
 1256 0617 43 18                   		sub	r1, r8
 1257 0619 AB 8A                   		mov.L	60[r0], r2
 1258 061b 06 89 02 30             		add	192[r0], r2
 1259 061f A3 8A                   		mov.L	r2, 60[r0]
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****         {
 1260                             		.loc 1 69 9
 1261 0621 AC 03                   		mov.L	64[r0], r3
 1262 0623 47 3A                   		cmp	r3, r10
 1263 0625 3B 95 FD                		bne	.L28
 1264 0628 EF DF                   		mov.L	r13, r15
 1265                             	.LVL130:
 1266                             		.balign 8,3,1
 1267                             	.L5:
 1268                             	.LBE176:
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 1269                             		.loc 1 67 93
 1270 062a AC 0C                   		mov.L	68[r0], r4
 1271 062c 62 14                   		add	#1, r4
 1272 062e A4 0C                   		mov.L	r4, 68[r0]
 1273                             	.LVL131:
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 1274                             		.loc 1 67 80
 1275 0630 A8 8D                   		mov.L	12[r0], r5
 1276 0632 06 89 05 14             		add	80[r0], r5
 1277 0636 A0 8D                   		mov.L	r5, 12[r0]
 1278                             	.LVL132:
 1279 0638 A9 06                   		mov.L	16[r0], r6
 1280 063a AD 07                   		mov.L	80[r0], r7
 1281 063c 43 76                   		sub	r7, r6
 1282 063e A1 06                   		mov.L	r6, 16[r0]
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c ****     {
 1283                             		.loc 1 67 5
 1284 0640 ED 0A 1C                		mov.L	112[r0], r10
 1285 0643 47 A4                   		cmp	r10, r4
 1286 0645 3B 25 FD                		bne	.L29
 1287                             	.LBE133:
 1288                             	.LBE132:
 300:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_depthwise_conv_s8.c **** }
 1289                             		.loc 1 300 5 is_stmt 1
 1290                             		.loc 1 301 1 is_stmt 0
 1291 0648 66 01                   		mov.L	#0, r1
 1292 064a 3F 6D 45                		rtsd	#276, r6-r13
 1293                             	.LVL133:
 1294                             	.L91:
 1295                             	.LBB179:
 1296                             	.LBB178:
 1297                             	.LBB177:
 1298                             	.LBB175:
 1299                             	.LBB172:
 1300                             	.LBB168:
 1301                             	.LBB161:
 1302                             	.LBB160:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1303                             		.loc 2 825 9 is_stmt 1
 1304                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1305 064d 7E 12                   		neg r2
 1306 064f FD 60 42                	shlr r4, r2
 1307 0652 FD 74 22 00             	adc #0, r2
 1308 0656 7E 12                   	neg r2
 1309                             	
 1310                             	 ; 0 "" 2
 1311                             	.LVL134:
 1312 0658 38 3A FF                		bra	.L24
 1313                             	.LVL135:
 1314                             	.L90:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1315                             		.loc 2 823 22 is_stmt 0
 1316 065b 7E 14                   		neg	r4
 1317                             	.LVL136:
 1318 065d 38 27 FF                		bra	.L22
 1319                             	.LVL137:
 1320                             	.L89:
 1321                             	.LBE160:
 1322                             	.LBE161:
 1323                             	.LBB162:
 1324                             	.LBB157:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1325                             		.loc 2 825 9 is_stmt 1
 1326                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1327 0660 7E 1A                   		neg r10
 1328 0662 FD 60 4A                	shlr r4, r10
 1329 0665 FD 74 2A 00             	adc #0, r10
 1330 0669 7E 1A                   	neg r10
 1331                             	
 1332                             	 ; 0 "" 2
 1333                             	.LVL138:
 1334 066b 38 F5 FE                		bra	.L21
 1335                             	.LVL139:
 1336                             	.L88:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1337                             		.loc 2 823 22 is_stmt 0
 1338 066e 7E 14                   		neg	r4
 1339                             	.LVL140:
 1340 0670 38 E2 FE                		bra	.L19
 1341                             	.LVL141:
 1342                             	.L85:
 1343                             	.LBE157:
 1344                             	.LBE162:
 1345                             	.LBB163:
 1346                             	.LBB151:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1347                             		.loc 2 825 9 is_stmt 1
 1348                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1349 0673 7E 17                   		neg r7
 1350 0675 FD 60 A7                	shlr r10, r7
 1351 0678 FD 74 27 00             	adc #0, r7
 1352 067c 7E 17                   	neg r7
 1353                             	
 1354                             	 ; 0 "" 2
 1355                             	.LVL142:
 1356 067e 38 7E FE                		bra	.L15
 1357                             	.LVL143:
 1358                             	.L84:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1359                             		.loc 2 823 22 is_stmt 0
 1360 0681 7E 1A                   		neg	r10
 1361                             	.LVL144:
 1362 0683 38 6B FE                		bra	.L13
 1363                             	.LVL145:
 1364                             	.L87:
 1365                             	.LBE151:
 1366                             	.LBE163:
 1367                             	.LBB164:
 1368                             	.LBB154:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 1369                             		.loc 2 825 9 is_stmt 1
 1370                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 1371 0686 7E 15                   		neg r5
 1372 0688 FD 60 A5                	shlr r10, r5
 1373 068b FD 74 25 00             	adc #0, r5
 1374 068f 7E 15                   	neg r5
 1375                             	
 1376                             	 ; 0 "" 2
 1377                             	.LVL146:
 1378 0691 38 9D FE                		bra	.L18
 1379                             	.LVL147:
 1380                             	.L86:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 1381                             		.loc 2 823 22 is_stmt 0
 1382 0694 7E 1A                   		neg	r10
 1383                             	.LVL148:
 1384 0696 38 8A FE                		bra	.L16
 1385                             	.LBE154:
 1386                             	.LBE164:
 1387                             	.LBE168:
 1388                             	.LBE172:
 1389                             	.LBE175:
 1390                             	.LBE177:
 1391                             	.LBE178:
 1392                             	.LBE179:
 1393                             	.LFE84:
 1445                             	.Letext0:
 1446                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 1447                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 1448                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 1449                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 1450                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 1451                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 1452                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 1453                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 1454                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 1455                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
