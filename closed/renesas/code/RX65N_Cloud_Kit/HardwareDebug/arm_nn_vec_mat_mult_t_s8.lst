   1                             		.file	"arm_nn_vec_mat_mult_t_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_nn_vec_mat_mult_t_s8,"ax",@progbits
   5                             		.global	_arm_nn_vec_mat_mult_t_s8
   7                             	_arm_nn_vec_mat_mult_t_s8:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c"
   1:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** /*
   2:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Copyright (C) 2020-2021 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
   4:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
   6:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
  10:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
  12:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  */
  18:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  19:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Title:        arm_nn_vec_mat_mult_t_s8
  22:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Description:  s8 vector by matrix (transposed) multiplication
  23:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
  24:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * $Date:        02. May 2021
  25:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * $Revision:    V.2.5.0
  26:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
  27:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Target Processor:  Cortex-M
  28:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
  29:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * -------------------------------------------------------------------- */
  30:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  31:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** #include "arm_nnsupportfunctions.h"
  32:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  33:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** /**
  34:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * @ingroup groupSupport
  35:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  */
  36:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  37:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** /**
  38:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * @addtogroup NNBasicMath
  39:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * @{
  40:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  */
  41:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  42:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** /*
  43:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * s8 vector(lhs) by matrix (transposed) multiplication
  44:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
  45:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  * Refer header file for details.
  46:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  *
  47:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****  */
  48:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
  49:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const q7_t *rhs,
  50:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const q31_t *bias,
  51:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     q7_t *dst,
  52:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t lhs_offset,
  53:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t rhs_offset,
  54:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t dst_offset,
  55:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t dst_multiplier,
  56:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t dst_shift,
  57:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t rhs_cols,
  58:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t rhs_rows,
  59:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t activation_min,
  60:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****                                     const int32_t activation_max)
  61:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** {
  10                             		.loc 1 61 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 71 00 94                		add	#-108, r0
  15                             	.LCFI1:
  16                             		.loc 1 61 1 is_stmt 0
  17 0005 75 47 90                		mov.L	#0x90, r7
  18 0008 4B 07                   		add	r0, r7
  19 000a A2 09                   		mov.L	r1, 36[r0]
  20 000c E5 70 06 0D             		mov.L	24[r7], 52[r0]
  21 0010 E3 02                   		mov.L	r2, [r0]
  62:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     (void)rhs_offset;
  63:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** #if defined(ARM_MATH_MVEI)
  64:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     int32_t row_loop_cnt = rhs_rows / 3;
  65:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  66:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     for (int i_row_loop_cnt = 0; i_row_loop_cnt < row_loop_cnt; i_row_loop_cnt++)
  67:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
  68:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t acc_0 = 0;
  69:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t acc_1 = 0;
  70:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t acc_2 = 0;
  71:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  72:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int32_t col_loop_cnt = (rhs_cols + 15) / 16;
  73:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  74:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *lhs_vec = lhs;
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *rhs_0 = rhs;
  76:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *rhs_1 = rhs + rhs_cols;
  77:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *rhs_2 = rhs + 2 * rhs_cols;
  78:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  79:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t rhs_sum_0 = 0;
  80:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t rhs_sum_1 = 0;
  81:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t rhs_sum_2 = 0;
  82:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  83:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         uint32_t col_cnt = (uint32_t)rhs_cols;
  84:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  85:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int i = 0; i < col_loop_cnt; i++)
  86:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
  87:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             mve_pred16_t p = vctp8q(col_cnt);
  88:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             col_cnt -= 16;
  89:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  90:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int8x16_t input = vldrbq_z_s8(lhs_vec, p);
  91:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  92:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int8x16_t ker_0 = vldrbq_z_s8(rhs_0, p);
  93:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_sum_0 = vaddvaq_p_s8(rhs_sum_0, ker_0, p);
  94:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = vmladavaq_p_s8(acc_0, ker_0, input, p);
  95:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  96:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int8x16_t ker_1 = vldrbq_z_s8(rhs_1, p);
  97:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_sum_1 = vaddvaq_p_s8(rhs_sum_1, ker_1, p);
  98:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_1 = vmladavaq_p_s8(acc_1, ker_1, input, p);
  99:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 100:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int8x16_t ker_2 = vldrbq_z_s8(rhs_2, p);
 101:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_sum_2 = vaddvaq_p_s8(rhs_sum_2, ker_2, p);
 102:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_2 = vmladavaq_p_s8(acc_2, ker_2, input, p);
 103:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 104:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             lhs_vec += 16;
 105:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_0 += 16;
 106:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_1 += 16;
 107:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_2 += 16;
 108:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 109:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         rhs += 3 * rhs_cols;
 110:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 111:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32x4_t acc = {acc_0, acc_1, acc_2, 0};
 112:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         mve_pred16_t p = vctp32q(3);
 113:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 114:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 115:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32x4_t b = vldrwq_z_s32(bias, p);
 116:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc = vaddq_m_s32(vuninitializedq_s32(), acc, b, p);
 117:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             bias += 3;
 118:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 119:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int32x4_t rhs_sum = {rhs_sum_0, rhs_sum_1, rhs_sum_2, 0};
 120:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc += vdupq_n_s32(lhs_offset) * rhs_sum;
 121:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 122:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc = arm_requantize_mve(acc, dst_multiplier, dst_shift);
 123:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc = vaddq_s32(acc, vdupq_n_s32(dst_offset));
 124:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc = vmaxq_s32(acc, vdupq_n_s32(activation_min));
 125:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc = vminq_s32(acc, vdupq_n_s32(activation_max));
 126:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         vstrbq_p_s32(dst, acc, p);
 127:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         dst += 3;
 128:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     }
 129:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 130:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     const int loop_cnt = rhs_rows % 3;
 131:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     for (int i_row_loop_cnt = 0; i_row_loop_cnt < loop_cnt; i_row_loop_cnt++)
 132:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 133:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t acc_0 = 0;
 134:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int32_t col_loop_cnt = (rhs_cols + 15) / 16;
 135:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *lhs_vec = lhs;
 136:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *rhs_0 = rhs;
 137:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t rhs_sum_0 = 0;
 138:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         uint32_t col_cnt = (uint32_t)rhs_cols;
 139:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 140:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int i = 0; i < col_loop_cnt; i++)
 141:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 142:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             mve_pred16_t p = vctp8q(col_cnt);
 143:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             col_cnt -= 16;
 144:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int8x16_t input = vldrbq_z_s8(lhs_vec, p);
 145:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 146:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int8x16_t ker_0 = vldrbq_z_s8(rhs_0, p);
 147:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_sum_0 = vaddvaq_p_s8(rhs_sum_0, ker_0, p);
 148:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = vmladavaq_p_s8(acc_0, ker_0, input, p);
 149:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 150:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             lhs_vec += 16;
 151:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_0 += 16;
 152:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 153:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         rhs += rhs_cols;
 154:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 155:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 156:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 157:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 += *bias;
 158:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             bias++;
 159:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 160:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int32_t offsets = rhs_sum_0 * lhs_offset;
 161:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 += offsets;
 162:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 163:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 += dst_offset;
 164:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 165:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Clamp the result
 166:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = MAX(acc_0, activation_min);
 167:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst = MIN(acc_0, activation_max);
 168:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         dst++;
 169:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     }
 170:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 171:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** #elif defined(ARM_MATH_DSP)
 172:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     int32_t row_loop_cnt = rhs_rows / 2;
 173:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 174:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     const int16_t lhs_offset_s16 = (int16_t)lhs_offset;
 175:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 176:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 177:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 178:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     for (int32_t i = 0; i < row_loop_cnt; i++)
 179:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 180:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t acc_0 = 0;
 181:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t acc_1 = 0;
 182:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 183:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 184:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = *bias++;
 185:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_1 = *bias++;
 186:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 187:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 188:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int32_t col_loop_cnt = rhs_cols / 4;
 189:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 190:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *lhs_vec = lhs;
 191:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *rhs_0 = rhs;
 192:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *rhs_1 = rhs + rhs_cols;
 193:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         rhs += 2 * rhs_cols;
 194:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 195:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int j = col_loop_cnt; j != 0; j--)
 196:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 197:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t vec_0 = arm_nn_read_q7x4_ia(&lhs_vec);
 198:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t vec_1 = __SXTAB16_RORn(lhs_offset_s16x2, (uint32_t)vec_0, 8);
 199:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 200:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             vec_0 = __SXTAB16(lhs_offset_s16x2, vec_0);
 201:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 202:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t ker_0 = arm_nn_read_q7x4_ia(&rhs_0);
 203:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t ker_1 = __SXTB16_RORn((uint32_t)ker_0, 8);
 204:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ker_0 = __SXTB16(ker_0);
 205:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 206:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = __SMLAD(ker_1, vec_1, acc_0);
 207:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = __SMLAD(ker_0, vec_0, acc_0);
 208:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 209:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ker_0 = arm_nn_read_q7x4_ia(&rhs_1);
 210:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ker_1 = __SXTB16_RORn((uint32_t)ker_0, 8);
 211:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ker_0 = __SXTB16(ker_0);
 212:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 213:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_1 = __SMLAD(ker_1, vec_1, acc_1);
 214:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_1 = __SMLAD(ker_0, vec_0, acc_1);
 215:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 216:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 217:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 218:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 219:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 220:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             lhs_vec++;
 221:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 += lhs_temp * (*rhs_0);
 222:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_0++;
 223:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_1 += lhs_temp * (*rhs_1);
 224:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_1++;
 225:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 226:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 227:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 228:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_1 = arm_nn_requantize(acc_1, dst_multiplier, dst_shift);
 229:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 230:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Add offset
 231:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 += dst_offset;
 232:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_1 += dst_offset;
 233:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Clamp the result
 234:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = MAX(acc_0, activation_min);
 235:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = MIN(acc_0, activation_max);
 236:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_1 = MAX(acc_1, activation_min);
 237:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_1 = MIN(acc_1, activation_max);
 238:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 239:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)acc_0;
 240:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)acc_1;
 241:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     }
 242:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 243:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     if (rhs_rows & 0x1)
 244:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 245:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         int32_t acc_0 = 0;
 246:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 247:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 248:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = *bias++;
 249:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 250:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int32_t col_loop_cnt = rhs_cols / 4;
 251:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 252:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *lhs_vec = lhs;
 253:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const int8_t *rhs_0 = rhs;
 254:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 255:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int i = col_loop_cnt; i != 0; i--)
 256:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 257:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t vec_0 = arm_nn_read_q7x4_ia(&lhs_vec);
 258:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t vec_1 = __SXTAB16_RORn(lhs_offset_s16x2, (uint32_t)vec_0, 8);
 259:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             vec_0 = __SXTAB16(lhs_offset_s16x2, vec_0);
 260:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 261:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t ker_0 = arm_nn_read_q7x4_ia(&rhs_0);
 262:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             int32_t ker_1 = __SXTB16_RORn((uint32_t)ker_0, 8);
 263:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ker_0 = __SXTB16(ker_0);
 264:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 265:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = __SMLAD(ker_1, vec_1, acc_0);
 266:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 = __SMLAD(ker_0, vec_0, acc_0);
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 268:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 269:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 270:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 271:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 272:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             lhs_vec++;
 273:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             acc_0 += lhs_temp * (*rhs_0);
 274:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             rhs_0++;
 275:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 276:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 277:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 278:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 279:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Add offset
 280:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 += dst_offset;
 281:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Clamp the result
 282:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = MAX(acc_0, activation_min);
 283:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         acc_0 = MIN(acc_0, activation_max);
 284:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 285:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)acc_0;
 286:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     }
 287:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 288:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** #else
 289:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 290:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     int32_t row_loop_cnt = rhs_rows / 3;
  22                             		.loc 1 290 13
  23 0012 ED 0A 0D                		mov.L	52[r0], r10
  24 0015 FD 70 6A 56 55 55 55    		emul	#0x55555556, r10
  25 001c E7 0A 0F                		mov.L	r10, 60[r0]
  26 001f E7 0B 10                		mov.L	r11, 64[r0]
  27 0022 EF B5                   		mov.L	r11, r5
  28 0024 ED 0A 0D                		mov.L	52[r0], r10
  29 0027 6B FA                   		shar	#31, r10
  61:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     (void)rhs_offset;
  30                             		.loc 1 61 1
  31 0029 EC 79                   		mov.L	[r7], r9
  32 002b E5 70 01 11             		mov.L	4[r7], 68[r0]
  33 002f E5 70 02 01             		mov.L	8[r7], 4[r0]
  34 0033 E5 70 03 02             		mov.L	12[r7], 8[r0]
  62:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     (void)rhs_offset;
  35                             		.loc 1 62 5 is_stmt 1
  36                             		.loc 1 290 5
  61:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     (void)rhs_offset;
  37                             		.loc 1 61 1 is_stmt 0
  38 0037 E5 70 04 0E             		mov.L	16[r7], 56[r0]
  39 003b E5 70 05 08             		mov.L	20[r7], 32[r0]
  40 003f E5 70 07 03             		mov.L	28[r7], 12[r0]
  41 0043 E5 70 08 04             		mov.L	32[r7], 16[r0]
  42                             		.loc 1 290 13
  43 0047 43 A5                   		sub	r10, r5
  44 0049 A2 85                   		mov.L	r5, 40[r0]
  45                             	.LVL1:
 291:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     for (int i_row_loop_cnt = 0; i_row_loop_cnt < row_loop_cnt; i_row_loop_cnt++)
  46                             		.loc 1 292 5 is_stmt 1
  47                             	.LBB18:
  48                             		.loc 1 292 10
  49                             		.loc 1 292 5 is_stmt 0
  50 004b ED 0B 0D                		mov.L	52[r0], r11
  51 004e 61 2B                   		cmp	#2, r11
  52 0050 2A 05 38 22 01          		ble	.L2
  53 0055 EF 18                   		mov.L	r1, r8
  54                             	.LBB19:
  55                             	.LBB20:
  56                             	.LBB21:
  57                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
  58                             		.loc 2 823 22
  59 0057 ED 0D 0E                		mov.L	56[r0], r13
  60 005a 7E 1D                   		neg	r13
  61                             	.LBE21:
  62                             	.LBE20:
 293:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 294:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *lhs_ptr = lhs;
 295:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr_0 = &rhs[0];
 296:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr_1 = &rhs[rhs_cols];
 297:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr_2 = &rhs[rhs_cols * 2];
  63                             		.loc 1 297 47
  64 005c AA 01                   		mov.L	32[r0], r1
  65                             	.LVL2:
  66 005e 4B 11                   		add	r1, r1
  67 0060 A3 01                   		mov.L	r1, 48[r0]
  68 0062 AB 87                   		mov.L	56[r0], r7
  69 0064 61 07                   		cmp	#0, r7
  70 0066 2B 04                   		ble 1f
  71 0068 66 0D                   		mov #0, r13
  72                             	1:
  73 006a E7 0D 05                		mov.L	r13, 20[r0]
  74 006d FD 74 47 00             		max	#0, r7
  75 0071 A1 8F                   		mov.L	r7, 28[r0]
 298:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 299:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res00 = 0;
 300:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res01 = 0;
 301:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res02 = 0;
 302:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 303:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 304:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res00 = *bias++;
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res01 = *bias++;
 306:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res02 = *bias++;
 307:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 308:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 309:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 310:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t rhs_value0 = (int8_t)*rhs_ptr_0;
 311:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t rhs_value1 = (int8_t)*rhs_ptr_1;
 312:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t rhs_value2 = (int8_t)*rhs_ptr_2;
 313:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t lhs_value = (int8_t)*lhs_ptr + lhs_offset;
 314:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res00 += lhs_value * rhs_value0;
 316:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res01 += lhs_value * rhs_value1;
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res02 += lhs_value * rhs_value2;
 318:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 319:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++rhs_ptr_0;
 320:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++rhs_ptr_1;
 321:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++rhs_ptr_2;
 322:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++lhs_ptr;
 323:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 324:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Quantize down
 325:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 326:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 327:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = arm_nn_requantize(res02, dst_multiplier, dst_shift);
 328:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 329:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Add offset
 330:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 += dst_offset;
 331:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 += dst_offset;
 332:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 += dst_offset;
 333:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 334:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Clamp the result
 335:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MAX(res00, activation_min);
 336:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MIN(res00, activation_max);
 337:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = MAX(res01, activation_min);
 338:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = MIN(res01, activation_max);
 339:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = MAX(res02, activation_min);
 340:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = MIN(res02, activation_max);
 341:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 342:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res00;
 343:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res01;
 344:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res02;
 345:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 346:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         rhs += 3 * rhs_cols;
  76                             		.loc 1 346 18
  77 0073 ED 0B 08                		mov.L	32[r0], r11
  78 0076 63 3B                   		mul	#3, r11
  79 0078 E7 0B 0B                		mov.L	r11, 44[r0]
  80 007b EF 4D                   		mov.L	r4, r13
  81                             	.LBE19:
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
  82                             		.loc 1 292 14
  83 007d 3E 06 00                		mov.L	#0, 24[r0]
  84 0080 06 89 08 08             		add	32[r0], r8
  85                             	.LVL3:
  86                             		.balign 8,3,1
  87                             	.L12:
  88                             	.LBB37:
 294:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr_0 = &rhs[0];
  89                             		.loc 1 294 9 is_stmt 1
 295:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr_1 = &rhs[rhs_cols];
  90                             		.loc 1 295 9
 296:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr_2 = &rhs[rhs_cols * 2];
  91                             		.loc 1 296 9
 297:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
  92                             		.loc 1 297 9
 299:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res01 = 0;
  93                             		.loc 1 299 9
 300:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res02 = 0;
  94                             		.loc 1 300 9
 301:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
  95                             		.loc 1 301 9
 302:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
  96                             		.loc 1 302 9
 302:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
  97                             		.loc 1 302 12 is_stmt 0
  98 0084 61 03                   		cmp	#0, r3
  99 0086 3A C5 01                		beq	.L21
 304:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res01 = *bias++;
 100                             		.loc 1 304 13 is_stmt 1
 101                             	.LVL4:
 304:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res01 = *bias++;
 102                             		.loc 1 304 19 is_stmt 0
 103 0089 EC 36                   		mov.L	[r3], r6
 104                             	.LVL5:
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res02 = *bias++;
 105                             		.loc 1 305 13 is_stmt 1
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res02 = *bias++;
 106                             		.loc 1 305 19 is_stmt 0
 107 008b A8 39                   		mov.L	4[r3], r1
 108                             	.LVL6:
 306:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 109                             		.loc 1 306 13 is_stmt 1
 306:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 110                             		.loc 1 306 19 is_stmt 0
 111 008d A8 B2                   		mov.L	8[r3], r2
 112                             	.LVL7:
 306:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 113                             		.loc 1 306 26
 114 008f 62 C3                   		add	#12, r3
 115                             	.LVL8:
 116                             		.balign 8,3,1
 117                             	.L3:
 308:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 118                             		.loc 1 308 9 is_stmt 1
 119                             	.LBB24:
 308:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 120                             		.loc 1 308 14
 308:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 121                             		.loc 1 308 9 is_stmt 0
 122 0091 AA 07                   		mov.L	32[r0], r7
 123 0093 61 07                   		cmp	#0, r7
 124 0095 2B 31                   		ble	.L4
 125 0097 EC 0F                   		mov.L	[r0], r15
 126 0099 EF FE                   		mov.L	r15, r14
 127 009b 4B 7E                   		add	r7, r14
 128 009d EF FC                   		mov.L	r15, r12
 129 009f 06 89 0C 0C             		add	48[r0], r12
 130                             	.LBE24:
 294:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr_0 = &rhs[0];
 131                             		.loc 1 294 21
 132 00a3 ED 0B 09                		mov.L	36[r0], r11
 133                             	.LVL9:
 134 00a6 EF 00                   		.balign 8,3,5
 135                             	.L5:
 136                             	.LBB26:
 137                             	.LBB25:
 310:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t rhs_value1 = (int8_t)*rhs_ptr_1;
 138                             		.loc 1 310 13 is_stmt 1 discriminator 3
 311:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t rhs_value2 = (int8_t)*rhs_ptr_2;
 139                             		.loc 1 311 13 discriminator 3
 312:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t lhs_value = (int8_t)*lhs_ptr + lhs_offset;
 140                             		.loc 1 312 13 discriminator 3
 313:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 141                             		.loc 1 313 13 discriminator 3
 313:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 142                             		.loc 1 313 37 is_stmt 0 discriminator 3
 143 00a8 FD 28 B7                		mov.B	[r11+], r7
 144                             	.LVL10:
 310:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t rhs_value1 = (int8_t)*rhs_ptr_1;
 145                             		.loc 1 310 25 discriminator 3
 146 00ab FD 28 F5                		mov.B	[r15+], r5
 147                             	.LVL11:
 311:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t rhs_value2 = (int8_t)*rhs_ptr_2;
 148                             		.loc 1 311 25 discriminator 3
 149 00ae FD 28 EA                		mov.B	[r14+], r10
 150                             	.LVL12:
 313:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 151                             		.loc 1 313 25 discriminator 3
 152 00b1 4B 97                   		add	r9, r7
 153                             	.LVL13:
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res01 += lhs_value * rhs_value1;
 154                             		.loc 1 315 13 is_stmt 1 discriminator 3
 312:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             const q31_t lhs_value = (int8_t)*lhs_ptr + lhs_offset;
 155                             		.loc 1 312 25 is_stmt 0 discriminator 3
 156 00b3 FD 28 C4                		mov.B	[r12+], r4
 157                             	.LVL14:
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res01 += lhs_value * rhs_value1;
 158                             		.loc 1 315 32 discriminator 3
 159 00b6 4F 75                   		mul	r7, r5
 160                             	.LVL15:
 316:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res02 += lhs_value * rhs_value2;
 161                             		.loc 1 316 32 discriminator 3
 162 00b8 4F 7A                   		mul	r7, r10
 163                             	.LVL16:
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 164                             		.loc 1 317 32 discriminator 3
 165 00ba 4F 47                   		mul	r4, r7
 166                             	.LVL17:
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res01 += lhs_value * rhs_value1;
 167                             		.loc 1 315 19 discriminator 3
 168 00bc 4B 56                   		add	r5, r6
 169                             	.LVL18:
 316:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res02 += lhs_value * rhs_value2;
 170                             		.loc 1 316 13 is_stmt 1 discriminator 3
 316:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res02 += lhs_value * rhs_value2;
 171                             		.loc 1 316 19 is_stmt 0 discriminator 3
 172 00be 4B A1                   		add	r10, r1
 173                             	.LVL19:
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 174                             		.loc 1 317 13 is_stmt 1 discriminator 3
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 175                             		.loc 1 317 19 is_stmt 0 discriminator 3
 176 00c0 4B 72                   		add	r7, r2
 177                             	.LVL20:
 319:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++rhs_ptr_1;
 178                             		.loc 1 319 13 is_stmt 1 discriminator 3
 320:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++rhs_ptr_2;
 179                             		.loc 1 320 13 discriminator 3
 321:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++lhs_ptr;
 180                             		.loc 1 321 13 discriminator 3
 322:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 181                             		.loc 1 322 13 discriminator 3
 182                             	.LBE25:
 308:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 183                             		.loc 1 308 9 is_stmt 0 discriminator 3
 184 00c2 47 8B                   		cmp	r8, r11
 185 00c4 21 E4                   		bne	.L5
 186                             	.LVL21:
 187                             		.balign 8,3,1
 188                             	.L4:
 189                             	.LBE26:
 325:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 190                             		.loc 1 325 9 is_stmt 1
 191                             	.LBB27:
 192                             	.LBB22:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 193                             		.loc 2 816 5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 194                             		.loc 2 816 11 is_stmt 0
 195 00c6 ED 0A 07                		mov.L	28[r0], r10
 196 00c9 FD 62 A6                		shll	r10, r6
 197                             	.LVL22:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 198                             		.loc 2 817 5 is_stmt 1
 199 00cc ED 0B 02                		mov.L	8[r0], r11
 200                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 201 00cf FD 03 6B                		emula r6, r11, a0
 202 00d2 FD 19 00                	racl #1, a0
 203 00d5 FD 1F 06                	mvfachi #0, a0, r6
 204                             	
 205                             	 ; 0 "" 2
 206                             	.LVL23:
 207                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 208                             		.loc 2 824 5
 209                             		.loc 2 824 8 is_stmt 0
 210 00d8 61 06                   		cmp	#0, r6
 211 00da 28 05 38 5D 01          		blt	.L30
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 212                             		.loc 2 833 9 is_stmt 1
 213 00df ED 0A 05                		mov.L	20[r0], r10
 214                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 215 00e2 FD 60 A6                		shlr r10, r6
 216 00e5 FD 74 26 00             	adc #0, r6
 217                             	
 218                             	 ; 0 "" 2
 219                             	.LVL24:
 220 00e9 EF B7                   		mov.L	r11, r7
 221                             		.balign 8,3,1
 222                             	.L7:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 223                             		.loc 2 839 5
 224                             	.LVL25:
 225                             	.LBE22:
 226                             	.LBE27:
 326:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = arm_nn_requantize(res02, dst_multiplier, dst_shift);
 227                             		.loc 1 326 9
 228                             	.LBB28:
 229                             	.LBB29:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 230                             		.loc 2 816 5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 231                             		.loc 2 816 11 is_stmt 0
 232 00eb ED 0B 07                		mov.L	28[r0], r11
 233 00ee FD 62 B1                		shll	r11, r1
 234                             	.LVL26:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 235                             		.loc 2 817 5 is_stmt 1
 236                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 237 00f1 FD 03 17                		emula r1, r7, a0
 238 00f4 FD 19 00                	racl #1, a0
 239 00f7 FD 1F 01                	mvfachi #0, a0, r1
 240                             	
 241                             	 ; 0 "" 2
 242                             	.LVL27:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 243                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 244                             		.loc 2 824 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 245                             		.loc 2 824 8 is_stmt 0
 246 00fa 61 01                   		cmp	#0, r1
 247 00fc 28 05 38 28 01          		blt	.L31
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 248                             		.loc 2 833 9 is_stmt 1
 249 0101 ED 0B 05                		mov.L	20[r0], r11
 250                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 251 0104 FD 60 B1                		shlr r11, r1
 252 0107 FD 74 21 00             	adc #0, r1
 253                             	
 254                             	 ; 0 "" 2
 255                             	.LVL28:
 256 010b EF 7A                   		mov.L	r7, r10
 257                             		.balign 8,3,1
 258                             	.L9:
 259                             		.loc 2 839 5
 260                             	.LVL29:
 261                             	.LBE29:
 262                             	.LBE28:
 327:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 263                             		.loc 1 327 9
 264                             	.LBB31:
 265                             	.LBB32:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 266                             		.loc 2 816 5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 267                             		.loc 2 816 11 is_stmt 0
 268 010d A9 8F                   		mov.L	28[r0], r7
 269 010f FD 62 72                		shll	r7, r2
 270                             	.LVL30:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 271                             		.loc 2 817 5 is_stmt 1
 272                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 273 0112 FD 03 2A                		emula r2, r10, a0
 274 0115 FD 19 00                	racl #1, a0
 275 0118 FD 1F 02                	mvfachi #0, a0, r2
 276                             	
 277                             	 ; 0 "" 2
 278                             	.LVL31:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 279                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 280                             		.loc 2 824 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 281                             		.loc 2 824 8 is_stmt 0
 282 011b 61 02                   		cmp	#0, r2
 283 011d 28 05 38 F6 00          		blt	.L32
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 284                             		.loc 2 833 9 is_stmt 1
 285 0122 A9 0F                   		mov.L	20[r0], r7
 286                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 287 0124 FD 60 72                		shlr r7, r2
 288 0127 FD 74 22 00             	adc #0, r2
 289                             	
 290                             	 ; 0 "" 2
 291                             	.LVL32:
 292                             		.balign 8,3,1
 293                             	.L11:
 294                             		.loc 2 839 5
 295                             	.LBE32:
 296                             	.LBE31:
 330:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 += dst_offset;
 297                             		.loc 1 330 9
 330:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 += dst_offset;
 298                             		.loc 1 330 15 is_stmt 0
 299 012b 06 89 06 01             		add	4[r0], r6
 300                             	.LVL33:
 331:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 += dst_offset;
 301                             		.loc 1 331 9 is_stmt 1
 331:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 += dst_offset;
 302                             		.loc 1 331 15 is_stmt 0
 303 012f 06 89 01 01             		add	4[r0], r1
 304                             	.LVL34:
 332:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 305                             		.loc 1 332 9 is_stmt 1
 335:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MIN(res00, activation_max);
 306                             		.loc 1 335 15 is_stmt 0
 307 0133 ED 0A 03                		mov.L	12[r0], r10
 308 0136 FC 13 A6                		max	r10, r6
 309                             	.LVL35:
 332:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 310                             		.loc 1 332 15
 311 0139 06 89 02 01             		add	4[r0], r2
 312                             	.LVL36:
 335:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MIN(res00, activation_max);
 313                             		.loc 1 335 9 is_stmt 1
 336:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = MAX(res01, activation_min);
 314                             		.loc 1 336 9
 337:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = MIN(res01, activation_max);
 315                             		.loc 1 337 9
 337:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = MIN(res01, activation_max);
 316                             		.loc 1 337 15 is_stmt 0
 317 013d FC 13 A1                		max	r10, r1
 318                             	.LVL37:
 338:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = MAX(res02, activation_min);
 319                             		.loc 1 338 9 is_stmt 1
 339:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = MIN(res02, activation_max);
 320                             		.loc 1 339 9
 339:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = MIN(res02, activation_max);
 321                             		.loc 1 339 15 is_stmt 0
 322 0140 FC 13 A2                		max	r10, r2
 323                             	.LVL38:
 340:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 324                             		.loc 1 340 9 is_stmt 1
 342:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res01;
 325                             		.loc 1 342 9
 336:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res01 = MAX(res01, activation_min);
 326                             		.loc 1 336 15 is_stmt 0
 327 0143 ED 0B 04                		mov.L	16[r0], r11
 328 0146 FC 17 B6                		min	r11, r6
 329                             	.LVL39:
 338:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res02 = MAX(res02, activation_min);
 330                             		.loc 1 338 15
 331 0149 FC 17 B1                		min	r11, r1
 332                             	.LVL40:
 333 014c EF D7                   		mov.L	r13, r7
 342:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res01;
 334                             		.loc 1 342 18
 335 014e C3 D6                   		mov.B	r6, [r13]
 343:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res02;
 336                             		.loc 1 343 9 is_stmt 1
 337                             	.LVL41:
 343:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res02;
 338                             		.loc 1 343 18 is_stmt 0
 339 0150 C7 D1 01                		mov.B	r1, 1[r13]
 344:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 340                             		.loc 1 344 9 is_stmt 1
 340:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 341                             		.loc 1 340 15 is_stmt 0
 342 0153 FC 17 B2                		min	r11, r2
 343                             	.LVL42:
 344 0156 62 3D                   		add	#3, r13
 345                             	.LVL43:
 346                             	.LBE37:
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 347                             		.loc 1 292 79
 348 0158 A9 81                   		mov.L	24[r0], r1
 349                             	.LVL44:
 350 015a 62 11                   		add	#1, r1
 351 015c A1 81                   		mov.L	r1, 24[r0]
 352                             	.LVL45:
 353                             	.LBB38:
 344:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 354                             		.loc 1 344 18
 355 015e 80 F2                   		mov.B	r2, 2[r7]
 356 0160 EF D4                   		mov.L	r13, r4
 357                             	.LVL46:
 358                             		.loc 1 346 9 is_stmt 1
 359                             		.loc 1 346 13 is_stmt 0
 360 0162 EC 07                   		mov.L	[r0], r7
 361 0164 06 89 07 0B             		add	44[r0], r7
 362 0168 E3 07                   		mov.L	r7, [r0]
 363                             	.LVL47:
 364                             	.LBE38:
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 365                             		.loc 1 292 5
 366 016a ED 0A 0A                		mov.L	40[r0], r10
 367 016d 47 1A                   		cmp	r1, r10
 368 016f 2B 05 38 13 FF          		bgt	.L12
 369                             	.LVL48:
 370                             		.balign 8,3,1
 371                             	.L2:
 372                             	.LBE18:
 347:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     }
 348:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 349:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     const int loop_cnt = rhs_rows % 3;
 373                             		.loc 1 349 5 is_stmt 1
 374                             		.loc 1 349 15 is_stmt 0
 375 0174 ED 0A 10                		mov.L	64[r0], r10
 376 0177 AB 0F                   		mov.L	52[r0], r7
 377 0179 6B F7                   		shar	#31, r7
 378 017b FF 07 7A                		sub	r7, r10, r7
 379 017e 63 37                   		mul	#3, r7
 380 0180 ED 0B 0D                		mov.L	52[r0], r11
 381 0183 FF 07 7B                		sub	r7, r11, r7
 382                             	.LVL49:
 350:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 351:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     for (int i_loop_cnt = 0; i_loop_cnt < loop_cnt; i_loop_cnt++)
 383                             		.loc 1 351 5 is_stmt 1
 384                             	.LBB40:
 385                             		.loc 1 351 10
 386                             		.loc 1 351 5 is_stmt 0
 387 0186 61 07                   		cmp	#0, r7
 388 0188 2A 05 38 86 00          		ble	.L26
 389 018d ED 0C 0E                		mov.L	56[r0], r12
 390 0190 FD 74 4C 00             		max	#0, r12
 391                             	.LBB41:
 392                             	.LBB42:
 393                             	.LBB43:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 394                             		.loc 2 823 22
 395 0194 ED 0B 0E                		mov.L	56[r0], r11
 396 0197 7E 1B                   		neg	r11
 397 0199 ED 0D 0E                		mov.L	56[r0], r13
 398 019c 61 0D                   		cmp	#0, r13
 399 019e 2B 04                   		ble 1f
 400 01a0 66 0B                   		mov #0, r11
 401                             	1:
 402 01a2 FF 28 74                		add	r7, r4, r8
 403 01a5 AA 0E                   		mov.L	36[r0], r6
 404 01a7 06 89 06 08             		add	32[r0], r6
 405 01ab EC 05                   		mov.L	[r0], r5
 406 01ad ED 0A 11                		mov.L	68[r0], r10
 407 01b0 AA 02                   		mov.L	32[r0], r2
 408                             	.LVL50:
 409                             		.balign 8,3,1
 410                             	.L14:
 411                             	.LBE43:
 412                             	.LBE42:
 352:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 353:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
 413                             		.loc 1 353 9 is_stmt 1
 354:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr = &rhs[0];
 414                             		.loc 1 354 9
 355:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 356:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res00 = 0;
 415                             		.loc 1 356 9
 357:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 416                             		.loc 1 357 9
 417                             		.loc 1 357 12 is_stmt 0
 418 01b2 61 03                   		cmp	#0, r3
 419 01b4 3A AD 00                		beq	.L22
 358:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 359:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res00 = *bias++;
 420                             		.loc 1 359 13 is_stmt 1
 421                             		.loc 1 359 19 is_stmt 0
 422 01b7 FD 2A 37                		mov.L	[r3+], r7
 423                             	.LVL51:
 424                             		.balign 8,3,1
 425                             	.L15:
 360:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 361:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 362:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 426                             		.loc 1 362 9 is_stmt 1
 427                             	.LBB47:
 428                             		.loc 1 362 14
 429                             		.loc 1 362 9 is_stmt 0
 430 01ba 61 02                   		cmp	#0, r2
 431 01bc 2B 1E                   		ble	.L16
 432 01be EF 5E                   		mov.L	r5, r14
 433                             	.LBE47:
 353:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         const q7_t *rhs_ptr = &rhs[0];
 434                             		.loc 1 353 21
 435 01c0 ED 0D 09                		mov.L	36[r0], r13
 436                             	.LVL52:
 437 01c3 77 10 01 00 00          		.balign 8,3,5
 438                             	.L17:
 439                             	.LBB49:
 440                             	.LBB48:
 363:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 364:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             q31_t rhs_value0 = (int8_t)rhs_ptr[0] + rhs_offset;
 441                             		.loc 1 364 13 is_stmt 1 discriminator 3
 365:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 442                             		.loc 1 365 13 discriminator 3
 366:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 367:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             res00 += lhs_value * rhs_value0;
 443                             		.loc 1 367 13 discriminator 3
 365:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 444                             		.loc 1 365 31 is_stmt 0 discriminator 3
 445 01c8 FD 28 D1                		mov.B	[r13+], r1
 446                             	.LVL53:
 364:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 447                             		.loc 1 364 32 discriminator 3
 448 01cb FD 28 EF                		mov.B	[r14+], r15
 449                             	.LVL54:
 365:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 450                             		.loc 1 365 19 discriminator 3
 451 01ce 4B 91                   		add	r9, r1
 452                             	.LVL55:
 364:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 453                             		.loc 1 364 19 discriminator 3
 454 01d0 4B AF                   		add	r10, r15
 455                             	.LVL56:
 456                             		.loc 1 367 32 discriminator 3
 457 01d2 4F F1                   		mul	r15, r1
 458                             	.LVL57:
 459                             		.loc 1 367 19 discriminator 3
 460 01d4 4B 17                   		add	r1, r7
 461                             	.LVL58:
 368:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 369:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++rhs_ptr;
 462                             		.loc 1 369 13 is_stmt 1 discriminator 3
 370:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****             ++lhs_ptr;
 463                             		.loc 1 370 13 discriminator 3
 464                             	.LBE48:
 362:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         {
 465                             		.loc 1 362 9 is_stmt 0 discriminator 3
 466 01d6 47 6D                   		cmp	r6, r13
 467 01d8 21 F0                   		bne	.L17
 468                             	.LVL59:
 469                             		.balign 8,3,2
 470                             	.L16:
 471                             	.LBE49:
 371:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         }
 372:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 373:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Quantize down
 374:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 472                             		.loc 1 374 9 is_stmt 1
 473                             	.LBB50:
 474                             	.LBB44:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 475                             		.loc 2 816 5
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 476                             		.loc 2 816 11 is_stmt 0
 477 01da FD 62 C7                		shll	r12, r7
 478                             	.LVL60:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 479                             		.loc 2 817 5 is_stmt 1
 480 01dd A8 81                   		mov.L	8[r0], r1
 481                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 482 01df FD 03 71                		emula r7, r1, a0
 483 01e2 FD 19 00                	racl #1, a0
 484 01e5 FD 1F 07                	mvfachi #0, a0, r7
 485                             	
 486                             	 ; 0 "" 2
 487                             	.LVL61:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 488                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 489                             		.loc 2 824 5
 490                             	.LBE44:
 491                             	.LBE50:
 375:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 376:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Add offset
 377:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 += dst_offset;
 378:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 379:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         // Clamp the result
 380:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MAX(res00, activation_min);
 381:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MIN(res00, activation_max);
 382:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 383:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         *dst++ = (q7_t)res00;
 492                             		.loc 1 383 13 is_stmt 0
 493 01e8 62 14                   		add	#1, r4
 494                             	.LVL62:
 495                             	.LBB51:
 496                             	.LBB45:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 497                             		.loc 2 824 8
 498 01ea 61 07                   		cmp	#0, r7
 499 01ec 29 68                   		blt	.L33
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 500                             		.loc 2 833 9 is_stmt 1
 501                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 502 01ee FD 60 B7                		shlr r11, r7
 503 01f1 FD 74 27 00             	adc #0, r7
 504                             	
 505                             	 ; 0 "" 2
 506                             	.LVL63:
 507                             		.balign 8,3,1
 508                             	.L28:
 509                             		.loc 2 839 5
 510                             	.LBE45:
 511                             	.LBE51:
 377:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 512                             		.loc 1 377 9
 377:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 513                             		.loc 1 377 15 is_stmt 0
 514 01f5 06 89 07 01             		add	4[r0], r7
 515                             	.LVL64:
 380:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MIN(res00, activation_max);
 516                             		.loc 1 380 9 is_stmt 1
 517                             		.loc 1 383 16 is_stmt 0
 518 01f9 71 41 FF                		add	#-1, r4, r1
 380:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         res00 = MIN(res00, activation_max);
 519                             		.loc 1 380 15
 520 01fc ED 0D 03                		mov.L	12[r0], r13
 521 01ff FC 13 D7                		max	r13, r7
 522                             	.LVL65:
 381:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 523                             		.loc 1 381 9 is_stmt 1
 524                             		.loc 1 383 9
 384:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         rhs += rhs_cols;
 525                             		.loc 1 384 13 is_stmt 0
 526 0202 4B 25                   		add	r2, r5
 527                             	.LVL66:
 381:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 528                             		.loc 1 381 15
 529 0204 ED 0D 04                		mov.L	16[r0], r13
 530 0207 FC 17 D7                		min	r13, r7
 531                             	.LVL67:
 383:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         rhs += rhs_cols;
 532                             		.loc 1 383 18
 533 020a C3 17                   		mov.B	r7, [r1]
 534                             		.loc 1 384 9 is_stmt 1
 535                             	.LVL68:
 536                             	.LBE41:
 351:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     {
 537                             		.loc 1 351 5 is_stmt 0
 538 020c 47 84                   		cmp	r8, r4
 539 020e 21 A4                   		bne	.L14
 540                             	.LVL69:
 541                             		.balign 8,3,1
 542                             	.L26:
 543                             	.LBE40:
 385:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     }
 386:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** #endif
 387:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****     return ARM_MATH_SUCCESS;
 388:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** }
 544                             		.loc 1 388 1
 545 0210 66 01                   		mov.L	#0, r1
 546 0212 3F 6D 23                		rtsd	#140, r6-r13
 547                             	.LVL70:
 548                             	.L32:
 549                             	.LBB54:
 550                             	.LBB39:
 551                             	.LBB34:
 552                             	.LBB33:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 553                             		.loc 2 825 9 is_stmt 1
 554 0215 ED 0B 05                		mov.L	20[r0], r11
 555                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 556 0218 7E 12                   		neg r2
 557 021a FD 60 B2                	shlr r11, r2
 558 021d FD 74 22 00             	adc #0, r2
 559 0221 7E 12                   	neg r2
 560                             	
 561                             	 ; 0 "" 2
 562                             	.LVL71:
 563 0223 38 08 FF                		bra	.L11
 564                             	.LVL72:
 565                             	.L31:
 566                             	.LBE33:
 567                             	.LBE34:
 568                             	.LBB35:
 569                             	.LBB30:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 570                             		.loc 2 825 9
 571 0226 ED 0A 05                		mov.L	20[r0], r10
 572                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 573 0229 7E 11                   		neg r1
 574 022b FD 60 A1                	shlr r10, r1
 575 022e FD 74 21 00             	adc #0, r1
 576 0232 7E 11                   	neg r1
 577                             	
 578                             	 ; 0 "" 2
 579                             	.LVL73:
 580 0234 EF 7A                   		mov.L	r7, r10
 581 0236 38 D7 FE                		bra	.L9
 582                             	.LVL74:
 583                             	.L30:
 584                             	.LBE30:
 585                             	.LBE35:
 586                             	.LBB36:
 587                             	.LBB23:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 588                             		.loc 2 825 9
 589 0239 A9 0F                   		mov.L	20[r0], r7
 590                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 591 023b 7E 16                   		neg r6
 592 023d FD 60 76                	shlr r7, r6
 593 0240 FD 74 26 00             	adc #0, r6
 594 0244 7E 16                   	neg r6
 595                             	
 596                             	 ; 0 "" 2
 597                             	.LVL75:
 598 0246 EF B7                   		mov.L	r11, r7
 599 0248 38 A3 FE                		bra	.L7
 600                             	.LVL76:
 601                             	.L21:
 602                             	.LBE23:
 603                             	.LBE36:
 301:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 604                             		.loc 1 301 15 is_stmt 0
 605 024b 66 02                   		mov.L	#0, r2
 300:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res02 = 0;
 606                             		.loc 1 300 15
 607 024d 66 01                   		mov.L	#0, r1
 299:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         q31_t res01 = 0;
 608                             		.loc 1 299 15
 609 024f 66 06                   		mov.L	#0, r6
 610 0251 38 40 FE                		bra	.L3
 611                             	.LVL77:
 612                             	.L33:
 613                             	.LBE39:
 614                             	.LBE54:
 615                             	.LBB55:
 616                             	.LBB53:
 617                             	.LBB52:
 618                             	.LBB46:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 619                             		.loc 2 825 9 is_stmt 1
 620                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 621 0254 7E 17                   		neg r7
 622 0256 FD 60 B7                	shlr r11, r7
 623 0259 FD 74 27 00             	adc #0, r7
 624 025d 7E 17                   	neg r7
 625                             	
 626                             	 ; 0 "" 2
 627                             	.LVL78:
 628                             		.loc 2 839 5
 629                             	.LBE46:
 630                             	.LBE52:
 377:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c **** 
 631                             		.loc 1 377 9
 632 025f 2E 96                   		bra	.L28
 633                             	.LVL79:
 634                             	.L22:
 356:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_s8.c ****         if (bias)
 635                             		.loc 1 356 15 is_stmt 0
 636 0261 66 07                   		mov.L	#0, r7
 637 0263 38 57 FF                		bra	.L15
 638                             	.LBE53:
 639                             	.LBE55:
 640                             	.LFE82:
 692                             	.Letext0:
 693                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 694                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 695                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 696                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 697                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 698                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 699                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 700                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 701                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
