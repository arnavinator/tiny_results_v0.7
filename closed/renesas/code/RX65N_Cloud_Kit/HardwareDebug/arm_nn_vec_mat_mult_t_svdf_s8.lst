   1                             		.file	"arm_nn_vec_mat_mult_t_svdf_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_nn_vec_mat_mult_t_svdf_s8,"ax",@progbits
   5                             		.global	_arm_nn_vec_mat_mult_t_svdf_s8
   7                             	_arm_nn_vec_mat_mult_t_svdf_s8:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c"
   1:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** /*
   2:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Copyright (C) 2021 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
   4:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
   6:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
  10:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
  12:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  */
  18:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  19:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** /* ----------------------------------------------------------------------
  20:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Project:      CMSIS NN Library
  21:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Title:        arm_nn_vec_mat_mult_t_svdf_s8
  22:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Description:  s8 vector by matrix (transposed) multiplication with
  23:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *               s16 output. Targetted at SVDF operator.
  24:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
  25:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * $Date:        15. April 2021
  26:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * $Revision:    V.1.0.0
  27:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
  28:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Target Processor:  Cortex-M
  29:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
  30:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * -------------------------------------------------------------------- */
  31:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  32:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** #include "arm_nnsupportfunctions.h"
  33:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  34:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** /**
  35:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * @ingroup groupSupport
  36:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  */
  37:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  38:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** /**
  39:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * @addtogroup NNBasicMath
  40:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * @{
  41:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  */
  42:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  43:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** /*
  44:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * s8 vector(lhs) by matrix (transposed) multiplication
  45:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
  46:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  * Refer header file for details.
  47:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  *
  48:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****  */
  49:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
  50:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const q7_t *rhs,
  51:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          q15_t *dst,
  52:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t lhs_offset,
  53:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t rhs_offset,
  54:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t dst_offset,
  55:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t dst_multiplier,
  56:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t dst_shift,
  57:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t rhs_cols,
  58:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t rhs_rows,
  59:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t activation_min,
  60:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****                                          const int32_t activation_max)
  61:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** {
  10                             		.loc 1 61 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 71 00 98                		add	#-104, r0
  15                             	.LCFI1:
  16                             		.loc 1 61 1 is_stmt 0
  17 0005 75 47 8C                		mov.L	#0x8c, r7
  18 0008 4B 07                   		add	r0, r7
  19 000a A2 01                   		mov.L	r1, 32[r0]
  20 000c E5 70 04 03             		mov.L	16[r7], 12[r0]
  21 0010 A1 03                   		mov.L	r3, 16[r0]
  22 0012 E4 70 11                		mov.L	[r7], 68[r0]
  23 0015 E5 70 01 0E             		mov.L	4[r7], 56[r0]
  24 0019 E1 70 02                		mov.L	8[r7], [r0]
  62:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     (void)rhs_offset;
  25                             		.loc 1 62 5 is_stmt 1
  63:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     if (rhs_cols < 0 || (Q31_MAX - rhs_cols) < 16 || dst_offset < 0)
  26                             		.loc 1 63 5
  61:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     (void)rhs_offset;
  27                             		.loc 1 61 1 is_stmt 0
  28 001c E5 70 03 0D             		mov.L	12[r7], 52[r0]
  29 0020 E5 70 05 0C             		mov.L	20[r7], 48[r0]
  30 0024 E5 70 06 01             		mov.L	24[r7], 4[r0]
  31 0028 E5 70 07 02             		mov.L	28[r7], 8[r0]
  32                             		.loc 1 63 8
  33 002c A8 8D                   		mov.L	12[r0], r5
  34 002e 61 05                   		cmp	#0, r5
  35 0030 28 05 38 17 02          		blt	.L23
  36                             		.loc 1 63 34 discriminator 1
  37 0035 FB 72 FF FF FF 7F       		mov.L	#0x7fffffff, r7
  38 003b 43 57                   		sub	r5, r7
  39                             		.loc 1 63 22 discriminator 1
  40 003d 61 F7                   		cmp	#15, r7
  41 003f 2A 05 38 08 02          		ble	.L23
  42                             		.loc 1 63 51 discriminator 2
  43 0044 AB 87                   		mov.L	56[r0], r7
  44 0046 61 07                   		cmp	#0, r7
  45 0048 28 05 38 FF 01          		blt	.L23
  64:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
  65:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         return ARM_MATH_ARGUMENT_ERROR;
  66:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
  67:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  68:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     (void)rhs_offset;
  46                             		.loc 1 68 5 is_stmt 1
  69:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** #if defined(ARM_MATH_MVEI)
  70:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     int32_t row_loop_cnt = rhs_rows / 3;
  71:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  72:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     for (int i_row_loop_cnt = 0; i_row_loop_cnt < row_loop_cnt; i_row_loop_cnt++)
  73:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
  74:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t acc_0 = 0;
  75:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t acc_1 = 0;
  76:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t acc_2 = 0;
  77:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  78:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int32_t col_loop_cnt = (rhs_cols + 15) / 16;
  79:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  80:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *lhs_vec = lhs;
  81:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *rhs_0 = rhs;
  82:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *rhs_1 = rhs + rhs_cols;
  83:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *rhs_2 = rhs + 2 * rhs_cols;
  84:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  85:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t rhs_sum_0 = 0;
  86:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t rhs_sum_1 = 0;
  87:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t rhs_sum_2 = 0;
  88:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  89:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         uint32_t col_cnt = (uint32_t)rhs_cols;
  90:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  91:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int i = 0; i < col_loop_cnt; i++)
  92:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
  93:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             mve_pred16_t p = vctp8q(col_cnt);
  94:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             col_cnt -= 16;
  95:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  96:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int8x16_t input = vldrbq_z_s8(lhs_vec, p);
  97:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
  98:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int8x16_t ker_0 = vldrbq_z_s8(rhs_0, p);
  99:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_sum_0 = vaddvaq_p_s8(rhs_sum_0, ker_0, p);
 100:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 = vmladavaq_p_s8(acc_0, ker_0, input, p);
 101:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 102:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int8x16_t ker_1 = vldrbq_z_s8(rhs_1, p);
 103:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_sum_1 = vaddvaq_p_s8(rhs_sum_1, ker_1, p);
 104:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_1 = vmladavaq_p_s8(acc_1, ker_1, input, p);
 105:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 106:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int8x16_t ker_2 = vldrbq_z_s8(rhs_2, p);
 107:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_sum_2 = vaddvaq_p_s8(rhs_sum_2, ker_2, p);
 108:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_2 = vmladavaq_p_s8(acc_2, ker_2, input, p);
 109:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 110:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             lhs_vec += 16;
 111:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_0 += 16;
 112:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_1 += 16;
 113:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_2 += 16;
 114:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 115:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += 3 * rhs_cols;
 116:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 117:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32x4_t acc = {acc_0, acc_1, acc_2, 0};
 118:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int32x4_t rhs_sum = {rhs_sum_0, rhs_sum_1, rhs_sum_2, 0};
 119:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc += vdupq_n_s32(lhs_offset) * rhs_sum;
 120:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 121:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc = arm_requantize_mve(acc, dst_multiplier, dst_shift);
 122:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc = vmaxq_s32(acc, vdupq_n_s32(activation_min));
 123:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc = vminq_s32(acc, vdupq_n_s32(activation_max));
 124:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst) = (int16_t)acc[0];
 125:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + dst_offset) = (int16_t)acc[1];
 126:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + 2 * dst_offset) = (int16_t)acc[2];
 127:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += 3 * dst_offset;
 128:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
 129:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 130:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     const int loop_cnt = rhs_rows % 3;
 131:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     for (int i_row_loop_cnt = 0; i_row_loop_cnt < loop_cnt; i_row_loop_cnt++)
 132:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 133:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t acc_0 = 0;
 134:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int32_t col_loop_cnt = (rhs_cols + 15) / 16;
 135:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *lhs_vec = lhs;
 136:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *rhs_0 = rhs;
 137:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t rhs_sum_0 = 0;
 138:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         uint32_t col_cnt = (uint32_t)rhs_cols;
 139:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 140:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int i = 0; i < col_loop_cnt; i++)
 141:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 142:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             mve_pred16_t p = vctp8q(col_cnt);
 143:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             col_cnt -= 16;
 144:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int8x16_t input = vldrbq_z_s8(lhs_vec, p);
 145:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 146:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int8x16_t ker_0 = vldrbq_z_s8(rhs_0, p);
 147:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_sum_0 = vaddvaq_p_s8(rhs_sum_0, ker_0, p);
 148:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 = vmladavaq_p_s8(acc_0, ker_0, input, p);
 149:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 150:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             lhs_vec += 16;
 151:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_0 += 16;
 152:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 153:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += rhs_cols;
 154:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 155:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int32_t offsets = rhs_sum_0 * lhs_offset;
 156:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = __QADD(acc_0, offsets);
 157:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 158:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 159:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         // Clamp the result
 160:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = MAX(acc_0, activation_min);
 161:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *dst = (q15_t)MIN(acc_0, activation_max);
 162:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += dst_offset;
 163:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
 164:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 165:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** #elif defined(ARM_MATH_DSP)
 166:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     int32_t row_loop_cnt = rhs_rows / 2;
 167:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 168:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     const int16_t lhs_offset_s16 = lhs_offset;
 169:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     const int16_t rhs_offset_s16 = rhs_offset;
 170:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 171:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 172:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 173:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     for (int32_t i = 0; i < row_loop_cnt; i++)
 174:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 175:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t acc_0 = 0;
 176:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t acc_1 = 0;
 177:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 178:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int32_t col_loop_cnt = rhs_cols / 4;
 179:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *lhs_vec = lhs;
 180:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *rhs_0 = rhs;
 181:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *rhs_1 = rhs + rhs_cols;
 182:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += 2 * rhs_cols;
 183:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int j = col_loop_cnt; j != 0; j--)
 184:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 185:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t vec_0 = arm_nn_read_q7x4_ia(&lhs_vec);
 186:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t vec_1 = __SXTAB16_RORn(lhs_offset_s16x2, (uint32_t)vec_0, 8);
 187:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             vec_0 = __SXTAB16(lhs_offset_s16x2, vec_0);
 188:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t ker_0 = arm_nn_read_q7x4_ia(&rhs_0);
 189:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t ker_1 = __SXTAB16_RORn(rhs_offset_s16x2, (uint32_t)ker_0, 8);
 190:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ker_0 = __SXTAB16(rhs_offset_s16x2, ker_0);
 191:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 = __SMLAD(ker_1, vec_1, acc_0);
 192:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 = __SMLAD(ker_0, vec_0, acc_0);
 193:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ker_0 = arm_nn_read_q7x4_ia(&rhs_1);
 194:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ker_1 = __SXTAB16_RORn(rhs_offset_s16x2, (uint32_t)ker_0, 8);
 195:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ker_0 = __SXTAB16(rhs_offset_s16x2, ker_0);
 196:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_1 = __SMLAD(ker_1, vec_1, acc_1);
 197:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_1 = __SMLAD(ker_0, vec_0, acc_1);
 198:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 199:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 200:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 201:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 202:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             lhs_vec++;
 203:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 += lhs_temp * (*rhs_0 + rhs_offset);
 204:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_0++;
 205:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_1 += lhs_temp * (*rhs_1 + rhs_offset);
 206:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_1++;
 207:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 208:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 209:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_1 = arm_nn_requantize(acc_1, dst_multiplier, dst_shift);
 210:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 211:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         // Clamp the result
 212:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = MAX(acc_0, activation_min);
 213:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = MIN(acc_0, activation_max);
 214:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_1 = MAX(acc_1, activation_min);
 215:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_1 = MIN(acc_1, activation_max);
 216:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *dst = (q15_t)acc_0;
 217:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + dst_offset) = (q15_t)acc_1;
 218:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += 2 * dst_offset;
 219:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
 220:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     if (rhs_rows & 0x1)
 221:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 222:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         int32_t acc_0 = 0;
 223:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int32_t col_loop_cnt = rhs_cols / 4;
 224:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *lhs_vec = lhs;
 225:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const int8_t *rhs_0 = rhs;
 226:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int i = col_loop_cnt; i != 0; i--)
 227:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 228:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t vec_0 = arm_nn_read_q7x4_ia(&lhs_vec);
 229:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t vec_1 = __SXTAB16(lhs_offset_s16x2, __ROR((uint32_t)vec_0, 8));
 230:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             vec_0 = __SXTAB16(lhs_offset_s16x2, vec_0);
 231:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t ker_0 = arm_nn_read_q7x4_ia(&rhs_0);
 232:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             int32_t ker_1 = __SXTAB16(rhs_offset_s16x2, __ROR((uint32_t)ker_0, 8));
 233:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ker_0 = __SXTAB16(rhs_offset_s16x2, ker_0);
 234:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 = __SMLAD(ker_1, vec_1, acc_0);
 235:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 = __SMLAD(ker_0, vec_0, acc_0);
 236:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 237:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 238:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 239:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 240:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             lhs_vec++;
 241:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             acc_0 += lhs_temp * (*rhs_0 + rhs_offset);
 242:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             rhs_0++;
 243:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 244:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);
 245:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 246:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         // Clamp the result
 247:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = MAX(acc_0, activation_min);
 248:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         acc_0 = MIN(acc_0, activation_max);
 249:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *dst = (q15_t)acc_0;
 250:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += dst_offset;
 251:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
 252:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 253:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** #else
 254:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 255:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     int32_t row_loop_cnt = rhs_rows / 3;
  47                             		.loc 1 255 5
  48                             		.loc 1 255 13 is_stmt 0
  49 004d AB 07                   		mov.L	48[r0], r7
  50 004f FD 70 67 56 55 55 55    		emul	#0x55555556, r7
  51 0056 A3 8F                   		mov.L	r7, 60[r0]
  52 0058 E7 08 10                		mov.L	r8, 64[r0]
  53 005b AB 07                   		mov.L	48[r0], r7
  54 005d 6B F7                   		shar	#31, r7
  55 005f FF 07 78                		sub	r7, r8, r7
  56 0062 A2 0F                   		mov.L	r7, 36[r0]
  57                             	.LVL1:
 256:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 257:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     for (int i_row_loop_cnt = 0; i_row_loop_cnt < row_loop_cnt; i_row_loop_cnt++)
  58                             		.loc 1 257 5 is_stmt 1
  59                             	.LBB18:
  60                             		.loc 1 257 10
  61                             		.loc 1 257 5 is_stmt 0
  62 0064 ED 08 0C                		mov.L	48[r0], r8
  63 0067 61 28                   		cmp	#2, r8
  64 0069 2A 05 38 09 01          		ble	.L3
  65 006e EF 57                   		mov.L	r5, r7
  66                             	.LVL2:
  67                             	.LBB19:
  68                             	.LBB20:
  69                             	.LBB21:
  70                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
  71                             		.loc 2 823 22
  72 0070 ED 0D 0D                		mov.L	52[r0], r13
  73 0073 7E 1D                   		neg	r13
  74                             	.LBE21:
  75                             	.LBE20:
 258:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 259:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *lhs_ptr = lhs;
 260:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr_0 = &rhs[0];
 261:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr_1 = &rhs[rhs_cols];
 262:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr_2 = &rhs[rhs_cols * 2];
  76                             		.loc 1 262 47
  77 0075 4B 55                   		add	r5, r5
  78 0077 A2 8D                   		mov.L	r5, 44[r0]
  79 0079 ED 0A 0D                		mov.L	52[r0], r10
  80 007c 61 0A                   		cmp	#0, r10
  81 007e 2B 04                   		ble 1f
  82 0080 66 0D                   		mov #0, r13
  83                             	1:
 263:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 264:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res00 = 0;
 265:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res01 = 0;
 266:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res02 = 0;
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 268:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 269:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t rhs_value0 = (int8_t)*rhs_ptr_0;
 270:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t rhs_value1 = (int8_t)*rhs_ptr_1;
 271:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t rhs_value2 = (int8_t)*rhs_ptr_2;
 272:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t lhs_value = (int8_t)*lhs_ptr + lhs_offset;
 273:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 274:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res00 += lhs_value * rhs_value0;
 275:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res01 += lhs_value * rhs_value1;
 276:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res02 += lhs_value * rhs_value2;
 277:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 278:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++rhs_ptr_0;
 279:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++rhs_ptr_1;
 280:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++rhs_ptr_2;
 281:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++lhs_ptr;
 282:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 283:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         // Quantize down
 284:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 285:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 286:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = arm_nn_requantize(res02, dst_multiplier, dst_shift);
 287:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 288:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         // Clamp the result
 289:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MAX(res00, activation_min);
 290:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MIN(res00, activation_max);
 291:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = MAX(res01, activation_min);
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = MIN(res01, activation_max);
 293:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = MAX(res02, activation_min);
 294:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = MIN(res02, activation_max);
 295:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 296:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *dst = (q15_t)res00;
 297:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + dst_offset) = (q15_t)res01;
  84                             		.loc 1 297 15
  85 0082 AB 85                   		mov.L	56[r0], r5
  86 0084 4B 55                   		add	r5, r5
  87 0086 A1 85                   		mov.L	r5, 24[r0]
 298:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + 2 * dst_offset) = (q15_t)res02;
 299:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += 3 * dst_offset;
 300:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += 3 * rhs_cols;
  88                             		.loc 1 300 18
  89 0088 63 37                   		mul	#3, r7
  90 008a A2 87                   		mov.L	r7, 40[r0]
  91 008c FD 74 4A 00             		max	#0, r10
  92 0090 E7 0A 07                		mov.L	r10, 28[r0]
  93                             	.LBE19:
 257:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
  94                             		.loc 1 257 14
  95 0093 3E 05 00                		mov.L	#0, 20[r0]
  96 0096 EF 18                   		mov.L	r1, r8
  97 0098 06 89 08 03             		add	12[r0], r8
  98                             	.LVL3:
  99                             		.balign 8,3,1
 100                             	.L12:
 101                             	.LBB38:
 259:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr_0 = &rhs[0];
 102                             		.loc 1 259 9 is_stmt 1
 260:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr_1 = &rhs[rhs_cols];
 103                             		.loc 1 260 9
 261:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr_2 = &rhs[rhs_cols * 2];
 104                             		.loc 1 261 9
 262:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 105                             		.loc 1 262 9
 264:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res01 = 0;
 106                             		.loc 1 264 9
 265:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res02 = 0;
 107                             		.loc 1 265 9
 266:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 108                             		.loc 1 266 9
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 109                             		.loc 1 267 9
 110                             	.LBB24:
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 111                             		.loc 1 267 14
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 112                             		.loc 1 267 9 is_stmt 0
 113 009c ED 0A 03                		mov.L	12[r0], r10
 114 009f 61 0A                   		cmp	#0, r10
 115 00a1 3A 92 01                		beq	.L24
 116 00a4 EF 2F                   		mov.L	r2, r15
 117 00a6 EF AE                   		mov.L	r10, r14
 118 00a8 4B 2E                   		add	r2, r14
 119                             	.LVL4:
 120 00aa ED 09 0B                		mov.L	44[r0], r9
 121 00ad 4B 29                   		add	r2, r9
 122                             	.LBE24:
 259:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr_0 = &rhs[0];
 123                             		.loc 1 259 21
 124 00af ED 0C 08                		mov.L	32[r0], r12
 266:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 125                             		.loc 1 266 15
 126 00b2 66 01                   		mov.L	#0, r1
 265:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res02 = 0;
 127                             		.loc 1 265 15
 128 00b4 66 06                   		mov.L	#0, r6
 264:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res01 = 0;
 129                             		.loc 1 264 15
 130 00b6 66 0B                   		mov.L	#0, r11
 131                             	.LVL5:
 132                             		.balign 8,3,5
 133                             	.L5:
 134                             	.LBB26:
 135                             	.LBB25:
 269:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t rhs_value1 = (int8_t)*rhs_ptr_1;
 136                             		.loc 1 269 13 is_stmt 1 discriminator 3
 270:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t rhs_value2 = (int8_t)*rhs_ptr_2;
 137                             		.loc 1 270 13 discriminator 3
 271:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t lhs_value = (int8_t)*lhs_ptr + lhs_offset;
 138                             		.loc 1 271 13 discriminator 3
 272:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 139                             		.loc 1 272 13 discriminator 3
 272:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 140                             		.loc 1 272 37 is_stmt 0 discriminator 3
 141 00b8 FD 28 C7                		mov.B	[r12+], r7
 142                             	.LVL6:
 269:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t rhs_value1 = (int8_t)*rhs_ptr_1;
 143                             		.loc 1 269 25 discriminator 3
 144 00bb FD 28 F5                		mov.B	[r15+], r5
 145                             	.LVL7:
 270:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t rhs_value2 = (int8_t)*rhs_ptr_2;
 146                             		.loc 1 270 25 discriminator 3
 147 00be FD 28 EA                		mov.B	[r14+], r10
 148                             	.LVL8:
 272:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 149                             		.loc 1 272 25 discriminator 3
 150 00c1 4B 47                   		add	r4, r7
 151                             	.LVL9:
 274:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res01 += lhs_value * rhs_value1;
 152                             		.loc 1 274 13 is_stmt 1 discriminator 3
 271:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             const q31_t lhs_value = (int8_t)*lhs_ptr + lhs_offset;
 153                             		.loc 1 271 25 is_stmt 0 discriminator 3
 154 00c3 FD 28 93                		mov.B	[r9+], r3
 155                             	.LVL10:
 274:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res01 += lhs_value * rhs_value1;
 156                             		.loc 1 274 32 discriminator 3
 157 00c6 4F 75                   		mul	r7, r5
 158                             	.LVL11:
 275:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res02 += lhs_value * rhs_value2;
 159                             		.loc 1 275 32 discriminator 3
 160 00c8 4F 7A                   		mul	r7, r10
 161                             	.LVL12:
 276:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 162                             		.loc 1 276 32 discriminator 3
 163 00ca 4F 37                   		mul	r3, r7
 164                             	.LVL13:
 274:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res01 += lhs_value * rhs_value1;
 165                             		.loc 1 274 19 discriminator 3
 166 00cc 4B 5B                   		add	r5, r11
 167                             	.LVL14:
 275:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res02 += lhs_value * rhs_value2;
 168                             		.loc 1 275 13 is_stmt 1 discriminator 3
 275:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res02 += lhs_value * rhs_value2;
 169                             		.loc 1 275 19 is_stmt 0 discriminator 3
 170 00ce 4B A6                   		add	r10, r6
 171                             	.LVL15:
 276:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 172                             		.loc 1 276 13 is_stmt 1 discriminator 3
 276:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 173                             		.loc 1 276 19 is_stmt 0 discriminator 3
 174 00d0 4B 71                   		add	r7, r1
 175                             	.LVL16:
 278:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++rhs_ptr_1;
 176                             		.loc 1 278 13 is_stmt 1 discriminator 3
 279:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++rhs_ptr_2;
 177                             		.loc 1 279 13 discriminator 3
 280:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++lhs_ptr;
 178                             		.loc 1 280 13 discriminator 3
 281:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 179                             		.loc 1 281 13 discriminator 3
 180                             	.LBE25:
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 181                             		.loc 1 267 9 is_stmt 0 discriminator 3
 182 00d2 47 8C                   		cmp	r8, r12
 183 00d4 21 E4                   		bne	.L5
 184 00d6 A9 8D                   		mov.L	28[r0], r5
 185 00d8 FD 62 51                		shll	r5, r1
 186                             	.LVL17:
 187 00db FD 62 56                		shll	r5, r6
 188                             	.LVL18:
 189 00de FD 62 5B                		shll	r5, r11
 190                             	.LVL19:
 191                             		.balign 8,3,1
 192                             	.L4:
 193                             	.LBE26:
 284:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 194                             		.loc 1 284 9 is_stmt 1
 195                             	.LBB27:
 196                             	.LBB22:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 197                             		.loc 2 816 5
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 198                             		.loc 2 817 5
 199 00e1 EC 07                   		mov.L	[r0], r7
 200                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 201 00e3 FD 03 B7                		emula r11, r7, a0
 202 00e6 FD 19 00                	racl #1, a0
 203 00e9 FD 1F 0B                	mvfachi #0, a0, r11
 204                             	
 205                             	 ; 0 "" 2
 206                             	.LVL20:
 207                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 208                             		.loc 2 824 5
 209                             		.loc 2 824 8 is_stmt 0
 210 00ec 61 0B                   		cmp	#0, r11
 211 00ee 28 05 38 33 01          		blt	.L32
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 212                             		.loc 2 833 9 is_stmt 1
 213                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 214 00f3 FD 60 DB                		shlr r13, r11
 215 00f6 FD 74 2B 00             	adc #0, r11
 216                             	
 217                             	 ; 0 "" 2
 218                             	.LVL21:
 219 00fa EF 7A                   		mov.L	r7, r10
 220                             	.L7:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 221                             		.loc 2 839 5
 222                             	.LVL22:
 223                             	.LBE22:
 224                             	.LBE27:
 285:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = arm_nn_requantize(res02, dst_multiplier, dst_shift);
 225                             		.loc 1 285 9
 226                             	.LBB28:
 227                             	.LBB29:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 228                             		.loc 2 816 5
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 229                             		.loc 2 817 5
 230                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 231 00fc FD 03 6A                		emula r6, r10, a0
 232 00ff FD 19 00                	racl #1, a0
 233 0102 FD 1F 06                	mvfachi #0, a0, r6
 234                             	
 235                             	 ; 0 "" 2
 236                             	.LVL23:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 237                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 238                             		.loc 2 824 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 239                             		.loc 2 824 8 is_stmt 0
 240 0105 61 06                   		cmp	#0, r6
 241 0107 28 05 38 0A 01          		blt	.L33
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 242                             		.loc 2 833 9 is_stmt 1
 243                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 244 010c FD 60 D6                		shlr r13, r6
 245 010f FD 74 26 00             	adc #0, r6
 246                             	
 247                             	 ; 0 "" 2
 248                             	.LVL24:
 249 0113 EF A5                   		mov.L	r10, r5
 250                             	.L9:
 251                             		.loc 2 839 5
 252                             	.LVL25:
 253                             	.LBE29:
 254                             	.LBE28:
 286:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 255                             		.loc 1 286 9
 256                             	.LBB31:
 257                             	.LBB32:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 258                             		.loc 2 816 5
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 259                             		.loc 2 817 5
 260                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 261 0115 FD 03 15                		emula r1, r5, a0
 262 0118 FD 19 00                	racl #1, a0
 263 011b FD 1F 01                	mvfachi #0, a0, r1
 264                             	
 265                             	 ; 0 "" 2
 266                             	.LVL26:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 267                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 268                             		.loc 2 824 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 269                             		.loc 2 824 8 is_stmt 0
 270 011e 61 01                   		cmp	#0, r1
 271 0120 28 05 38 E3 00          		blt	.L34
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 272                             		.loc 2 833 9 is_stmt 1
 273                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 274 0125 FD 60 D1                		shlr r13, r1
 275 0128 FD 74 21 00             	adc #0, r1
 276                             	
 277                             	 ; 0 "" 2
 278                             	.LVL27:
 279                             		.balign 8,3,1
 280                             	.L11:
 281                             		.loc 2 839 5
 282                             	.LBE32:
 283                             	.LBE31:
 289:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MIN(res00, activation_max);
 284                             		.loc 1 289 9
 289:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MIN(res00, activation_max);
 285                             		.loc 1 289 15 is_stmt 0
 286 012c A8 0F                   		mov.L	4[r0], r7
 287 012e FC 13 7B                		max	r7, r11
 288                             	.LVL28:
 290:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = MAX(res01, activation_min);
 289                             		.loc 1 290 9 is_stmt 1
 291:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = MIN(res01, activation_max);
 290                             		.loc 1 291 9
 291:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = MIN(res01, activation_max);
 291                             		.loc 1 291 15 is_stmt 0
 292 0131 FC 13 76                		max	r7, r6
 293                             	.LVL29:
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = MAX(res02, activation_min);
 294                             		.loc 1 292 9 is_stmt 1
 293:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = MIN(res02, activation_max);
 295                             		.loc 1 293 9
 290:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res01 = MAX(res01, activation_min);
 296                             		.loc 1 290 15 is_stmt 0
 297 0134 ED 0A 02                		mov.L	8[r0], r10
 298 0137 FC 17 AB                		min	r10, r11
 299                             	.LVL30:
 300 013a A9 07                   		mov.L	16[r0], r7
 301 013c 06 89 07 06             		add	24[r0], r7
 293:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = MIN(res02, activation_max);
 302                             		.loc 1 293 15
 303 0140 A8 0D                   		mov.L	4[r0], r5
 304 0142 FC 13 51                		max	r5, r1
 305                             	.LVL31:
 294:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 306                             		.loc 1 294 9 is_stmt 1
 296:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + dst_offset) = (q15_t)res01;
 307                             		.loc 1 296 9
 296:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + dst_offset) = (q15_t)res01;
 308                             		.loc 1 296 16 is_stmt 0
 309 0145 A9 05                   		mov.L	16[r0], r5
 310 0147 D3 5B                   		mov.W	r11, [r5]
 297:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + 2 * dst_offset) = (q15_t)res02;
 311                             		.loc 1 297 9 is_stmt 1
 292:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res02 = MAX(res02, activation_min);
 312                             		.loc 1 292 15 is_stmt 0
 313 0149 FC 17 A6                		min	r10, r6
 314                             	.LVL32:
 315 014c ED 0A 06                		mov.L	24[r0], r10
 316 014f 4B 7A                   		add	r7, r10
 294:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 317                             		.loc 1 294 15
 318 0151 A8 85                   		mov.L	8[r0], r5
 319 0153 FC 17 51                		min	r5, r1
 320                             	.LVL33:
 297:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *(dst + 2 * dst_offset) = (q15_t)res02;
 321                             		.loc 1 297 31
 322 0156 D3 76                   		mov.W	r6, [r7]
 298:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += 3 * dst_offset;
 323                             		.loc 1 298 9 is_stmt 1
 298:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += 3 * dst_offset;
 324                             		.loc 1 298 35 is_stmt 0
 325 0158 D3 A1                   		mov.W	r1, [r10]
 299:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += 3 * rhs_cols;
 326                             		.loc 1 299 9 is_stmt 1
 327                             	.LBE38:
 257:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 328                             		.loc 1 257 79 is_stmt 0
 329 015a A9 0F                   		mov.L	20[r0], r7
 330 015c 62 17                   		add	#1, r7
 331 015e A1 0F                   		mov.L	r7, 20[r0]
 332                             	.LVL34:
 333                             	.LBB39:
 299:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += 3 * rhs_cols;
 334                             		.loc 1 299 13
 335 0160 A9 85                   		mov.L	24[r0], r5
 336 0162 4B A5                   		add	r10, r5
 337 0164 A1 05                   		mov.L	r5, 16[r0]
 338                             	.LVL35:
 339                             		.loc 1 300 9 is_stmt 1
 340                             		.loc 1 300 13 is_stmt 0
 341 0166 06 89 02 0A             		add	40[r0], r2
 342                             	.LVL36:
 343                             	.LBE39:
 257:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 344                             		.loc 1 257 5
 345 016a ED 0A 09                		mov.L	36[r0], r10
 346 016d 47 7A                   		cmp	r7, r10
 347 016f 2B 05 38 2B FF          		bgt	.L12
 348                             	.LVL37:
 349                             		.balign 8,3,1
 350                             	.L3:
 351                             	.LBE18:
 301:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
 302:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 303:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     const int loop_cnt = rhs_rows % 3;
 352                             		.loc 1 303 5 is_stmt 1
 353                             		.loc 1 303 15 is_stmt 0
 354 0174 ED 0B 10                		mov.L	64[r0], r11
 355 0177 AB 07                   		mov.L	48[r0], r7
 356 0179 6B F7                   		shar	#31, r7
 357 017b 43 7B                   		sub	r7, r11
 358 017d 63 3B                   		mul	#3, r11
 359 017f AB 05                   		mov.L	48[r0], r5
 360 0181 FF 0B B5                		sub	r11, r5, r11
 361                             	.LVL38:
 304:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     for (int i_loop_cnt = 0; i_loop_cnt < loop_cnt; i_loop_cnt++)
 362                             		.loc 1 305 5 is_stmt 1
 363                             	.LBB41:
 364                             		.loc 1 305 10
 365                             		.loc 1 305 5 is_stmt 0
 366 0184 61 0B                   		cmp	#0, r11
 367 0186 2B 7A                   		ble	.L18
 368                             	.LBB42:
 369                             	.LBB43:
 370                             	.LBB44:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 371                             		.loc 2 823 22
 372 0188 ED 09 0D                		mov.L	52[r0], r9
 373 018b 7E 19                   		neg	r9
 374                             	.LBE44:
 375                             	.LBE43:
 306:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 307:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *lhs_ptr = &lhs[0];
 308:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr = &rhs[0];
 309:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 310:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         q31_t res00 = 0;
 311:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 312:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 313:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 314:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             q31_t rhs_value0 = (int8_t)rhs_ptr[0] + rhs_offset;
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 316:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             res00 += lhs_value * rhs_value0;
 318:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 319:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++rhs_ptr;
 320:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++lhs_ptr;
 321:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 322:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 323:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         // Quantize down
 324:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 325:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 326:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         // Clamp the result
 327:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MAX(res00, activation_min);
 328:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MIN(res00, activation_max);
 329:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 330:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         *dst = (q15_t)res00;
 331:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += dst_offset;
 376                             		.loc 1 331 13
 377 018d ED 0D 0E                		mov.L	56[r0], r13
 378 0190 4B DD                   		add	r13, r13
 379 0192 AB 0F                   		mov.L	52[r0], r7
 380 0194 61 07                   		cmp	#0, r7
 381 0196 2B 04                   		ble 1f
 382 0198 66 09                   		mov #0, r9
 383                             	1:
 384 019a EF 78                   		mov.L	r7, r8
 385 019c FD 74 48 00             		max	#0, r8
 386                             	.LBE42:
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 387                             		.loc 1 305 14
 388 01a0 66 0C                   		mov.L	#0, r12
 389 01a2 AA 06                   		mov.L	32[r0], r6
 390 01a4 06 89 06 03             		add	12[r0], r6
 391 01a8 ED 0F 04                		mov.L	16[r0], r15
 392 01ab ED 0E 11                		mov.L	68[r0], r14
 393                             	.LVL39:
 394                             		.balign 8,3,1
 395                             	.L14:
 396                             	.LBB52:
 397                             	.LBB47:
 312:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 398                             		.loc 1 312 9
 399 01ae A8 8D                   		mov.L	12[r0], r5
 400 01b0 61 05                   		cmp	#0, r5
 401 01b2 20 1E                   		beq	.L20
 402 01b4 EF 21                   		mov.L	r2, r1
 403                             	.LBE47:
 307:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         const q7_t *rhs_ptr = &rhs[0];
 404                             		.loc 1 307 21
 405 01b6 AA 03                   		mov.L	32[r0], r3
 310:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 406                             		.loc 1 310 15
 407 01b8 66 05                   		mov.L	#0, r5
 408                             	.LVL40:
 409                             		.balign 8,3,5
 410                             	.L15:
 411                             	.LBB49:
 412                             	.LBB48:
 314:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 413                             		.loc 1 314 13 is_stmt 1 discriminator 3
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 414                             		.loc 1 315 13 discriminator 3
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 415                             		.loc 1 317 13 discriminator 3
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 416                             		.loc 1 315 31 is_stmt 0 discriminator 3
 417 01ba FD 28 37                		mov.B	[r3+], r7
 418                             	.LVL41:
 314:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 419                             		.loc 1 314 32 discriminator 3
 420 01bd FD 28 1A                		mov.B	[r1+], r10
 421                             	.LVL42:
 315:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 422                             		.loc 1 315 19 discriminator 3
 423 01c0 4B 47                   		add	r4, r7
 424                             	.LVL43:
 314:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             q31_t lhs_value = (int8_t)lhs_ptr[0] + lhs_offset;
 425                             		.loc 1 314 19 discriminator 3
 426 01c2 4B EA                   		add	r14, r10
 427                             	.LVL44:
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 428                             		.loc 1 317 32 discriminator 3
 429 01c4 4F A7                   		mul	r10, r7
 430                             	.LVL45:
 317:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 431                             		.loc 1 317 19 discriminator 3
 432 01c6 4B 75                   		add	r7, r5
 433                             	.LVL46:
 319:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****             ++lhs_ptr;
 434                             		.loc 1 319 13 is_stmt 1 discriminator 3
 320:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         }
 435                             		.loc 1 320 13 discriminator 3
 436                             	.LBE48:
 312:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 437                             		.loc 1 312 9 is_stmt 0 discriminator 3
 438 01c8 47 63                   		cmp	r6, r3
 439 01ca 21 F0                   		bne	.L15
 440 01cc FD 62 85                		shll	r8, r5
 441                             	.LVL47:
 442 01cf 03                      		.balign 8,3,1
 443                             	.L20:
 444                             	.LBE49:
 324:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 445                             		.loc 1 324 9 is_stmt 1
 446                             	.LBB50:
 447                             	.LBB45:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 448                             		.loc 2 816 5
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 449                             		.loc 2 817 5
 450 01d0 EC 0A                   		mov.L	[r0], r10
 451                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 452 01d2 FD 03 5A                		emula r5, r10, a0
 453 01d5 FD 19 00                	racl #1, a0
 454 01d8 FD 1F 05                	mvfachi #0, a0, r5
 455                             	
 456                             	 ; 0 "" 2
 457                             	.LVL48:
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 458                             		.loc 2 823 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 459                             		.loc 2 824 5
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 460                             		.loc 2 824 8 is_stmt 0
 461 01db 61 05                   		cmp	#0, r5
 462 01dd 29 5F                   		blt	.L35
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 463                             		.loc 2 833 9 is_stmt 1
 464                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 465 01df FD 60 95                		shlr r9, r5
 466 01e2 FD 74 25 00             	adc #0, r5
 467                             	
 468                             	 ; 0 "" 2
 469                             	.LVL49:
 470                             		.balign 8,3,1
 471                             	.L30:
 472                             		.loc 2 839 5
 473                             	.LBE45:
 474                             	.LBE50:
 327:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MIN(res00, activation_max);
 475                             		.loc 1 327 9
 327:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MIN(res00, activation_max);
 476                             		.loc 1 327 15 is_stmt 0
 477 01e6 A8 0F                   		mov.L	4[r0], r7
 478 01e8 FC 13 75                		max	r7, r5
 479                             	.LVL50:
 328:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 480                             		.loc 1 328 9 is_stmt 1
 330:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += dst_offset;
 481                             		.loc 1 330 9
 482                             	.LBE52:
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 483                             		.loc 1 305 63 is_stmt 0
 484 01eb 62 1C                   		add	#1, r12
 485                             	.LVL51:
 486                             	.LBB53:
 328:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 487                             		.loc 1 328 15
 488 01ed ED 0A 02                		mov.L	8[r0], r10
 489 01f0 FC 17 A5                		min	r10, r5
 490                             	.LVL52:
 332:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += rhs_cols;
 491                             		.loc 1 332 13
 492 01f3 06 89 02 03             		add	12[r0], r2
 493                             	.LVL53:
 330:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         dst += dst_offset;
 494                             		.loc 1 330 16
 495 01f7 D3 F5                   		mov.W	r5, [r15]
 331:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += rhs_cols;
 496                             		.loc 1 331 9 is_stmt 1
 331:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         rhs += rhs_cols;
 497                             		.loc 1 331 13 is_stmt 0
 498 01f9 4B DF                   		add	r13, r15
 499                             	.LVL54:
 500                             		.loc 1 332 9 is_stmt 1
 501                             	.LBE53:
 305:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     {
 502                             		.loc 1 305 5 is_stmt 0
 503 01fb 47 CB                   		cmp	r12, r11
 504 01fd 21 B1                   		bne	.L14
 505                             	.LVL55:
 506 01ff 03                      		.balign 8,3,1
 507                             	.L18:
 508                             	.LBE41:
 333:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
 334:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** #endif
 335:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** 
 336:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     return ARM_MATH_SUCCESS;
 509                             		.loc 1 336 12
 510 0200 66 01                   		mov.L	#0, r1
 337:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c **** }
 511                             		.loc 1 337 1
 512 0202 3F 6D 22                		rtsd	#136, r6-r13
 513                             	.LVL56:
 514                             	.L34:
 515                             	.LBB55:
 516                             	.LBB40:
 517                             	.LBB34:
 518                             	.LBB33:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 519                             		.loc 2 825 9 is_stmt 1
 520                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 521 0205 7E 11                   		neg r1
 522 0207 FD 60 D1                	shlr r13, r1
 523 020a FD 74 21 00             	adc #0, r1
 524 020e 7E 11                   	neg r1
 525                             	
 526                             	 ; 0 "" 2
 527                             	.LVL57:
 528 0210 38 1C FF                		bra	.L11
 529                             	.LVL58:
 530                             	.L33:
 531                             	.LBE33:
 532                             	.LBE34:
 533                             	.LBB35:
 534                             	.LBB30:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 535                             		.loc 2 825 9
 536                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 537 0213 7E 16                   		neg r6
 538 0215 FD 60 D6                	shlr r13, r6
 539 0218 FD 74 26 00             	adc #0, r6
 540 021c 7E 16                   	neg r6
 541                             	
 542                             	 ; 0 "" 2
 543                             	.LVL59:
 544 021e EF A5                   		mov.L	r10, r5
 545 0220 38 F5 FE                		bra	.L9
 546                             	.LVL60:
 547                             	.L32:
 548                             	.LBE30:
 549                             	.LBE35:
 550                             	.LBB36:
 551                             	.LBB23:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 552                             		.loc 2 825 9
 553                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 554 0223 7E 1B                   		neg r11
 555 0225 FD 60 DB                	shlr r13, r11
 556 0228 FD 74 2B 00             	adc #0, r11
 557 022c 7E 1B                   	neg r11
 558                             	
 559                             	 ; 0 "" 2
 560                             	.LVL61:
 561 022e EF 7A                   		mov.L	r7, r10
 562 0230 38 CC FE                		bra	.L7
 563                             	.LVL62:
 564                             	.L24:
 565                             	.LBE23:
 566                             	.LBE36:
 567                             	.LBB37:
 267:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         {
 568                             		.loc 1 267 9 is_stmt 0
 569 0233 66 0B                   		mov.L	#0, r11
 570 0235 66 06                   		mov.L	#0, r6
 571 0237 66 01                   		mov.L	#0, r1
 572 0239 38 A8 FE                		bra	.L4
 573                             	.LVL63:
 574                             	.L35:
 575                             	.LBE37:
 576                             	.LBE40:
 577                             	.LBE55:
 578                             	.LBB56:
 579                             	.LBB54:
 580                             	.LBB51:
 581                             	.LBB46:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 582                             		.loc 2 825 9 is_stmt 1
 583                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 584 023c 7E 15                   		neg r5
 585 023e FD 60 95                	shlr r9, r5
 586 0241 FD 74 25 00             	adc #0, r5
 587 0245 7E 15                   	neg r5
 588                             	
 589                             	 ; 0 "" 2
 590                             	.LVL64:
 591                             		.loc 2 839 5
 592                             	.LBE46:
 593                             	.LBE51:
 327:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****         res00 = MIN(res00, activation_max);
 594                             		.loc 1 327 9
 595 0247 2E 9F                   		bra	.L30
 596                             	.LVL65:
 597                             	.L23:
 598                             	.LBE54:
 599                             	.LBE56:
  65:../src/CMSIS/NN/Source/NNSupportFunctions/arm_nn_vec_mat_mult_t_svdf_s8.c ****     }
 600                             		.loc 1 65 16 is_stmt 0
 601 0249 FB 16 FF                		mov.L	#-1, r1
 602                             	.LVL66:
 603                             		.loc 1 337 1
 604 024c 3F 6D 22                		rtsd	#136, r6-r13
 605                             	.LFE82:
 657                             	.Letext0:
 658                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 659                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 660                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 661                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 662                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 663                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 664                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 665                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 666                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
