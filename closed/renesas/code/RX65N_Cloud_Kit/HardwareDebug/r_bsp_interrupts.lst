   1                             		.file	"r_bsp_interrupts.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.R_BSP_InterruptControl.constprop.2,"ax",@progbits
   6                             	_R_BSP_InterruptControl.constprop.2:
   7                             	.LFB20:
   8                             		.file 1 "../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c"
   1:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
   2:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * DISCLAIMER
   3:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * applicable laws, including copyright laws.
   6:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * this software. 
  14:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *
  15:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
  16:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  17:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  18:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * File Name    : r_bsp_interrupts.c
  19:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : This module allows for callbacks to be registered for certain interrupts. 
  20:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                And handle exception interrupts.
  21:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  22:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  23:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * History : DD.MM.YYYY Version  Description
  24:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 28.02.2019 1.00     First Release
  25:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 08.04.2019 1.01     Added process for Group IE0 interrupts.
  26:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Added process for EXNMI interrupts.
  27:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 26.07.2019 1.10     Modified comment of API function to Doxygen style.
  28:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Modified the following function for added function.
  29:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - R_BSP_InterruptControl
  30:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Added the following functions.
  31:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - bsp_fit_interrupts_control
  32:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - bsp_fit_interrupt_enable
  33:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               - bsp_fit_interrupt_disable
  34:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                               Fixed coding style.
  35:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 08.10.2019 1.11     Added process for software interrupt.
  36:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *         : 10.12.2019 1.12     Modified comment.
  37:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  38:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  39:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  40:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Includes   <System Includes> , "Project Includes"
  41:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  42:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #include "platform.h"
  43:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  44:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  45:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Macro definitions
  46:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  47:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_FLOATING_POINT
  48:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /* Defines CV, CO, CZ, CU, CX, and CE bits. */
  49:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #define BSP_PRV_FPU_CAUSE_FLAGS     (0x000000FC)
  50:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
  51:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  52:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  53:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Typedef definitions
  54:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  55:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  56:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  57:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Exported global variables (to be accessed by other files)
  58:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  59:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  60:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  61:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** Private global variables and functions
  62:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
  63:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /* This array holds callback functions. */
  64:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static void (* g_bsp_vectors[BSP_INT_SRC_TOTAL_ITEMS])(void * pdata);
  65:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  66:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_fit_interrupts_control (bool enable, bsp_int_ctrl_t * pdata);
  67:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  68:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
  69:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_gr_int_enable_disable (bsp_int_src_t vector, bool enable, uint32_t ipl);
  70:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT */
  71:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  72:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
  73:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptRequestEnable
  74:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
  75:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Enable the specified interrupt request.
  76:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Interrupt vector number.
  77:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details Enable the specified interrupt request. Calculate the corresponding IER [m].IEN [j] fro
  78:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * of the argument, and set "1" to that bit. The macro defined in iodefine.h can be used to the set
  79:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * argument "vector". A description example is shown in Example.
  80:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note When setting an immediate value for an argument "vector", the argument must be 0 to 255. D
  81:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * vector number of the reserved interrupt source to the argument.
  82:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
  83:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** void R_BSP_InterruptRequestEnable (uint32_t vector)
  84:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
  88:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  89:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the register number. (IER[m].IENj)(m = vector_number / 8) */
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ier_reg_num = vector >> 3;
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  92:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the bit number. (IERm.IEN[j])(j = vector_number % 8) */
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ien_bit_num = vector & 0x00000007;
  94:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  95:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     p_ier_addr = (uint8_t *)&ICU.IER[ier_reg_num].BYTE;
  97:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  98:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_BIT_SET(p_ier_addr, ien_bit_num);
 100:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 101:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 102:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 103:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptRequestDisable
 104:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 105:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Disable the specified interrupt request.
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Interrupt vector number.
 107:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details Disable the specified interrupt request. Calculate the corresponding IER [m].IEN [j] fr
 108:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * number of the argument, and clear "0" to that bit. The macro defined in iodefine.h can be used t
 109:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * the argument "vector". A description example is shown in Example.
 110:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note When setting an immediate value for an argument "vector", the argument must be 0 to 255. D
 111:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * vector number of the reserved interrupt source to the argument.
 112:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 113:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** void R_BSP_InterruptRequestDisable (uint32_t vector)
 114:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 118:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 119:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the register number. (IER[m].IENj)(m = vector_number / 8) */
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ier_reg_num = vector >> 3;
 121:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 122:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Calculate the bit number. (IERm.IEN[j])(j = vector_number % 8) */
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     ien_bit_num = vector & 0x00000007;
 124:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 125:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     p_ier_addr = (uint8_t *)&ICU.IER[ier_reg_num].BYTE;
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 128:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_BIT_CLEAR(p_ier_addr, ien_bit_num);
 130:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 131:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 132:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 133:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function Name: bsp_interrupt_open
 134:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Initialize callback function array.
 135:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : None
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : None
 137:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 138:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** void bsp_interrupt_open (void)
 139:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 140:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t i;
 141:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 142:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* WAIT_LOOP */
 143:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     for (i = 0; i < BSP_INT_SRC_TOTAL_ITEMS; i++)
 144:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 145:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         g_bsp_vectors[i] = FIT_NO_FUNC;
 147:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 148:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 149:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_SOFTWARE_CONFIGURABLE_INTERRUPT
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Initialize mapped interrupts. */
 151:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_mapped_interrupt_open();
 152:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 153:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 154:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if (defined(BSP_CFG_SWINT_UNIT1_ENABLE) && (BSP_CFG_SWINT_UNIT1_ENABLE == 1))
 155:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_SoftwareInterruptOpen(BSP_SWINT_UNIT1);
 156:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* (defined(BSP_CFG_SWINT_UNIT1_ENABLE) && (BSP_CFG_SWINT_UNIT1_ENABLE == 1)) */
 157:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if (defined(BSP_CFG_SWINT_UNIT2_ENABLE) && (BSP_CFG_SWINT_UNIT2_ENABLE == 1))
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_SoftwareInterruptOpen(BSP_SWINT_UNIT2);
 159:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* (defined(BSP_CFG_SWINT_UNIT2_ENABLE) && (BSP_CFG_SWINT_UNIT2_ENABLE == 1)) */
 160:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bsp_interrupt_open() */
 161:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 162:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 163:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptWrite
 164:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 165:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Registers a callback function for an interrupt.
 166:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Which interrupt to register a callback for.
 167:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] callback Pointer to function to call when interrupt occurs.
 168:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_SUCCESS Successful, callback has been registered.
 169:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_INVALID_ARG Invalid function address input, any previous function has been u
 170:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details This function registers a callback function for an interrupt. If FIT_NO_FUNC, NULL, or 
 171:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * function address is passed for the callback argument then any previously registered callbacks ar
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * If one of the interrupts that is handled by this code is triggered then the interrupt handler wi
 173:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * to see if a valid callback function is registered. If one is found then the callback function wi
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * If one is not found then the interrupt handler will clear the appropriate flag(s) and exit. If t
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * callback function registered and wishes to no longer handle the interrupt then the user should c
 176:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * again with FIT_NO_FUNC as the vector parameter.
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note Use of FIT_NO_FUNC is preferred over NULL since access to the address defined by FIT_NO_FU
 178:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * bus error which is easy for the user to catch. NULL typically resolves to 0 which is a valid add
 179:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 180:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** bsp_int_err_t R_BSP_InterruptWrite (bsp_int_src_t vector,  bsp_int_cb_t callback)
 181:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 182:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 184:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     err = BSP_INT_SUCCESS;
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Check for valid address. */
 187:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if (((uint32_t)callback == (uint32_t)NULL) || ((uint32_t)callback == (uint32_t)FIT_NO_FUNC))
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 189:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 190:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         g_bsp_vectors[vector] = FIT_NO_FUNC;
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 192:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 193:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         g_bsp_vectors[vector] = callback;
 195:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 196:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 198:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptWrite() */
 199:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 200:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptRead
 202:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 203:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Gets the callback for an interrupt if one is registered.
 204:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Which interrupt to read the callback for.
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[out] callback Pointer to where to store callback address.
 206:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_SUCCESS Successful, callback address has been returned.
 207:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_NO_REGISTERED_CALLBACK No valid callback has been registered for this interr
 208:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details This function returns the callback function address for an interrupt if one has been re
 209:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * callback function has not been registered then an error is returned and nothing is stored to the
 210:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 211:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** bsp_int_err_t R_BSP_InterruptRead (bsp_int_src_t vector, bsp_int_cb_t * callback)
 212:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 213:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 214:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     err = BSP_INT_SUCCESS;
 216:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 217:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Check for valid address. */
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if (((uint32_t)g_bsp_vectors[vector] == (uint32_t)NULL) || ((uint32_t)g_bsp_vectors[vector] == 
 219:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 220:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_NO_REGISTERED_CALLBACK;
 221:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 222:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 223:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 224:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         *callback = g_bsp_vectors[vector];
 225:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 226:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 227:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 228:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRead() */
 229:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 230:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 231:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Function Name: R_BSP_InterruptControl
 232:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  **************************************************************************************************
 233:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @brief Controls various interrupt operations.
 234:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] vector Which interrupt to control for.\n
 235:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * If the interrupt control commands is the BSP_INT_CMD_FIT_INTERRUPT_ENABLE or the BSP_INT_CMD_FIT
 236:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * commands, set BSP_INT_SRC_EMPTY to "vector" because no arguments are used.
 237:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in] cmd Interrupt control command.
 238:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @param[in,out] pdata Pointer to the argument for each interrupt control command. Typecasted to v
 239:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * defines of bsp_int_ctrl_t. \n
 240:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * Most of the interrupt control commands do not need the argument and take FIT_NO_PTR for 
 241:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * this parameter. If the interrupt control command is the BSP_INT_CMD_GROUP_INTERRUPT_ENABLE comma
 242:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * interrupt priority level for group interrupts as the argument. If the interrupt control command 
 243:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_FIT_INTERRUPT_DISABLE command, set the address of a variable for saving the current 
 244:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * priority level in the argument. If the interrupt control command is the BSP_INT_CMD_FIT_INTERRUP
 245:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * set the address of a variable used in the BSP_INT_CMD_FIT_INTERRUPT_DISABLE command.
 246:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_SUCCESS Successful.
 247:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_NO_REGISTERED_CALLBACK No valid callback has been registered for this interr
 248:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_INVALID_ARG The command passed is invalid.
 249:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_UNSUPPORTED This processing is not supported.
 250:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_GROUP_STILL_ENABLED Group interrupt request remains enabled.
 251:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @retval BSP_INT_ERR_INVALID_IPL Illegal IPL value input.
 252:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @details This function controls the interrupt callback function call and enabling/disabling inte
 253:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * error interrupt, floating-point exception, NMI pin interrupt, and group interrupts, and enabling
 254:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * interrupts by controlling the Processor Interrupt Priority Level. When BSP_INT_CMD_GROUP_INTERRU
 255:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * the interrupt control command, the interrupt request (IER) for group interrupts is enabled and a
 256:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * priority level is set. The interrupt priority level set must be higher than the current level. W
 257:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_GROUP_INTERRUPT_DISABLE is set as the interrupt control command, the interrupt reque
 258:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * interrupts is disabled. Note that the interrupt request (IER) for group interrupts cannot be dis
 259:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * all interrupt requests (GEN) caused by grouped interrupt sources are disabled. When 
 260:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_FIT_INTERRUPT_DISABLE is set as the interrupt control command, the current processor
 261:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * level (IPL) is saved to the address specified by pdata as an argument, and disables interrupts b
 262:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * IPL. The value of IPL to be set is the value of BSP_CFG_FIT_IPL_MAX. When BSP_INT_CMD_FIT_INTERR
 263:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * as the interrupt control command, the interrupt is enabled by setting the value stored in the ad
 264:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * pdata to IPL. These two commands are valid only in supervisor mode. When BSP_INT_CMD_FIT_INTERRU
 265:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * BSP_INT_CMD_FIT_INTERRUPT_ENABLE commands are executed in user mode, Controlling IPL is not exec
 266:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * code BSP_INT_ERR_UNSUPPORTED is returned.
 267:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * @note BSP_INT_CMD_FIT_INTERRUPT_DISABLE and BSP_INT_CMD_FIT_INTERRUPT_ENABLE commands can be use
 268:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * atomicity of critical sections. However, these commands are valid only in supervisor mode. When 
 269:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * executed in user mode, atomicity is not to secure.\n
 270:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  * See Section 5.15 in the application note for more information.
 271:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****  */
 272:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** bsp_int_err_t R_BSP_InterruptControl (bsp_int_src_t vector, bsp_int_cmd_t cmd, void * pdata)
   9                             		.loc 1 272 15
  10                             	.LVL0:
 273:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
  11                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
  12                             		.loc 1 275 5
 276:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     err = BSP_INT_SUCCESS;
  13                             		.loc 1 277 5
 278:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 279:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
 280:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* nothing */
 281:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else
 282:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* This code is only used to remove compiler info messages about these parameters not being use
 283:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     INTERNAL_NOT_USED(pdata);
 284:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 285:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     switch (cmd)
  14                             		.loc 1 286 5
 287:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 288:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_CALL_CALLBACK):
 289:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 290:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (((uint32_t)g_bsp_vectors[vector] != (uint32_t)NULL) && ((uint32_t)g_bsp_vectors[vec
  15                             		.loc 1 291 13
  16                             		.loc 1 291 41 is_stmt 0
  17 0000 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
  18 0006 FE 61 55                		mov.L	[r1,r5], r5
  19                             		.loc 1 291 16
  20 0009 FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
  21 0010 20 0E                   		beq	.L3
 272:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
  22                             		.loc 1 272 15
  23 0012 60 40                   		sub	#4, r0
  24                             	.LCFI0:
 292:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 293:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Fill in callback info. */
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 cb_args.vector = vector;
  25                             		.loc 1 294 17 is_stmt 1
  26                             		.loc 1 294 32 is_stmt 0
  27 0014 E3 01                   		mov.L	r1, [r0]
 295:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 g_bsp_vectors[vector](&cb_args);
  28                             		.loc 1 296 17 is_stmt 1
  29 0016 EF 01                   		mov.L	r0, r1
  30                             	.LVL1:
  31 0018 7F 15                   		jsr	r5
  32                             	.LVL2:
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  33                             		.loc 1 277 9 is_stmt 0
  34 001a 66 01                   		mov.L	#0, r1
 297:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 298:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 299:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 300:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_NO_REGISTERED_CALLBACK;
 301:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 302:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 303:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 304:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_INTERRUPT_ENABLE):
 305:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_interrupt_enable_disable(vector, true);
 306:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 307:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 308:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_INTERRUPT_DISABLE):
 309:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_interrupt_enable_disable(vector, false);
 310:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 311:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 312:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
 313:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_GROUP_INTERRUPT_ENABLE):
 314:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 315:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(((uint32_t)NULL != (uint32_t)pdata) && ((uint32_t)FIT_NO_FUNC != (uint32_t)pdata))
 317:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 318:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 319:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = bsp_gr_int_enable_disable(vector, true, ((bsp_int_ctrl_t *)pdata)->ipl);
 320:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 321:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 322:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 323:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  err = BSP_INT_ERR_INVALID_ARG;
 324:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 325:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 326:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 327:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_GROUP_INTERRUPT_DISABLE):
 328:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_gr_int_enable_disable(vector, false, 0);
 329:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 330:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 331:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 332:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_FIT_INTERRUPT_ENABLE):
 333:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 334:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_fit_interrupts_control(true, (bsp_int_ctrl_t *)pdata);
 336:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 337:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 338:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         case (BSP_INT_CMD_FIT_INTERRUPT_DISABLE):
 339:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 340:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 341:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = bsp_fit_interrupts_control(false, (bsp_int_ctrl_t *)pdata);
 342:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 343:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 344:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         default:
 345:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = BSP_INT_ERR_INVALID_ARG;
 346:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 347:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 348:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 350:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
  35                             		.loc 1 350 1
  36 001c 67 01                   		rtsd	#4
  37                             	.LVL3:
  38                             	.L3:
  39                             	.LCFI1:
 300:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
  40                             		.loc 1 300 21
  41 001e 66 11                   		mov.L	#1, r1
  42                             	.LVL4:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
  43                             		.loc 1 349 5 is_stmt 1
  44                             		.loc 1 350 1 is_stmt 0
  45 0020 02                      		rts
  46                             	.LFE20:
  48                             		.section	.text.R_BSP_InterruptRequestEnable,"ax",@progbits
  49                             		.global	_R_BSP_InterruptRequestEnable
  51                             	_R_BSP_InterruptRequestEnable:
  52                             	.LFB3:
  84:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
  53                             		.loc 1 84 1 is_stmt 1
  54                             	.LVL5:
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
  55                             		.loc 1 85 5
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
  56                             		.loc 1 86 5
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  57                             		.loc 1 87 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  58                             		.loc 1 90 5
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  59                             		.loc 1 93 5
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  60                             		.loc 1 96 5
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
  61                             		.loc 1 99 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  62                             		.loc 1 90 17 is_stmt 0
  63 0000 FD 83 15                		shlr	#3, r1, r5
  64                             	.LVL6:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
  65                             		.loc 1 99 5
  66 0003 66 72                   		mov.L	#7, r2
  67 0005 53 12                   		and	r1, r2
  68                             	.LVL7:
  69 0007 73 51 00 72 08          		add	#0x87200, r5, r1
  70                             	.LVL8:
  71 000c 04 00 00 00             		bra	_R_BSP_BitSet
  72                             	.LVL9:
  73                             	.LFE3:
  75                             		.section	.text.R_BSP_InterruptRequestDisable,"ax",@progbits
  76                             		.global	_R_BSP_InterruptRequestDisable
  78                             	_R_BSP_InterruptRequestDisable:
  79                             	.LFB4:
 114:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ier_reg_num;
  80                             		.loc 1 114 1 is_stmt 1
  81                             	.LVL10:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
  82                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
  83                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  84                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  85                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  86                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  87                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
  88                             		.loc 1 129 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
  89                             		.loc 1 120 17 is_stmt 0
  90 0000 FD 83 15                		shlr	#3, r1, r5
  91                             	.LVL11:
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
  92                             		.loc 1 129 5
  93 0003 66 72                   		mov.L	#7, r2
  94 0005 53 12                   		and	r1, r2
  95                             	.LVL12:
  96 0007 73 51 00 72 08          		add	#0x87200, r5, r1
  97                             	.LVL13:
  98 000c 04 00 00 00             		bra	_R_BSP_BitClear
  99                             	.LVL14:
 100                             	.LFE4:
 102                             		.section	.text.bsp_interrupt_open,"ax",@progbits
 103                             		.global	_bsp_interrupt_open
 105                             	_bsp_interrupt_open:
 106                             	.LFB5:
 139:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t i;
 107                             		.loc 1 139 1 is_stmt 1
 108 0000 7E A7                   		push.l	r7
 109                             	.LCFI2:
 140:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 110                             		.loc 1 140 5
 143:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 111                             		.loc 1 143 5
 112                             	.LVL15:
 113 0002 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 114                             	.LVL16:
 115                             		.balign 8,3,5
 116                             	.L12:
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 117                             		.loc 1 146 9 discriminator 3
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 118                             		.loc 1 146 26 is_stmt 0 discriminator 3
 119 0008 FB 72 00 00 00 10       		mov.L	#0x10000000, r7
 120 000e FD 22 57                		mov.L	r7, [r5+]
 143:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 121                             		.loc 1 143 5 discriminator 3
 122 0011 74 05 7C 01 00 00       		cmp	#.LANCHOR0+380, r5
 123 0017 21 F1                   		bne	.L12
 151:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 124                             		.loc 1 151 5 is_stmt 1
 125 0019 05 00 00 00             		bsr	_bsp_mapped_interrupt_open
 126                             	.LVL17:
 155:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* (defined(BSP_CFG_SWINT_UNIT1_ENABLE) && (BSP_CFG_SWINT_UNIT1_ENABLE == 1)) */
 127                             		.loc 1 155 5
 128 001d 66 01                   		mov.L	#0, r1
 129 001f 05 00 00 00             		bsr	_R_BSP_SoftwareInterruptOpen
 130                             	.LVL18:
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* (defined(BSP_CFG_SWINT_UNIT2_ENABLE) && (BSP_CFG_SWINT_UNIT2_ENABLE == 1)) */
 131                             		.loc 1 158 5
 132 0023 66 11                   		mov.L	#1, r1
 160:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 133                             		.loc 1 160 1 is_stmt 0
 134 0025 7E B7                   		pop	r7
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* (defined(BSP_CFG_SWINT_UNIT2_ENABLE) && (BSP_CFG_SWINT_UNIT2_ENABLE == 1)) */
 135                             		.loc 1 158 5
 136 0027 04 00 00 00             		bra	_R_BSP_SoftwareInterruptOpen
 137                             	.LVL19:
 138                             	.LFE5:
 140 002b 77 10 01 00 00          		.section	.text.R_BSP_InterruptWrite,"ax",@progbits
 141                             		.global	_R_BSP_InterruptWrite
 143                             	_R_BSP_InterruptWrite:
 144                             	.LFB6:
 181:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 145                             		.loc 1 181 1 is_stmt 1
 146                             	.LVL20:
 182:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 147                             		.loc 1 182 5
 184:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 148                             		.loc 1 184 5
 187:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 149                             		.loc 1 187 5
 190:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 150                             		.loc 1 190 31 is_stmt 0
 151 0000 FD 70 C2 FF FF FF EF    		tst	#-268435457, r2
 152 0007 FD 70 E2 00 00 00 10    		stz	#0x10000000, r2
 153                             	.LVL21:
 154 000e FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 155 0014 FE 21 52                		mov.L	r2, [r1,r5]
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptWrite() */
 156                             		.loc 1 197 5 is_stmt 1
 198:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 157                             		.loc 1 198 1 is_stmt 0
 158 0017 66 01                   		mov.L	#0, r1
 159                             	.LVL22:
 160 0019 02                      		rts
 161                             	.LFE6:
 163                             		.section	.text.R_BSP_InterruptRead,"ax",@progbits
 164                             		.global	_R_BSP_InterruptRead
 166                             	_R_BSP_InterruptRead:
 167                             	.LFB7:
 212:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err;
 168                             		.loc 1 212 1 is_stmt 1
 169                             	.LVL23:
 213:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 170                             		.loc 1 213 5
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 171                             		.loc 1 215 5
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 172                             		.loc 1 218 5
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 173                             		.loc 1 218 33 is_stmt 0
 174 0000 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 175 0006 FE 61 55                		mov.L	[r1,r5], r5
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 176                             		.loc 1 218 8
 177 0009 FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
 178 0010 16                      		beq	.L20
 224:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 179                             		.loc 1 224 9 is_stmt 1
 224:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 180                             		.loc 1 224 19 is_stmt 0
 181 0011 E3 25                   		mov.L	r5, [r2]
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 182                             		.loc 1 215 9
 183 0013 66 01                   		mov.L	#0, r1
 184                             	.LVL24:
 185 0015 02                      		rts
 186                             	.LVL25:
 187                             	.L20:
 220:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 188                             		.loc 1 220 13
 189 0016 66 11                   		mov.L	#1, r1
 190                             	.LVL26:
 227:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRead() */
 191                             		.loc 1 227 5 is_stmt 1
 228:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 192                             		.loc 1 228 1 is_stmt 0
 193 0018 02                      		rts
 194                             	.LFE7:
 196                             		.section	.text.R_BSP_InterruptControl,"ax",@progbits
 197                             		.global	_R_BSP_InterruptControl
 199                             	_R_BSP_InterruptControl:
 200                             	.LFB8:
 273:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
 201                             		.loc 1 273 1 is_stmt 1
 202                             	.LVL27:
 203 0000 6E 7A                   		pushm	r7-r10
 204                             	.LCFI3:
 205 0002 60 80                   		sub	#8, r0
 206                             	.LCFI4:
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 207                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 208                             		.loc 1 275 5
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 209                             		.loc 1 277 5
 210                             	.LVL28:
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 211                             		.loc 1 286 5
 273:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
 212                             		.loc 1 273 1 is_stmt 0
 213 0004 EF 17                   		mov.L	r1, r7
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 214                             		.loc 1 286 5
 215 0006 61 32                   		cmp	#3, r2
 216 0008 3A 82 00                		beq	.L22
 217 000b EF 25                   		mov.L	r2, r5
 218 000d 24 24                   		bgtu	.L23
 219 000f 61 12                   		cmp	#1, r2
 220 0011 20 61                   		beq	.L24
 221 0013 24 6A                   		bgtu	.L81
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 222                             		.loc 1 291 13 is_stmt 1
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 223                             		.loc 1 291 41 is_stmt 0
 224 0015 FB A2 00 00 00 00       		mov.L	#.LANCHOR0, r10
 225 001b FE 61 AA                		mov.L	[r1,r10], r10
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 226                             		.loc 1 291 16
 227 001e FD 70 CA FF FF FF EF    		tst	#-268435457, r10
 228 0025 20 49                   		beq	.L59
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 229                             		.loc 1 294 17 is_stmt 1
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 230                             		.loc 1 294 32 is_stmt 0
 231 0027 E3 01                   		mov.L	r1, [r0]
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 232                             		.loc 1 296 17 is_stmt 1
 233 0029 EF 01                   		mov.L	r0, r1
 234                             	.LVL29:
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 235                             		.loc 1 277 9 is_stmt 0
 236 002b EF 27                   		mov.L	r2, r7
 237                             	.LVL30:
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 238                             		.loc 1 296 17
 239 002d 7F 1A                   		jsr	r10
 240                             	.LVL31:
 241 002f 2E 3A                   		bra	.L21
 242                             	.LVL32:
 243                             	.L23:
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 244                             		.loc 1 286 5
 245 0031 61 52                   		cmp	#5, r2
 246 0033 3A CB 00                		beq	.L27
 247 0036 22 05 38 F2 00          		bltu	.L28
 248 003b 61 62                   		cmp	#6, r2
 249 003d 21 2A                   		bne	.L74
 341:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 250                             		.loc 1 341 13 is_stmt 1
 251                             	.LVL33:
 252                             	.LBB174:
 253                             	.LBB175:
 351:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 352:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 353:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function Name: bsp_fit_interrupts_control
 354:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : 
 355:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : enable -
 356:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Whether to enable or disable the interrupt.
 357:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                pdata -
 358:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Pointer to variable for saves ipl or restore ipl.
 359:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : BSP_INT_SUCCESS -
 360:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Interrupt enabled or disabled.
 361:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_INVALID_ARG -
 362:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Invalid argument input.
 363:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_INVALID_IPL -
 364:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Invalid IPL input.
 365:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_UNSUPPORTED -
 366:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    This processing is not supported. (Executed in user mode.)
 367:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 368:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_fit_interrupts_control (bool enable, bsp_int_ctrl_t * pdata)
 369:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 370:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t       err;
 254                             		.loc 1 370 5
 371:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t            pmode;
 255                             		.loc 1 371 5
 372:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bool                ret;
 256                             		.loc 1 372 5
 373:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t            ipl_value;
 257                             		.loc 1 373 5
 374:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 375:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
 376:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if(((uint32_t)NULL != (uint32_t)pdata) && ((uint32_t)FIT_NO_FUNC != (uint32_t)pdata))
 258                             		.loc 1 376 5
 259                             		.loc 1 376 7 is_stmt 0
 260 003f 61 03                   		cmp	#0, r3
 261 0041 20 26                   		beq	.L74
 262                             		.loc 1 376 44
 263 0043 74 03 00 00 00 10       		cmp	#0x10000000, r3
 264 0049 20 1E                   		beq	.L74
 377:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 378:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Read current processor mode. */
 379:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         pmode = (R_BSP_GET_PSW() & 0x00100000);
 265                             		.loc 1 379 9 is_stmt 1
 266                             		.loc 1 379 18 is_stmt 0
 267 004b FD 6A 07                		mvfc	psw, r7
 268                             	.LVL34:
 380:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 381:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Check current processor mode. */
 382:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (0 == pmode)
 269                             		.loc 1 382 9 is_stmt 1
 270                             		.loc 1 382 12 is_stmt 0
 271 004e 7D 47                   		btst	#20, r7
 272 0050 3B 1A 01                		bne	.L56
 273                             	.LVL35:
 274                             	.LBB176:
 275                             	.LBB177:
 383:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 384:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = BSP_INT_SUCCESS;
 276                             		.loc 1 384 13 is_stmt 1
 385:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 386:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (true == enable)
 277                             		.loc 1 386 13
 387:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 388:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ipl_value = pdata->ipl;
 389:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 390:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 391:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 392:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  /* Get the current Processor Interrupt Priority Level (IPL) and save IPL value. */
 393:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 pdata->ipl = R_BSP_CpuInterruptLevelRead();
 278                             		.loc 1 393 17
 279                             		.loc 1 393 30 is_stmt 0
 280 0053 A0 0B                   		mov.L	r3, 4[r0]
 281 0055 05 00 00 00             		bsr	_R_BSP_CpuInterruptLevelRead
 282                             	.LVL36:
 283                             		.loc 1 393 28
 284 0059 A8 0B                   		mov.L	4[r0], r3
 285 005b E3 31                   		mov.L	r1, [r3]
 394:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 395:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Set IPL to the maximum value to disable all interrupts,
 396:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  * so the scheduler can not be scheduled in critical region.
 397:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                  * Note: Please set this macro more than IPR for other FIT module interrupts. */
 398:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ipl_value = BSP_CFG_FIT_IPL_MAX;
 286                             		.loc 1 398 17 is_stmt 1
 287                             	.LVL37:
 399:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 400:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 401:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (pdata->ipl < BSP_CFG_FIT_IPL_MAX)
 288                             		.loc 1 401 13
 289                             		.loc 1 401 16 is_stmt 0
 290 005d 61 E1                   		cmp	#14, r1
 291 005f 24 05 38 46 01          		bleu	.L82
 292                             	.LVL38:
 293                             		.balign 8,3,1
 294                             	.L55:
 295                             	.LBE177:
 296                             	.LBE176:
 297                             	.LBE175:
 298                             	.LBE174:
 299                             	.LBB184:
 300                             	.LBB185:
 301                             	.LBB186:
 302                             	.LBB187:
 402:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 403:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ret = R_BSP_CpuInterruptLevelWrite(ipl_value);
 404:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 if (false == ret)
 405:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 {
 406:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                     err = BSP_INT_ERR_INVALID_IPL;
 303                             		.loc 1 406 21 is_stmt 1
 304                             		.loc 1 406 25 is_stmt 0
 305 0064 66 57                   		mov.L	#5, r7
 306 0066 0B                      		bra	.L21
 307                             	.LVL39:
 308                             	.L74:
 309                             	.LBE187:
 310                             	.LBE186:
 311                             	.LBE185:
 312                             	.LBE184:
 323:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 313                             		.loc 1 323 22
 314 0067 66 27                   		mov.L	#2, r7
 315                             	.LVL40:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 316                             		.loc 1 349 5 is_stmt 1
 317                             		.balign 8,3,1
 318                             	.L21:
 350:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 319                             		.loc 1 350 1 is_stmt 0
 320 0069 EF 71                   		mov.L	r7, r1
 321 006b 3F 7A 06                		rtsd	#24, r7-r10
 322                             	.LVL41:
 323                             	.L59:
 300:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 324                             		.loc 1 300 21
 325 006e 66 17                   		mov.L	#1, r7
 326 0070 2E F9                   		bra	.L21
 327                             	.L24:
 305:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 328                             		.loc 1 305 13 is_stmt 1
 305:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 329                             		.loc 1 305 19 is_stmt 0
 330 0072 05 00 00 00             		bsr	_bsp_interrupt_enable_disable
 331                             	.LVL42:
 332 0076 EF 17                   		mov.L	r1, r7
 333                             	.LVL43:
 306:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 334                             		.loc 1 306 13 is_stmt 1
 350:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 335                             		.loc 1 350 1 is_stmt 0
 336 0078 EF 71                   		mov.L	r7, r1
 337 007a 3F 7A 06                		rtsd	#24, r7-r10
 338                             	.LVL44:
 339                             	.L81:
 309:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 340                             		.loc 1 309 13 is_stmt 1
 309:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 341                             		.loc 1 309 19 is_stmt 0
 342 007d 66 02                   		mov	#0, r2
 343                             	.LVL45:
 344 007f 05 00 00 00             		bsr	_bsp_interrupt_enable_disable
 345                             	.LVL46:
 346 0083 EF 17                   		mov.L	r1, r7
 347                             	.LVL47:
 310:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 348                             		.loc 1 310 13 is_stmt 1
 350:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 349                             		.loc 1 350 1 is_stmt 0
 350 0085 EF 71                   		mov.L	r7, r1
 351 0087 3F 7A 06                		rtsd	#24, r7-r10
 352                             	.LVL48:
 353                             	.L22:
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 354                             		.loc 1 316 13 is_stmt 1
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 355                             		.loc 1 316 15 is_stmt 0
 356 008a 61 03                   		cmp	#0, r3
 357 008c 20 DB                   		beq	.L74
 316:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 358                             		.loc 1 316 52 discriminator 1
 359 008e 74 03 00 00 00 10       		cmp	#0x10000000, r3
 360 0094 20 D3                   		beq	.L74
 319:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 361                             		.loc 1 319 17 is_stmt 1
 319:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 362                             		.loc 1 319 23 is_stmt 0
 363 0096 EC 3A                   		mov.L	[r3], r10
 364                             	.LVL49:
 365                             	.LBB195:
 366                             	.LBB196:
 407:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 }
 408:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 409:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 410:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 411:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_INVALID_IPL;
 412:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 413:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 414:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 415:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 416:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             err = BSP_INT_ERR_UNSUPPORTED;
 417:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 418:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 419:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 420:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 421:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 422:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 423:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 424:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 425:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bsp_fit_interrupts_control() */
 426:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 427:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT
 428:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 429:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function Name: bsp_gr_int_enable_disable
 430:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Either enables or disables a group interrupt. If a group interrupt is called multi
 431:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                enabled then it will use the highest given IPL. A group interrupt will only be dis
 432:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                interrupt sources for that group are already disabled.
 433:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : vector -
 434:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    An interrupt source inside the group that is to be enabled/disabled.
 435:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                enable -
 436:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Whether to enable or disable the interrupt.
 437:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                ipl -
 438:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    If enabling a group interrupt, what IPL to use.
 439:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : BSP_INT_SUCCESS -
 440:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Interrupt enabled or disabled.
 441:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_INVALID_ARG -
 442:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Invalid IPL or vector
 443:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                BSP_INT_ERR_GROUP_STILL_ENABLED -
 444:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                    Not all group interrupts were disabled so group interrupt was not disabled.
 445:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 446:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** static bsp_int_err_t bsp_gr_int_enable_disable (bsp_int_src_t vector, bool enable, uint32_t ipl)
 447:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_err_t err = BSP_INT_SUCCESS;
 367                             		.loc 1 448 5 is_stmt 1
 449:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 450:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if BSP_CFG_PARAM_CHECKING_ENABLE == 1
 451:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If interrupt is going to be enabled, verify that IPL is valid. */
 452:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((true == enable) && ((BSP_MCU_IPL_MIN == ipl) || (ipl > BSP_MCU_IPL_MAX)))
 368                             		.loc 1 452 5
 369                             		.loc 1 452 55 is_stmt 0
 370 0098 71 A5 FF                		add	#-1, r10, r5
 371                             		.loc 1 452 26
 372 009b 61 E5                   		cmp	#14, r5
 373 009d 24 CA                   		bgtu	.L74
 453:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 454:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         return BSP_INT_ERR_INVALID_ARG;
 455:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 456:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 457:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 458:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((vector > BSP_INT_SRC_GR_INT_IE0_TOP) && (vector < BSP_INT_SRC_GR_INT_BE0_TOP))
 374                             		.loc 1 458 5 is_stmt 1
 459:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 460:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group IE0. */
 461:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_IE0
 462:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 463:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 464:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPIE0));
 465:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 466:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 467:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPIE0)  = 0;
 468:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 469:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 470:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPIE0) = (uint8_t)((ipl > IPR(ICU, GROUPIE0)) ? ipl : IPR(ICU, GROUPIE0));
 471:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPIE0));
 472:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 473:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 474:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 475:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 476:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENIE0.LONG)
 477:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 478:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPIE0));
 479:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 480:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 481:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPIE0) = 0;
 482:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 483:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 484:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 485:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 486:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 487:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 488:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_IE0 */
 489:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 490:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_IE0 */
 491:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BE0_TOP) && (vector < BSP_INT_SRC_GR_INT_BL0_TOP))
 375                             		.loc 1 492 10
 376                             		.loc 1 492 52 is_stmt 0
 377 009f 71 15 EF                		add	#-17, r1, r5
 378                             		.loc 1 492 13
 379 00a2 61 15                   		cmp	#1, r5
 380 00a4 24 05 38 1F 01          		bleu	.L83
 381                             	.LVL50:
 382                             	.LBB197:
 383                             	.LBB198:
 493:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 494:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BE0. */
 495:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BE0
 496:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 497:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 498:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBE0));
 499:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 500:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 501:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBE0)  = 0;
 502:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 503:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBE0) = (uint8_t)((ipl > IPR(ICU, GROUPBE0)) ? ipl : IPR(ICU, GROUPBE0));
 505:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 506:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 507:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 508:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 509:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 510:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBE0.LONG)
 511:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 512:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBE0));
 513:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 514:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 515:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBE0) = 0;
 516:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 517:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 518:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 519:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 520:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 521:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 522:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BE0 */
 523:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 524:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BE0 */
 525:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 526:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BL0_TOP) && (vector < BSP_INT_SRC_GR_INT_BL1_TOP))
 384                             		.loc 1 526 10 is_stmt 1
 385                             		.loc 1 526 52 is_stmt 0
 386 00a9 71 15 EC                		add	#-20, r1, r5
 387                             		.loc 1 526 13
 388 00ac 75 55 1C                		cmp	#28, r5
 389 00af 25 05 38 9A 01          		bgtu	.L34
 527:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 528:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BL0. */
 529:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BL0
 530:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 390                             		.loc 1 530 9 is_stmt 1
 531:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 532:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL0));
 391                             		.loc 1 532 13
 392                             	.LVL51:
 393                             	.LBB199:
 394                             	.LBB200:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 395                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 396                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 397                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 398                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 399                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 400                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 401                             		.loc 1 129 5
 402 00b4 66 62                   		mov.L	#6, r2
 403                             	.LVL52:
 404 00b6 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 405                             	.LVL53:
 406 00bb 05 00 00 00             		bsr	_R_BSP_BitClear
 407                             	.LVL54:
 408                             	.LBE200:
 409                             	.LBE199:
 533:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 534:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 535:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBL0)  = 0;
 410                             		.loc 1 535 13
 411                             		.loc 1 535 32 is_stmt 0
 412 00bf FB 7E 00 70 08          		mov.L	#0x87000, r7
 413                             	.LVL55:
 414 00c4 F1 78 6E                		bclr	#0, 110[r7].B
 536:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 537:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 538:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBL0) = (uint8_t)((ipl > IPR(ICU, GROUPBL0)) ? ipl : IPR(ICU, GROUPBL0));
 415                             		.loc 1 538 13 is_stmt 1
 416                             		.loc 1 538 51 is_stmt 0
 417 00c7 CE 75 6E 03             		mov.B	878[r7], r5
 418 00cb 64 F5                   		and #15, r5
 419                             		.loc 1 538 34
 420 00cd 47 5A                   		cmp	r5, r10
 421 00cf 24 05 38 D6 01          		bleu	.L35
 422 00d4 66 F5                   		mov.L	#15, r5
 423 00d6 53 A5                   		and	r10, r5
 424                             		.balign 8,3,4
 425                             	.L36:
 426                             		.loc 1 538 32
 427 00d8 FB 4E 00 70 08          		mov.L	#0x87000, r4
 428 00dd 66 FA                   		mov.L	#15, r10
 429                             	.LVL56:
 430 00df 53 5A                   		and	r5, r10
 431                             	.LBB201:
 432                             	.LBB202:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 433                             		.loc 1 99 5
 434 00e1 66 62                   		mov.L	#6, r2
 435                             	.LBE202:
 436                             	.LBE201:
 437                             		.loc 1 538 32
 438 00e3 CE 45 6E 03             		mov.B	878[r4], r5
 439                             	.LBB205:
 440                             	.LBB203:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 441                             		.loc 1 99 5
 442 00e7 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 443                             	.LBE203:
 444                             	.LBE205:
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 445                             		.loc 1 448 19
 446 00ec 66 07                   		mov.L	#0, r7
 447                             		.loc 1 538 32
 448 00ee 75 25 F0                		and #-16, r5
 449 00f1 57 A5                   		or	r10, r5
 450 00f3 CB 45 6E 03             		mov.B	r5, 878[r4]
 539:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 451                             		.loc 1 539 13 is_stmt 1
 452                             	.LVL57:
 453                             	.LBB206:
 454                             	.LBB204:
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 455                             		.loc 1 85 5
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 456                             		.loc 1 86 5
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 457                             		.loc 1 87 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 458                             		.loc 1 90 5
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 459                             		.loc 1 93 5
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 460                             		.loc 1 96 5
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 461                             		.loc 1 99 5
 462 00f7 05 00 00 00             		bsr	_R_BSP_BitSet
 463                             	.LVL58:
 464 00fb 38 6E FF                		bra	.L21
 465                             	.LVL59:
 466                             	.L27:
 467                             	.LBE204:
 468                             	.LBE206:
 469                             	.LBE198:
 470                             	.LBE197:
 471                             	.LBE196:
 472                             	.LBE195:
 335:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 473                             		.loc 1 335 13
 474                             	.LBB256:
 475                             	.LBB192:
 370:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t            pmode;
 476                             		.loc 1 370 5
 371:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bool                ret;
 477                             		.loc 1 371 5
 372:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t            ipl_value;
 478                             		.loc 1 372 5
 373:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 479                             		.loc 1 373 5
 376:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 480                             		.loc 1 376 5
 376:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 481                             		.loc 1 376 7 is_stmt 0
 482 00fe 61 03                   		cmp	#0, r3
 483 0100 3A 67 FF                		beq	.L74
 376:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 484                             		.loc 1 376 44
 485 0103 74 03 00 00 00 10       		cmp	#0x10000000, r3
 486 0109 3A 5E FF                		beq	.L74
 379:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 487                             		.loc 1 379 9 is_stmt 1
 379:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 488                             		.loc 1 379 18 is_stmt 0
 489 010c FD 6A 07                		mvfc	psw, r7
 490                             	.LVL60:
 382:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 491                             		.loc 1 382 9 is_stmt 1
 382:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 492                             		.loc 1 382 12 is_stmt 0
 493 010f 7D 47                   		btst	#20, r7
 494 0111 21 59                   		bne	.L56
 495                             	.LVL61:
 496                             	.LBB190:
 497                             	.LBB188:
 384:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 498                             		.loc 1 384 13 is_stmt 1
 386:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 499                             		.loc 1 386 13
 388:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 500                             		.loc 1 388 17
 388:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 501                             		.loc 1 388 27 is_stmt 0
 502 0113 EC 31                   		mov.L	[r3], r1
 503                             	.LVL62:
 401:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 504                             		.loc 1 401 13 is_stmt 1
 401:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 505                             		.loc 1 401 16 is_stmt 0
 506 0115 61 E1                   		cmp	#14, r1
 507 0117 25 05 38 4B FF          		bgtu	.L55
 508                             	.LVL63:
 509                             		.balign 8,3,3
 510                             	.L80:
 511                             	.LBE188:
 512                             	.LBE190:
 513                             	.LBE192:
 514                             	.LBE256:
 515                             	.LBB257:
 516                             	.LBB182:
 517                             	.LBB180:
 518                             	.LBB178:
 403:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 if (false == ret)
 519                             		.loc 1 403 23
 520 011c 05 00 00 00             		bsr	_R_BSP_CpuInterruptLevelWrite
 521                             	.LVL64:
 404:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 {
 522                             		.loc 1 404 17 is_stmt 1
 404:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 {
 523                             		.loc 1 404 20 is_stmt 0
 524 0120 61 01                   		cmp	#0, r1
 525 0122 3A 42 FF                		beq	.L55
 526                             	.LBE178:
 527                             	.LBE180:
 528                             	.LBE182:
 529                             	.LBE257:
 530                             	.LBB258:
 531                             	.LBB193:
 532                             	.LBB191:
 533                             	.LBB189:
 384:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 534                             		.loc 1 384 17
 535 0125 66 07                   		mov.L	#0, r7
 536 0127 38 42 FF                		bra	.L21
 537                             	.LVL65:
 538                             	.L28:
 539                             	.LBE189:
 540                             	.LBE191:
 541                             	.LBE193:
 542                             	.LBE258:
 328:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             break;
 543                             		.loc 1 328 13 is_stmt 1
 544                             	.LBB259:
 545                             	.LBB260:
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 546                             		.loc 1 448 5
 452:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 547                             		.loc 1 452 5
 458:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 548                             		.loc 1 458 5
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 549                             		.loc 1 492 10
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 550                             		.loc 1 492 52 is_stmt 0
 551 012a 71 1A EF                		add	#-17, r1, r10
 492:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 552                             		.loc 1 492 13
 553 012d 61 1A                   		cmp	#1, r10
 554 012f 25 40                   		bleu	.L84
 555                             	.LVL66:
 556                             	.LBB261:
 557                             	.LBB262:
 526:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 558                             		.loc 1 526 10 is_stmt 1
 526:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 559                             		.loc 1 526 52 is_stmt 0
 560 0131 71 1A EC                		add	#-20, r1, r10
 526:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 561                             		.loc 1 526 13
 562 0134 75 5A 1C                		cmp	#28, r10
 563 0137 25 4A                   		bleu	.L85
 540:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 541:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 542:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 543:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 544:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBL0.LONG)
 545:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 546:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL0));
 547:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 548:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 549:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBL0) = 0;
 550:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 551:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 552:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 553:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 554:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 555:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 556:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BL0 */
 557:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 558:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BL0 */
 559:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 560:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BL1_TOP) && (vector < BSP_INT_SRC_GR_INT_BL2_TOP))
 564                             		.loc 1 560 10 is_stmt 1
 565                             		.loc 1 560 52 is_stmt 0
 566 0139 71 1A CE                		add	#-50, r1, r10
 567                             		.loc 1 560 13
 568 013c 75 5A 17                		cmp	#23, r10
 569 013f 25 05 38 CE 00          		bgtu	.L50
 561:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 562:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BL1. */
 563:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BL1
 564:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 570                             		.loc 1 564 9 is_stmt 1
 565:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 566:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL1));
 567:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 568:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 569:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBL1)  = 0;
 570:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 571:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBL1) = (uint8_t)((ipl > IPR(ICU, GROUPBL1)) ? ipl : IPR(ICU, GROUPBL1));
 573:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 574:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 575:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 576:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 577:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 578:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBL1.LONG)
 571                             		.loc 1 578 13
 572                             		.loc 1 578 32 is_stmt 0
 573 0144 FB AE 00 70 08          		mov.L	#0x87000, r10
 574 0149 EE A7 9D 01             		mov.L	1652[r10], r7
 575                             		.loc 1 578 16
 576 014d 61 07                   		cmp	#0, r7
 577 014f 21 2D                   		bne	.L70
 579:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 580:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL1));
 578                             		.loc 1 580 17 is_stmt 1
 579                             	.LVL67:
 580                             	.LBB263:
 581                             	.LBB264:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 582                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 583                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 584                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 585                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 586                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 587                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 588                             		.loc 1 129 5
 589 0151 66 72                   		mov.L	#7, r2
 590                             	.LVL68:
 591 0153 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 592                             	.LVL69:
 593 0158 05 00 00 00             		bsr	_R_BSP_BitClear
 594                             	.LVL70:
 595                             	.LBE264:
 596                             	.LBE263:
 581:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 582:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 583:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBL1) = 0;
 597                             		.loc 1 583 17
 598                             		.loc 1 583 36 is_stmt 0
 599 015c CE A5 6F 03             		mov.B	879[r10], r5
 600 0160 75 25 F0                		and #-16, r5
 601 0163 CB A5 6F 03             		mov.B	r5, 879[r10]
 602 0167 38 02 FF                		bra	.L21
 603                             	.LVL71:
 604                             	.L56:
 605                             	.LBE262:
 606                             	.LBE261:
 607                             	.LBE260:
 608                             	.LBE259:
 609                             	.LBB285:
 610                             	.LBB194:
 416:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 611                             		.loc 1 416 17
 612 016a 66 37                   		mov.L	#3, r7
 613 016c 38 FD FE                		bra	.L21
 614                             	.LVL72:
 615                             	.L84:
 616                             	.LBE194:
 617                             	.LBE285:
 618                             	.LBB286:
 619                             	.LBB281:
 496:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 620                             		.loc 1 496 9 is_stmt 1
 510:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 621                             		.loc 1 510 13
 510:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 622                             		.loc 1 510 32 is_stmt 0
 623 016f FB AE 00 70 08          		mov.L	#0x87000, r10
 624 0174 EE A7 90 01             		mov.L	1600[r10], r7
 510:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 625                             		.loc 1 510 16
 626 0178 61 07                   		cmp	#0, r7
 627 017a 20 32                   		beq	.L86
 628                             		.balign 8,3,1
 629                             	.L70:
 519:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 630                             		.loc 1 519 21
 631 017c EF 57                   		mov.L	r5, r7
 632 017e 38 EB FE                		bra	.L21
 633                             	.LVL73:
 634                             	.L85:
 635                             	.LBB276:
 636                             	.LBB273:
 530:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 637                             		.loc 1 530 9 is_stmt 1
 544:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 638                             		.loc 1 544 13
 544:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 639                             		.loc 1 544 32 is_stmt 0
 640 0181 FB AE 00 70 08          		mov.L	#0x87000, r10
 641 0186 EE A7 9C 01             		mov.L	1648[r10], r7
 544:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 642                             		.loc 1 544 16
 643 018a 61 07                   		cmp	#0, r7
 644 018c 21 F0                   		bne	.L70
 546:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 645                             		.loc 1 546 17 is_stmt 1
 646                             	.LVL74:
 647                             	.LBB265:
 648                             	.LBB266:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 649                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 650                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 651                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 652                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 653                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 654                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 655                             		.loc 1 129 5
 656 018e 66 62                   		mov.L	#6, r2
 657                             	.LVL75:
 658 0190 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 659                             	.LVL76:
 660 0195 05 00 00 00             		bsr	_R_BSP_BitClear
 661                             	.LVL77:
 662                             	.LBE266:
 663                             	.LBE265:
 549:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 664                             		.loc 1 549 17
 549:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 665                             		.loc 1 549 36 is_stmt 0
 666 0199 CE A5 6E 03             		mov.B	878[r10], r5
 667 019d 75 25 F0                		and #-16, r5
 668 01a0 CB A5 6E 03             		mov.B	r5, 878[r10]
 669 01a4 38 C5 FE                		bra	.L21
 670                             	.LVL78:
 671                             	.L82:
 672                             	.LBE273:
 673                             	.LBE276:
 674                             	.LBE281:
 675                             	.LBE286:
 676                             	.LBB287:
 677                             	.LBB183:
 678                             	.LBB181:
 679                             	.LBB179:
 403:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 if (false == ret)
 680                             		.loc 1 403 17 is_stmt 1
 403:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 if (false == ret)
 681                             		.loc 1 403 23 is_stmt 0
 682 01a7 66 F1                   		mov.L	#15, r1
 683 01a9 38 73 FF                		bra	.L80
 684                             	.LVL79:
 685                             	.L86:
 686                             	.LBE179:
 687                             	.LBE181:
 688                             	.LBE183:
 689                             	.LBE287:
 690                             	.LBB288:
 691                             	.LBB282:
 512:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 692                             		.loc 1 512 17 is_stmt 1
 693                             	.LBB277:
 694                             	.LBB278:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 695                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 696                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 697                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 698                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 699                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 700                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 701                             		.loc 1 129 5
 702 01ac 66 22                   		mov.L	#2, r2
 703                             	.LVL80:
 704 01ae FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 705                             	.LVL81:
 706 01b3 05 00 00 00             		bsr	_R_BSP_BitClear
 707                             	.LVL82:
 708                             	.LBE278:
 709                             	.LBE277:
 515:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 710                             		.loc 1 515 17
 515:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 711                             		.loc 1 515 36 is_stmt 0
 712 01b7 CE A5 6A 03             		mov.B	874[r10], r5
 713 01bb 75 25 F0                		and #-16, r5
 714 01be CB A5 6A 03             		mov.B	r5, 874[r10]
 715 01c2 38 A7 FE                		bra	.L21
 716                             	.LVL83:
 717                             	.L83:
 718                             	.LBE282:
 719                             	.LBE288:
 720                             	.LBB289:
 721                             	.LBB253:
 496:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 722                             		.loc 1 496 9 is_stmt 1
 498:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 723                             		.loc 1 498 13
 724                             	.LBB242:
 725                             	.LBB243:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 726                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 727                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 728                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 729                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 730                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 731                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 732                             		.loc 1 129 5
 733 01c5 66 22                   		mov.L	#2, r2
 734                             	.LVL84:
 735 01c7 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 736                             	.LVL85:
 737 01cc 05 00 00 00             		bsr	_R_BSP_BitClear
 738                             	.LVL86:
 739                             	.LBE243:
 740                             	.LBE242:
 501:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 741                             		.loc 1 501 13
 501:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 742                             		.loc 1 501 32 is_stmt 0
 743 01d0 FB 7E 00 70 08          		mov.L	#0x87000, r7
 744                             	.LVL87:
 745 01d5 F1 78 6A                		bclr	#0, 106[r7].B
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 746                             		.loc 1 504 13 is_stmt 1
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 747                             		.loc 1 504 51 is_stmt 0
 748 01d8 CE 75 6A 03             		mov.B	874[r7], r5
 749 01dc 64 F5                   		and #15, r5
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 750                             		.loc 1 504 34
 751 01de 47 5A                   		cmp	r5, r10
 752 01e0 24 05 38 BC 00          		bleu	.L32
 753 01e5 66 F5                   		mov.L	#15, r5
 754 01e7 53 A5                   		and	r10, r5
 755                             		.balign 8,3,4
 756                             	.L33:
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 757                             		.loc 1 504 32
 758 01e9 FB 4E 00 70 08          		mov.L	#0x87000, r4
 759 01ee 66 FA                   		mov.L	#15, r10
 760                             	.LVL88:
 761 01f0 53 5A                   		and	r5, r10
 762                             	.LBB244:
 763                             	.LBB245:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 764                             		.loc 1 99 5
 765 01f2 66 22                   		mov.L	#2, r2
 766                             	.LBE245:
 767                             	.LBE244:
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 768                             		.loc 1 504 32
 769 01f4 CE 45 6A 03             		mov.B	874[r4], r5
 770                             	.LBB248:
 771                             	.LBB246:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 772                             		.loc 1 99 5
 773 01f8 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 774                             	.LBE246:
 775                             	.LBE248:
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 776                             		.loc 1 448 19
 777 01fd 66 07                   		mov.L	#0, r7
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 778                             		.loc 1 504 32
 779 01ff 75 25 F0                		and #-16, r5
 780 0202 57 A5                   		or	r10, r5
 781 0204 CB 45 6A 03             		mov.B	r5, 874[r4]
 505:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 782                             		.loc 1 505 13 is_stmt 1
 783                             	.LVL89:
 784                             	.LBB249:
 785                             	.LBB247:
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 786                             		.loc 1 85 5
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 787                             		.loc 1 86 5
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 788                             		.loc 1 87 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 789                             		.loc 1 90 5
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 790                             		.loc 1 93 5
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 791                             		.loc 1 96 5
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 792                             		.loc 1 99 5
 793 0208 05 00 00 00             		bsr	_R_BSP_BitSet
 794                             	.LVL90:
 795 020c 38 5D FE                		bra	.L21
 796                             	.LVL91:
 797                             	.L50:
 798                             	.LBE247:
 799                             	.LBE249:
 800                             	.LBE253:
 801                             	.LBE289:
 802                             	.LBB290:
 803                             	.LBB283:
 804                             	.LBB279:
 805                             	.LBB274:
 584:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 585:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 586:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 587:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 588:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 589:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 590:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BL1 */
 591:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 592:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BL1 */
 593:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 594:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_BL2_TOP) && (vector < BSP_INT_SRC_GR_INT_AL0_TOP))
 806                             		.loc 1 594 10
 807                             		.loc 1 594 13 is_stmt 0
 808 020f 75 51 4B                		cmp	#0x4b, r1
 809 0212 3A FC 00                		beq	.L87
 595:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 596:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group BL2. */
 597:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_BL2
 598:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 599:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 600:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL2));
 601:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 602:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 603:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPBL2)  = 0;
 604:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 605:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPBL2) = (uint8_t)((ipl > IPR(ICU, GROUPBL2)) ? ipl : IPR(ICU, GROUPBL2));
 607:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 608:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 609:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 610:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 611:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 612:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENBL2.LONG)
 613:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 614:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPBL2));
 615:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 616:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 617:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPBL2) = 0;
 618:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 619:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 620:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 621:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 622:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 623:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 624:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_BL2 */
 625:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 626:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_BL2 */
 627:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 628:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_AL0_TOP) && (vector < BSP_INT_SRC_GR_INT_AL1_TOP))
 810                             		.loc 1 628 10 is_stmt 1
 811                             		.loc 1 628 52 is_stmt 0
 812 0215 71 1A B3                		add	#-77, r1, r10
 813                             		.loc 1 628 13
 814 0218 61 9A                   		cmp	#9, r10
 815 021a 25 05 38 19 01          		bgtu	.L52
 629:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 630:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group AL0. */
 631:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_AL0
 632:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 816                             		.loc 1 632 9 is_stmt 1
 633:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 634:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL0));
 635:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 636:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 637:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPAL0)  = 0;
 638:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 639:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPAL0) = (uint8_t)((ipl > IPR(ICU, GROUPAL0)) ? ipl : IPR(ICU, GROUPAL0));
 641:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 642:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 643:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 644:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 645:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 646:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENAL0.LONG)
 817                             		.loc 1 646 13
 818                             		.loc 1 646 32 is_stmt 0
 819 021f FB 7E 00 70 08          		mov.L	#0x87000, r7
 820 0224 EE 77 1C 02             		mov.L	2160[r7], r7
 821                             		.loc 1 646 16
 822 0228 61 07                   		cmp	#0, r7
 823 022a 3B 52 FF                		bne	.L70
 647:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 648:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL0));
 824                             		.loc 1 648 17 is_stmt 1
 825                             	.LVL92:
 826                             	.LBB267:
 827                             	.LBB268:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 828                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 829                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 830                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 831                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 832                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 833                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 834                             		.loc 1 129 5
 835 022d 66 02                   		mov.L	#0, r2
 836                             	.LVL93:
 837 022f FB 1E 0E 72 08          		mov.L	#0x8720e, r1
 838                             	.LVL94:
 839 0234 05 00 00 00             		bsr	_R_BSP_BitClear
 840                             	.LVL95:
 841                             	.LBE268:
 842                             	.LBE267:
 649:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 650:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 651:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPAL0) = 0;
 843                             		.loc 1 651 17
 844                             		.loc 1 651 36 is_stmt 0
 845 0238 FB AE 00 70 08          		mov.L	#0x87000, r10
 846                             	.LVL96:
 847 023d CE A5 70 03             		mov.B	880[r10], r5
 848 0241 75 25 F0                		and #-16, r5
 849 0244 CB A5 70 03             		mov.B	r5, 880[r10]
 850 0248 38 21 FE                		bra	.L21
 851                             	.LVL97:
 852                             	.L34:
 853                             	.LBE274:
 854                             	.LBE279:
 855                             	.LBE283:
 856                             	.LBE290:
 857                             	.LBB291:
 858                             	.LBB254:
 859                             	.LBB250:
 860                             	.LBB239:
 560:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 861                             		.loc 1 560 10 is_stmt 1
 560:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 862                             		.loc 1 560 52 is_stmt 0
 863 024b 71 15 CE                		add	#-50, r1, r5
 560:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 864                             		.loc 1 560 13
 865 024e 75 55 17                		cmp	#23, r5
 866 0251 24 5F                   		bgtu	.L37
 564:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 867                             		.loc 1 564 9 is_stmt 1
 566:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 868                             		.loc 1 566 13
 869                             	.LVL98:
 870                             	.LBB207:
 871                             	.LBB208:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 872                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 873                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 874                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 875                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 876                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 877                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 878                             		.loc 1 129 5
 879 0253 66 72                   		mov.L	#7, r2
 880                             	.LVL99:
 881 0255 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 882                             	.LVL100:
 883 025a 05 00 00 00             		bsr	_R_BSP_BitClear
 884                             	.LVL101:
 885                             	.LBE208:
 886                             	.LBE207:
 569:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 887                             		.loc 1 569 13
 569:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 888                             		.loc 1 569 32 is_stmt 0
 889 025e FB 7E 00 70 08          		mov.L	#0x87000, r7
 890                             	.LVL102:
 891 0263 F1 78 6F                		bclr	#0, 111[r7].B
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 892                             		.loc 1 572 13 is_stmt 1
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 893                             		.loc 1 572 51 is_stmt 0
 894 0266 CE 75 6F 03             		mov.B	879[r7], r5
 895 026a 64 F5                   		and #15, r5
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 896                             		.loc 1 572 34
 897 026c 47 5A                   		cmp	r5, r10
 898 026e 24 05 38 F6 00          		bleu	.L38
 899 0273 66 F4                   		mov.L	#15, r4
 900 0275 53 A4                   		and	r10, r4
 901 0277 03                      		.balign 8,3,4
 902                             	.L39:
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 903                             		.loc 1 572 32
 904 0278 FB 3E 00 70 08          		mov.L	#0x87000, r3
 905 027d 64 F4                   		and #15, r4
 906                             	.LBB209:
 907                             	.LBB210:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 908                             		.loc 1 99 5
 909 027f 66 72                   		mov.L	#7, r2
 910                             	.LBE210:
 911                             	.LBE209:
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 912                             		.loc 1 572 32
 913 0281 CE 35 6F 03             		mov.B	879[r3], r5
 914                             	.LBB213:
 915                             	.LBB211:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 916                             		.loc 1 99 5
 917 0285 FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 918                             	.LBE211:
 919                             	.LBE213:
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 920                             		.loc 1 448 19
 921 028a 66 07                   		mov.L	#0, r7
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 922                             		.loc 1 572 32
 923 028c FB A6 F0                		mov.L	#-16, r10
 924                             	.LVL103:
 925 028f 53 5A                   		and	r5, r10
 926 0291 57 4A                   		or	r4, r10
 927 0293 CB 3A 6F 03             		mov.B	r10, 879[r3]
 573:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 928                             		.loc 1 573 13 is_stmt 1
 929                             	.LVL104:
 930                             	.LBB214:
 931                             	.LBB212:
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 932                             		.loc 1 85 5
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 933                             		.loc 1 86 5
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 934                             		.loc 1 87 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 935                             		.loc 1 90 5
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 936                             		.loc 1 93 5
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 937                             		.loc 1 96 5
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 938                             		.loc 1 99 5
 939 0297 05 00 00 00             		bsr	_R_BSP_BitSet
 940                             	.LVL105:
 941 029b 38 CE FD                		bra	.L21
 942                             	.LVL106:
 943                             	.L32:
 944                             	.LBE212:
 945                             	.LBE214:
 946                             	.LBE239:
 947                             	.LBE250:
 504:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBE0));
 948                             		.loc 1 504 34 is_stmt 0
 949 029e CE 75 6A 03             		mov.B	874[r7], r5
 950 02a2 64 F5                   		and #15, r5
 951 02a4 38 45 FF                		bra	.L33
 952                             	.LVL107:
 953                             	.L35:
 954                             	.LBB251:
 955                             	.LBB240:
 538:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL0));
 956                             		.loc 1 538 34
 957 02a7 CE 75 6E 03             		mov.B	878[r7], r5
 958 02ab 64 F5                   		and #15, r5
 959 02ad 38 2B FE                		bra	.L36
 960                             	.LVL108:
 961                             	.L37:
 594:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 962                             		.loc 1 594 10 is_stmt 1
 594:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 963                             		.loc 1 594 13 is_stmt 0
 964 02b0 75 51 4B                		cmp	#0x4b, r1
 965 02b3 3A BC 00                		beq	.L88
 628:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 966                             		.loc 1 628 10 is_stmt 1
 628:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 967                             		.loc 1 628 52 is_stmt 0
 968 02b6 71 15 B3                		add	#-77, r1, r5
 628:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 969                             		.loc 1 628 13
 970 02b9 61 95                   		cmp	#9, r5
 971 02bb 25 05 38 F9 00          		bgtu	.L43
 632:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 972                             		.loc 1 632 9 is_stmt 1
 634:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 973                             		.loc 1 634 13
 974                             	.LVL109:
 975                             	.LBB215:
 976                             	.LBB216:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 977                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 978                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 979                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 980                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 981                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 982                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 983                             		.loc 1 129 5
 984 02c0 66 02                   		mov.L	#0, r2
 985                             	.LVL110:
 986 02c2 FB 1E 0E 72 08          		mov.L	#0x8720e, r1
 987                             	.LVL111:
 988 02c7 05 00 00 00             		bsr	_R_BSP_BitClear
 989                             	.LVL112:
 990                             	.LBE216:
 991                             	.LBE215:
 637:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 992                             		.loc 1 637 13
 637:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 993                             		.loc 1 637 32 is_stmt 0
 994 02cb FB 7E 00 70 08          		mov.L	#0x87000, r7
 995                             	.LVL113:
 996 02d0 F1 78 70                		bclr	#0, 112[r7].B
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 997                             		.loc 1 640 13 is_stmt 1
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 998                             		.loc 1 640 51 is_stmt 0
 999 02d3 CE 75 70 03             		mov.B	880[r7], r5
 1000 02d7 64 F5                   		and #15, r5
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 1001                             		.loc 1 640 34
 1002 02d9 47 5A                   		cmp	r5, r10
 1003 02db 24 05 38 32 01          		bleu	.L44
 1004 02e0 66 F4                   		mov.L	#15, r4
 1005 02e2 53 A4                   		and	r10, r4
 1006 02e4 76 10 01 00             		.balign 8,3,4
 1007                             	.L45:
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 1008                             		.loc 1 640 32
 1009 02e8 FB 3E 00 70 08          		mov.L	#0x87000, r3
 1010 02ed 64 F4                   		and #15, r4
 1011                             	.LBB217:
 1012                             	.LBB218:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1013                             		.loc 1 99 5
 1014 02ef 66 02                   		mov.L	#0, r2
 1015                             	.LBE218:
 1016                             	.LBE217:
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 1017                             		.loc 1 640 32
 1018 02f1 CE 35 70 03             		mov.B	880[r3], r5
 1019                             	.LBB221:
 1020                             	.LBB219:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1021                             		.loc 1 99 5
 1022 02f5 FB 1E 0E 72 08          		mov.L	#0x8720e, r1
 1023                             	.LBE219:
 1024                             	.LBE221:
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1025                             		.loc 1 448 19
 1026 02fa 66 07                   		mov.L	#0, r7
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 1027                             		.loc 1 640 32
 1028 02fc FB A6 F0                		mov.L	#-16, r10
 1029                             	.LVL114:
 1030 02ff 53 5A                   		and	r5, r10
 1031 0301 57 4A                   		or	r4, r10
 1032 0303 CB 3A 70 03             		mov.B	r10, 880[r3]
 641:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1033                             		.loc 1 641 13 is_stmt 1
 1034                             	.LVL115:
 1035                             	.LBB222:
 1036                             	.LBB220:
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 1037                             		.loc 1 85 5
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 1038                             		.loc 1 86 5
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1039                             		.loc 1 87 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1040                             		.loc 1 90 5
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1041                             		.loc 1 93 5
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1042                             		.loc 1 96 5
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1043                             		.loc 1 99 5
 1044 0307 05 00 00 00             		bsr	_R_BSP_BitSet
 1045                             	.LVL116:
 1046 030b 38 5E FD                		bra	.L21
 1047                             	.LVL117:
 1048                             	.L87:
 1049                             	.LBE220:
 1050                             	.LBE222:
 1051                             	.LBE240:
 1052                             	.LBE251:
 1053                             	.LBE254:
 1054                             	.LBE291:
 1055                             	.LBB292:
 1056                             	.LBB284:
 1057                             	.LBB280:
 1058                             	.LBB275:
 598:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1059                             		.loc 1 598 9
 612:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1060                             		.loc 1 612 13
 612:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1061                             		.loc 1 612 32 is_stmt 0
 1062 030e FB AE 00 70 08          		mov.L	#0x87000, r10
 1063 0313 EE A7 9E 01             		mov.L	1656[r10], r7
 612:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1064                             		.loc 1 612 16
 1065 0317 61 07                   		cmp	#0, r7
 1066 0319 3B 63 FE                		bne	.L70
 614:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1067                             		.loc 1 614 17 is_stmt 1
 1068                             	.LVL118:
 1069                             	.LBB269:
 1070                             	.LBB270:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 1071                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 1072                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1073                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1074                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1075                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1076                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 1077                             		.loc 1 129 5
 1078 031c 66 32                   		mov.L	#3, r2
 1079                             	.LVL119:
 1080 031e FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 1081                             	.LVL120:
 1082 0323 05 00 00 00             		bsr	_R_BSP_BitClear
 1083                             	.LVL121:
 1084                             	.LBE270:
 1085                             	.LBE269:
 617:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1086                             		.loc 1 617 17
 617:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1087                             		.loc 1 617 36 is_stmt 0
 1088 0327 CE A5 6B 03             		mov.B	875[r10], r5
 1089 032b 75 25 F0                		and #-16, r5
 1090 032e CB A5 6B 03             		mov.B	r5, 875[r10]
 1091 0332 38 37 FD                		bra	.L21
 1092                             	.LVL122:
 1093                             	.L52:
 652:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 653:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 654:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 655:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 656:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 657:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 658:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_AL0 */
 659:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 660:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_AL0 */
 661:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 662:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else if ((vector > BSP_INT_SRC_GR_INT_AL1_TOP) && (vector < BSP_INT_SRC_GR_INT_END))
 1094                             		.loc 1 662 10 is_stmt 1
 1095                             		.loc 1 662 52 is_stmt 0
 1096 0335 71 77 A8                		add	#-88, r7
 1097                             		.loc 1 662 13
 1098 0338 61 47                   		cmp	#4, r7
 1099 033a 25 05 38 2B FD          		bgtu	.L74
 663:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 664:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Group AL1. */
 665:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_GROUP_INTERRUPT_AL1
 666:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if (true == enable)
 1100                             		.loc 1 666 9 is_stmt 1
 667:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 668:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL1));
 669:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 670:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 671:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IR(ICU, GROUPAL1)  = 0;
 672:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 673:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             IPR(ICU, GROUPAL1) = (uint8_t)((ipl > IPR(ICU, GROUPAL1)) ? ipl : IPR(ICU, GROUPAL1));
 675:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 676:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 677:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         else
 678:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 679:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Check to make sure all interrupt sources are already disabled for this group. */
 680:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if (0 == ICU.GENAL1.LONG)
 1101                             		.loc 1 680 13
 1102                             		.loc 1 680 32 is_stmt 0
 1103 033f FB AE 00 70 08          		mov.L	#0x87000, r10
 1104 0344 EE A7 1D 02             		mov.L	2164[r10], r7
 1105                             		.loc 1 680 16
 1106 0348 61 07                   		cmp	#0, r7
 1107 034a 3B 32 FE                		bne	.L70
 681:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 682:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptRequestDisable(VECT(ICU, GROUPAL1));
 1108                             		.loc 1 682 17 is_stmt 1
 1109                             	.LVL123:
 1110                             	.LBB271:
 1111                             	.LBB272:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 1112                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 1113                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1114                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1115                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1116                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1117                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 1118                             		.loc 1 129 5
 1119 034d 66 12                   		mov.L	#1, r2
 1120                             	.LVL124:
 1121 034f FB 1E 0E 72 08          		mov.L	#0x8720e, r1
 1122                             	.LVL125:
 1123 0354 05 00 00 00             		bsr	_R_BSP_BitClear
 1124                             	.LVL126:
 1125                             	.LBE272:
 1126                             	.LBE271:
 683:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 684:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Casting is valid because it matches the type to the right side or argument. */
 685:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 IPR(ICU, GROUPAL1) = 0;
 1127                             		.loc 1 685 17
 1128                             		.loc 1 685 36 is_stmt 0
 1129 0358 CE A5 71 03             		mov.B	881[r10], r5
 1130 035c 75 25 F0                		and #-16, r5
 1131 035f CB A5 71 03             		mov.B	r5, 881[r10]
 1132 0363 38 06 FD                		bra	.L21
 1133                             	.LVL127:
 1134                             	.L38:
 1135                             	.LBE275:
 1136                             	.LBE280:
 1137                             	.LBE284:
 1138                             	.LBE292:
 1139                             	.LBB293:
 1140                             	.LBB255:
 1141                             	.LBB252:
 1142                             	.LBB241:
 572:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL1));
 1143                             		.loc 1 572 34
 1144 0366 CE 74 6F 03             		mov.B	879[r7], r4
 1145 036a 64 F4                   		and #15, r4
 1146 036c 38 0C FF                		bra	.L39
 1147                             	.LVL128:
 1148                             	.L88:
 598:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1149                             		.loc 1 598 9 is_stmt 1
 600:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1150                             		.loc 1 600 13
 1151                             	.LBB223:
 1152                             	.LBB224:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 1153                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 1154                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1155                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1156                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1157                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1158                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 1159                             		.loc 1 129 5
 1160 036f FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 1161                             	.LVL129:
 1162 0374 05 00 00 00             		bsr	_R_BSP_BitClear
 1163                             	.LVL130:
 1164                             	.LBE224:
 1165                             	.LBE223:
 603:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1166                             		.loc 1 603 13
 603:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1167                             		.loc 1 603 32 is_stmt 0
 1168 0378 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1169                             	.LVL131:
 1170 037d F1 78 6B                		bclr	#0, 107[r7].B
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 1171                             		.loc 1 606 13 is_stmt 1
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 1172                             		.loc 1 606 51 is_stmt 0
 1173 0380 CE 75 6B 03             		mov.B	875[r7], r5
 1174 0384 64 F5                   		and #15, r5
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 1175                             		.loc 1 606 34
 1176 0386 47 5A                   		cmp	r5, r10
 1177 0388 25 7F                   		bleu	.L41
 1178 038a 66 F4                   		mov.L	#15, r4
 1179 038c 53 A4                   		and	r10, r4
 1180 038e EF 00                   		.balign 8,3,4
 1181                             	.L42:
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 1182                             		.loc 1 606 32
 1183 0390 FB 3E 00 70 08          		mov.L	#0x87000, r3
 1184 0395 64 F4                   		and #15, r4
 1185                             	.LBB225:
 1186                             	.LBB226:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1187                             		.loc 1 99 5
 1188 0397 66 32                   		mov.L	#3, r2
 1189                             	.LBE226:
 1190                             	.LBE225:
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 1191                             		.loc 1 606 32
 1192 0399 CE 35 6B 03             		mov.B	875[r3], r5
 1193                             	.LBB229:
 1194                             	.LBB227:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1195                             		.loc 1 99 5
 1196 039d FB 1E 0D 72 08          		mov.L	#0x8720d, r1
 1197                             	.LBE227:
 1198                             	.LBE229:
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1199                             		.loc 1 448 19
 1200 03a2 66 07                   		mov.L	#0, r7
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 1201                             		.loc 1 606 32
 1202 03a4 FB A6 F0                		mov.L	#-16, r10
 1203                             	.LVL132:
 1204 03a7 53 5A                   		and	r5, r10
 1205 03a9 57 4A                   		or	r4, r10
 1206 03ab CB 3A 6B 03             		mov.B	r10, 875[r3]
 607:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1207                             		.loc 1 607 13 is_stmt 1
 1208                             	.LVL133:
 1209                             	.LBB230:
 1210                             	.LBB228:
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 1211                             		.loc 1 85 5
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 1212                             		.loc 1 86 5
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1213                             		.loc 1 87 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1214                             		.loc 1 90 5
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1215                             		.loc 1 93 5
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1216                             		.loc 1 96 5
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1217                             		.loc 1 99 5
 1218 03af 05 00 00 00             		bsr	_R_BSP_BitSet
 1219                             	.LVL134:
 1220 03b3 38 B6 FC                		bra	.L21
 1221                             	.LVL135:
 1222                             	.L43:
 1223                             	.LBE228:
 1224                             	.LBE230:
 662:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1225                             		.loc 1 662 10
 662:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1226                             		.loc 1 662 52 is_stmt 0
 1227 03b6 71 77 A8                		add	#-88, r7
 662:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1228                             		.loc 1 662 13
 1229 03b9 61 47                   		cmp	#4, r7
 1230 03bb 25 05 38 AA FC          		bgtu	.L74
 666:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1231                             		.loc 1 666 9 is_stmt 1
 668:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1232                             		.loc 1 668 13
 1233                             	.LVL136:
 1234                             	.LBB231:
 1235                             	.LBB232:
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 1236                             		.loc 1 115 5
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 1237                             		.loc 1 116 5
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1238                             		.loc 1 117 5
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1239                             		.loc 1 120 5
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1240                             		.loc 1 123 5
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1241                             		.loc 1 126 5
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestDisable() */
 1242                             		.loc 1 129 5
 1243 03c0 66 12                   		mov.L	#1, r2
 1244                             	.LVL137:
 1245 03c2 FB 1E 0E 72 08          		mov.L	#0x8720e, r1
 1246                             	.LVL138:
 1247 03c7 05 00 00 00             		bsr	_R_BSP_BitClear
 1248                             	.LVL139:
 1249                             	.LBE232:
 1250                             	.LBE231:
 671:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1251                             		.loc 1 671 13
 671:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1252                             		.loc 1 671 32 is_stmt 0
 1253 03cb FB 7E 00 70 08          		mov.L	#0x87000, r7
 1254                             	.LVL140:
 1255 03d0 F1 78 71                		bclr	#0, 113[r7].B
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 1256                             		.loc 1 674 13 is_stmt 1
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 1257                             		.loc 1 674 51 is_stmt 0
 1258 03d3 CE 75 71 03             		mov.B	881[r7], r5
 1259 03d7 64 F5                   		and #15, r5
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 1260                             		.loc 1 674 34
 1261 03d9 47 5A                   		cmp	r5, r10
 1262 03db 25 42                   		bleu	.L46
 1263 03dd 66 F5                   		mov.L	#15, r5
 1264 03df 53 A5                   		and	r10, r5
 1265                             		.balign 8,3,4
 1266                             	.L47:
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 1267                             		.loc 1 674 32
 1268 03e1 FB 4E 00 70 08          		mov.L	#0x87000, r4
 1269 03e6 66 FA                   		mov.L	#15, r10
 1270                             	.LVL141:
 1271 03e8 53 5A                   		and	r5, r10
 1272                             	.LBB233:
 1273                             	.LBB234:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1274                             		.loc 1 99 5
 1275 03ea 66 12                   		mov.L	#1, r2
 1276                             	.LBE234:
 1277                             	.LBE233:
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 1278                             		.loc 1 674 32
 1279 03ec CE 45 71 03             		mov.B	881[r4], r5
 1280                             	.LBB237:
 1281                             	.LBB235:
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1282                             		.loc 1 99 5
 1283 03f0 FB 1E 0E 72 08          		mov.L	#0x8720e, r1
 1284                             	.LBE235:
 1285                             	.LBE237:
 448:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1286                             		.loc 1 448 19
 1287 03f5 66 07                   		mov.L	#0, r7
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 1288                             		.loc 1 674 32
 1289 03f7 75 25 F0                		and #-16, r5
 1290 03fa 57 5A                   		or	r5, r10
 1291 03fc CB 4A 71 03             		mov.B	r10, 881[r4]
 675:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1292                             		.loc 1 675 13 is_stmt 1
 1293                             	.LVL142:
 1294                             	.LBB238:
 1295                             	.LBB236:
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t ien_bit_num;
 1296                             		.loc 1 85 5
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint8_t  *p_ier_addr;
 1297                             		.loc 1 86 5
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1298                             		.loc 1 87 5
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1299                             		.loc 1 90 5
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1300                             		.loc 1 93 5
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1301                             		.loc 1 96 5
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptRequestEnable() */
 1302                             		.loc 1 99 5
 1303 0400 05 00 00 00             		bsr	_R_BSP_BitSet
 1304                             	.LVL143:
 1305 0404 38 65 FC                		bra	.L21
 1306                             	.LVL144:
 1307                             	.L41:
 1308                             	.LBE236:
 1309                             	.LBE238:
 606:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPBL2));
 1310                             		.loc 1 606 34 is_stmt 0
 1311 0407 CE 74 6B 03             		mov.B	875[r7], r4
 1312 040b 64 F4                   		and #15, r4
 1313 040d 2E 83                   		bra	.L42
 1314                             	.L44:
 640:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL0));
 1315                             		.loc 1 640 34
 1316 040f FB 7E 00 70 08          		mov.L	#0x87000, r7
 1317 0414 CE 74 70 03             		mov.B	880[r7], r4
 1318 0418 64 F4                   		and #15, r4
 1319 041a 38 CE FE                		bra	.L45
 1320                             	.L46:
 674:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptRequestEnable(VECT(ICU, GROUPAL1));
 1321                             		.loc 1 674 34
 1322 041d CE 75 71 03             		mov.B	881[r7], r5
 1323 0421 64 F5                   		and #15, r5
 1324 0423 2E BE                   		bra	.L47
 1325                             	.LBE241:
 1326                             	.LBE252:
 1327                             	.LBE255:
 1328                             	.LBE293:
 1329                             	.LFE8:
 1331 0425 FC 13 00                		.section	.text.excep_supervisor_inst_isr,"ax",@progbits
 1332                             		.global	_excep_supervisor_inst_isr
 1334                             	_excep_supervisor_inst_isr:
 1335                             	.LFB11:
 686:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 687:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             else
 688:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 689:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 err = BSP_INT_ERR_GROUP_STILL_ENABLED;
 690:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 691:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 692:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #else /* BSP_MCU_GROUP_INTERRUPT_AL1 */
 693:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 694:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT_AL1 */
 695:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 696:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     else
 697:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 698:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Vector given was not part of a group. */
 699:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         err = BSP_INT_ERR_INVALID_ARG;
 700:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 701:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 702:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     return err;
 703:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bsp_gr_int_enable_disable() */
 704:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_GROUP_INTERRUPT */
 705:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 706:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /* When using the user startup program, disable the following code. */
 707:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #if BSP_CFG_STARTUP_DISABLE == 0
 708:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 709:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_SUPERVISOR_INST_ISR
 710:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 711:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_supervisor_inst_isr
 712:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Supervisor Instruction Violation ISR
 713:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 714:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 715:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 716:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_supervisor_inst_isr(void)
 717:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1336                             		.loc 1 717 1 is_stmt 1
 1337                             		; Note: Interrupt Handler
 1338 0000 6E EF                   		pushm	r14-r15
 1339                             	.LCFI5:
 1340 0002 6E 15                   		pushm	r1-r5
 1341                             	.LCFI6:
 1342 0004 60 40                   		sub	#4, r0
 1343                             	.LCFI7:
 718:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 719:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_SUPERVISOR_INSTR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR)
 1344                             		.loc 1 719 5
 1345                             	.LVL145:
 1346                             	.LBB296:
 1347                             	.LBB297:
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 1348                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1349                             		.loc 1 275 5
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1350                             		.loc 1 277 5
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1351                             		.loc 1 286 5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1352                             		.loc 1 291 13
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1353                             		.loc 1 291 41 is_stmt 0
 1354 0006 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 1355 000c EC 55                   		mov.L	[r5], r5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1356                             		.loc 1 291 16
 1357 000e FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
 1358 0015 10                      		beq	.L89
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1359                             		.loc 1 294 17 is_stmt 1
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1360                             		.loc 1 296 17 is_stmt 0
 1361 0016 EF 01                   		mov.L	r0, r1
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1362                             		.loc 1 294 32
 1363 0018 F8 06 00                		mov.L	#0, [r0]
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1364                             		.loc 1 296 17 is_stmt 1
 1365 001b 7F 15                   		jsr	r5
 1366                             	.LVL146:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1367                             		.loc 1 349 5
 1368                             		.balign 8,3,1
 1369                             	.L89:
 1370                             	.LBE297:
 1371                             	.LBE296:
 720:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_supervisor_inst_isr() */
 1372                             		.loc 1 720 1 is_stmt 0
 1373 001d 62 40                   		add	#4, r0
 1374 001f 6F 15                   		popm	r1-r5
 1375 0021 6F EF                   		popm	r14-r15
 1376 0023 7F 95                   		rte
 1377                             	.LFE11:
 1379 0025 FC 13 00                		.section	.text.excep_access_isr,"ax",@progbits
 1380                             		.global	_excep_access_isr
 1382                             	_excep_access_isr:
 1383                             	.LFB12:
 721:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 722:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 723:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_ACCESS_ISR
 724:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 725:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_access_isr
 726:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Access exception ISR
 727:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 728:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 729:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 730:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_access_isr(void)
 731:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1384                             		.loc 1 731 1 is_stmt 1
 1385                             		; Note: Interrupt Handler
 1386 0000 6E EF                   		pushm	r14-r15
 1387                             	.LCFI8:
 1388 0002 6E 15                   		pushm	r1-r5
 1389                             	.LCFI9:
 1390 0004 60 40                   		sub	#4, r0
 1391                             	.LCFI10:
 732:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 733:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_ACCESS, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1392                             		.loc 1 733 5
 1393                             	.LVL147:
 1394                             	.LBB300:
 1395                             	.LBB301:
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 1396                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1397                             		.loc 1 275 5
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1398                             		.loc 1 277 5
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1399                             		.loc 1 286 5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1400                             		.loc 1 291 13
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1401                             		.loc 1 291 41 is_stmt 0
 1402 0006 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 1403 000c A9 55                   		mov.L	16[r5], r5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1404                             		.loc 1 291 16
 1405 000e FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
 1406 0015 10                      		beq	.L95
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1407                             		.loc 1 294 17 is_stmt 1
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1408                             		.loc 1 296 17 is_stmt 0
 1409 0016 EF 01                   		mov.L	r0, r1
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1410                             		.loc 1 294 32
 1411 0018 F8 06 04                		mov.L	#4, [r0]
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1412                             		.loc 1 296 17 is_stmt 1
 1413 001b 7F 15                   		jsr	r5
 1414                             	.LVL148:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1415                             		.loc 1 349 5
 1416                             		.balign 8,3,1
 1417                             	.L95:
 1418                             	.LBE301:
 1419                             	.LBE300:
 734:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_access_isr() */
 1420                             		.loc 1 734 1 is_stmt 0
 1421 001d 62 40                   		add	#4, r0
 1422 001f 6F 15                   		popm	r1-r5
 1423 0021 6F EF                   		popm	r14-r15
 1424 0023 7F 95                   		rte
 1425                             	.LFE12:
 1427 0025 FC 13 00                		.section	.text.excep_undefined_inst_isr,"ax",@progbits
 1428                             		.global	_excep_undefined_inst_isr
 1430                             	_excep_undefined_inst_isr:
 1431                             	.LFB13:
 735:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 736:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 737:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_UNDEFINED_INST_ISR
 738:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 739:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_undefined_inst_isr
 740:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Undefined instruction exception ISR
 741:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 742:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 743:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 744:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_undefined_inst_isr(void)
 745:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1432                             		.loc 1 745 1 is_stmt 1
 1433                             		; Note: Interrupt Handler
 1434 0000 6E EF                   		pushm	r14-r15
 1435                             	.LCFI11:
 1436 0002 6E 15                   		pushm	r1-r5
 1437                             	.LCFI12:
 1438 0004 60 40                   		sub	#4, r0
 1439                             	.LCFI13:
 746:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 747:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_UNDEFINED_INSTR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1440                             		.loc 1 747 5
 1441                             	.LVL149:
 1442                             	.LBB304:
 1443                             	.LBB305:
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 1444                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1445                             		.loc 1 275 5
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1446                             		.loc 1 277 5
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1447                             		.loc 1 286 5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1448                             		.loc 1 291 13
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1449                             		.loc 1 291 41 is_stmt 0
 1450 0006 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 1451 000c A8 5D                   		mov.L	4[r5], r5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1452                             		.loc 1 291 16
 1453 000e FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
 1454 0015 10                      		beq	.L101
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1455                             		.loc 1 294 17 is_stmt 1
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1456                             		.loc 1 296 17 is_stmt 0
 1457 0016 EF 01                   		mov.L	r0, r1
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1458                             		.loc 1 294 32
 1459 0018 F8 06 01                		mov.L	#1, [r0]
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1460                             		.loc 1 296 17 is_stmt 1
 1461 001b 7F 15                   		jsr	r5
 1462                             	.LVL150:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1463                             		.loc 1 349 5
 1464                             		.balign 8,3,1
 1465                             	.L101:
 1466                             	.LBE305:
 1467                             	.LBE304:
 748:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_undefined_inst_isr() */
 1468                             		.loc 1 748 1 is_stmt 0
 1469 001d 62 40                   		add	#4, r0
 1470 001f 6F 15                   		popm	r1-r5
 1471 0021 6F EF                   		popm	r14-r15
 1472 0023 7F 95                   		rte
 1473                             	.LFE13:
 1475 0025 FC 13 00                		.section	.text.excep_floating_point_isr,"ax",@progbits
 1476                             		.global	_excep_floating_point_isr
 1478                             	_excep_floating_point_isr:
 1479                             	.LFB14:
 749:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 750:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 751:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_EXCEP_FLOATING_POINT_ISR
 752:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 753:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: excep_floating_point_isr
 754:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Floating point exception ISR
 755:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 756:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 757:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 758:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void excep_floating_point_isr(void)
 759:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1480                             		.loc 1 759 1 is_stmt 1
 1481                             		; Note: Interrupt Handler
 1482 0000 6E EF                   		pushm	r14-r15
 1483                             	.LCFI14:
 1484 0002 6E 15                   		pushm	r1-r5
 1485                             	.LCFI15:
 1486 0004 60 40                   		sub	#4, r0
 1487                             	.LCFI16:
 760:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef __FPU
 761:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Used for reading FPSW register. */
 762:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     uint32_t tmp_fpsw;
 1488                             		.loc 1 762 5
 763:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 764:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 765:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
 766:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_EXC_FPU, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1489                             		.loc 1 766 5
 1490                             	.LVL151:
 1491                             	.LBB308:
 1492                             	.LBB309:
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 1493                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1494                             		.loc 1 275 5
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1495                             		.loc 1 277 5
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1496                             		.loc 1 286 5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1497                             		.loc 1 291 13
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1498                             		.loc 1 291 41 is_stmt 0
 1499 0006 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 1500 000c A8 DD                   		mov.L	12[r5], r5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1501                             		.loc 1 291 16
 1502 000e FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
 1503 0015 10                      		beq	.L108
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1504                             		.loc 1 294 17 is_stmt 1
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1505                             		.loc 1 296 17 is_stmt 0
 1506 0016 EF 01                   		mov.L	r0, r1
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1507                             		.loc 1 294 32
 1508 0018 F8 06 03                		mov.L	#3, [r0]
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1509                             		.loc 1 296 17 is_stmt 1
 1510 001b 7F 15                   		jsr	r5
 1511                             	.LVL152:
 1512                             		.balign 8,3,2
 1513                             	.L108:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1514                             		.loc 1 349 5
 1515                             	.LBE309:
 1516                             	.LBE308:
 767:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 768:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef __FPU
 769:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Get current FPSW. */
 770:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     tmp_fpsw = (uint32_t)R_BSP_GET_FPSW();
 1517                             		.loc 1 770 5
 1518                             		.loc 1 770 26 is_stmt 0
 1519 001d FD 6A 35                		mvfc	fpsw, r5
 1520                             	.LVL153:
 771:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 772:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Clear only the FPU exception flags. */
 773:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_SET_FPSW(tmp_fpsw & ((uint32_t)~BSP_PRV_FPU_CAUSE_FLAGS));
 1521                             		.loc 1 773 5 is_stmt 1
 1522 0020 76 25 03 FF             		and #-253, r5
 1523                             	.LVL154:
 1524 0024 FD 68 53                		mvtc	r5, fpsw
 774:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 775:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function excep_floating_point_isr() */
 1525                             		.loc 1 775 1 is_stmt 0
 1526 0027 62 40                   		add	#4, r0
 1527 0029 6F 15                   		popm	r1-r5
 1528 002b 6F EF                   		popm	r14-r15
 1529 002d 7F 95                   		rte
 1530                             	.LFE14:
 1532 002f 03                      		.section	.text.non_maskable_isr,"ax",@progbits
 1533                             		.global	_non_maskable_isr
 1535                             	_non_maskable_isr:
 1536                             	.LFB15:
 776:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 777:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 778:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NON_MASKABLE_ISR
 779:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
 780:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: non_maskable_isr
 781:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : Non-maskable interrupt ISR
 782:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
 783:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
 784:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
 785:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void non_maskable_isr(void)
 786:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1537                             		.loc 1 786 1 is_stmt 1
 1538                             		; Note: Interrupt Handler
 1539 0000 6E 1F                   		pushm	r1-r15
 1540                             	.LCFI17:
 787:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Determine what is the cause of this interrupt. */
 788:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 789:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_EXC_NMI_PIN
 790:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* EXC_NMI_PIN */
 791:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.NMIST) && (1 == ICU.NMIER.BIT.NMIEN))
 1541                             		.loc 1 791 5
 1542                             		.loc 1 791 28 is_stmt 0
 1543 0002 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1544 0007 CE 75 80 05             		mov.B	1408[r7], r5
 1545                             		.loc 1 791 8
 1546 000b 7C 05                   		btst	#0, r5
 1547 000d 21 63                   		bne	.L126
 1548 000f 03                      		.balign 8,3,4
 1549                             	.L114:
 792:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 793:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* NMI pin interrupt is requested. */
 794:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_EXC_NMI_PIN, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 795:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 796:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear NMI pin interrupt flag. */
 797:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.NMICLR = 1;
 798:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 799:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 800:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 801:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_OSC_STOP_DETECT
 802:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* OSC_STOP_DETECT */
 803:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.OSTST) && (1 == ICU.NMIER.BIT.OSTEN))
 1550                             		.loc 1 803 5 is_stmt 1
 1551                             		.loc 1 803 28 is_stmt 0
 1552 0010 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1553 0015 CE 75 80 05             		mov.B	1408[r7], r5
 1554                             		.loc 1 803 8
 1555 0019 7C 15                   		btst	#1, r5
 1556 001b 3B E9 00                		bne	.L127
 1557 001e EF 00                   		.balign 8,3,4
 1558                             	.L115:
 804:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 805:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Oscillation stop detection interrupt is requested. */
 806:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_OSC_STOP_DETECT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 807:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 808:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear oscillation stop detect flag. */
 809:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.OSTCLR = 1;
 810:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 811:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 812:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 813:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_WDT_ERROR
 814:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* WDT_ERROR */
 815:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.WDTST) && (1 == ICU.NMIER.BIT.WDTEN))
 1559                             		.loc 1 815 5 is_stmt 1
 1560                             		.loc 1 815 28 is_stmt 0
 1561 0020 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1562 0025 CE 75 80 05             		mov.B	1408[r7], r5
 1563                             		.loc 1 815 8
 1564 0029 7C 25                   		btst	#2, r5
 1565 002b 3B C3 00                		bne	.L128
 1566 002e EF 00                   		.balign 8,3,4
 1567                             	.L116:
 816:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 817:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* WDT underflow/refresh error interrupt is requested. */
 818:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_WDT_ERROR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 819:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 820:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear WDT flag. */
 821:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.WDTCLR = 1;
 822:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 823:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 824:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 825:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_LVD
 826:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* LVD */
 827:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.LVDST) && (1 == ICU.NMIER.BIT.LVDEN))
 828:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 829:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Voltage monitoring 1 interrupt is requested. */
 830:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_LVD1, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 831:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 832:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 833:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 834:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_IWDT_ERROR
 835:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* IWDT_ERROR */
 836:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.IWDTST) && (1 == ICU.NMIER.BIT.IWDTEN))
 1568                             		.loc 1 836 5 is_stmt 1
 1569                             		.loc 1 836 28 is_stmt 0
 1570 0030 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1571 0035 CE 75 80 05             		mov.B	1408[r7], r5
 1572                             		.loc 1 836 8
 1573 0039 7C 35                   		btst	#3, r5
 1574 003b 3B 9D 00                		bne	.L129
 1575 003e EF 00                   		.balign 8,3,4
 1576                             	.L117:
 837:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 838:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* IWDT underflow/refresh error interrupt is requested. */
 839:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_IWDT_ERROR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 840:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 841:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear IWDT flag. */
 842:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.IWDTCLR = 1;
 843:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 844:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 845:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 846:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_LVD1
 847:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* LVD1 */
 848:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.LVD1ST) && (1 == ICU.NMIER.BIT.LVD1EN))
 1577                             		.loc 1 848 5 is_stmt 1
 1578                             		.loc 1 848 28 is_stmt 0
 1579 0040 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1580 0045 CE 75 80 05             		mov.B	1408[r7], r5
 1581                             		.loc 1 848 8
 1582 0049 7C 45                   		btst	#4, r5
 1583 004b 21 78                   		bne	.L130
 1584 004d FC 13 00                		.balign 8,3,4
 1585                             	.L118:
 849:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 850:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Voltage monitoring 1 interrupt is requested. */
 851:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_LVD1, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 852:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 853:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear LVD1 flag. */
 854:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.LVD1CLR = 1;
 855:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 856:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 857:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 858:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_LVD2
 859:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* LVD2 */
 860:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.LVD2ST) && (1 == ICU.NMIER.BIT.LVD2EN))
 1586                             		.loc 1 860 5 is_stmt 1
 1587                             		.loc 1 860 28 is_stmt 0
 1588 0050 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1589 0055 CE 75 80 05             		mov.B	1408[r7], r5
 1590                             		.loc 1 860 8
 1591 0059 7C 55                   		btst	#5, r5
 1592 005b 21 54                   		bne	.L131
 1593 005d FC 13 00                		.balign 8,3,4
 1594                             	.L119:
 861:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 862:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Voltage monitoring 1 interrupt is requested. */
 863:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_LVD2, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 864:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 865:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear LVD2 flag. */
 866:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.LVD2CLR = 1;
 867:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 868:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 869:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 870:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_VBATT
 871:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* VBATT */
 872:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.VBATST) && (1 == ICU.NMIER.BIT.VBATEN))
 873:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 874:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* VBATT monitoring interrupt is requested. */
 875:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         R_BSP_InterruptControl(BSP_INT_SRC_VBATT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 876:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 877:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Clear LVD2 flag. */
 878:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         ICU.NMICLR.BIT.VBATCLR = 1;
 879:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 880:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 881:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 882:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_ECCRAM
 883:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* ECCRAM */
 884:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.ECCRAMST) && (1 == ICU.NMIER.BIT.ECCRAMEN))
 885:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 886:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == ECCRAM.ECCRAM1STS.BIT.ECC1ERR)
 887:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 888:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 889:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_1BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 890:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 891:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 892:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             ECCRAM.ECCRAM1STS.BIT.ECC1ERR = 0;
 893:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 894:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 895:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == ECCRAM.ECCRAM2STS.BIT.ECC2ERR)
 896:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 897:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 898:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_2BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 899:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 900:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 901:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             ECCRAM.ECCRAM2STS.BIT.ECC2ERR = 0;
 902:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 903:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 904:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
 905:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 906:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_RAM
 907:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* RAM */
 908:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.RAMST) && (1 == ICU.NMIER.BIT.RAMEN))
 1595                             		.loc 1 908 5 is_stmt 1
 1596                             		.loc 1 908 28 is_stmt 0
 1597 0060 FB 7E 00 70 08          		mov.L	#0x87000, r7
 1598 0065 CE 75 80 05             		mov.B	1408[r7], r5
 1599                             		.loc 1 908 8
 1600 0069 7C 65                   		btst	#6, r5
 1601 006b 21 19                   		bne	.L132
 1602                             	.L124:
 909:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 910:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 911:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.RAMSTS.BIT.RAMERR)
 912:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 913:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* RAM Error interrupt is requested. */
 914:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_RAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 915:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 916:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear RAM flags. */
 917:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.RAMSTS.BIT.RAMERR = 0;
 918:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 919:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_RAM_EXRAM
 920:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 921:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 922:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.EXRAMSTS.BIT.EXRAMERR)
 923:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 924:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Expansion RAM Error interrupt is requested. */
 925:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_EXRAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 926:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 927:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear Expansion RAM flags. */
 928:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.EXRAMSTS.BIT.EXRAMERR = 0;
 929:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 930:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_RAM_EXRAM */
 931:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 932:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_RAM_ECCRAM
 933:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 934:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 935:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.ECCRAM1STS.BIT.ECC1ERR)
 936:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 937:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 938:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_1BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 939:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 940:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 941:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.ECCRAM1STS.BIT.ECC1ERR = 0;
 942:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 943:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 944:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 945:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if(1 == RAM.ECCRAM2STS.BIT.ECC2ERR)
 946:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 947:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* ECCRAM Error interrupt is requested. */
 948:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_2BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 949:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 950:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear ECCRAM flags. */
 951:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             RAM.ECCRAM2STS.BIT.ECC2ERR = 0;
 952:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 953:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_RAM_ECCRAM */
 954:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 955:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_NMI_RAM */
 956:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 957:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_NMI_EXNMI
 958:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* EXNMI */
 959:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.NMISR.BIT.EXNMIST) && (1 == ICU.NMIER.BIT.EXNMIEN))
 960:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 961:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_EXNMI_RAM
 962:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 963:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 964:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         if ((1 == ICU.EXNMISR.BIT.RAMST) && (1 == ICU.EXNMIER.BIT.RAMEN))
 965:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 966:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 967:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 968:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == RAM.RAMSTS.BIT.RAMERR)
 969:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 970:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* RAM Error interrupt is requested. */
 971:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_RAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 972:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 973:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear RAM flags. */
 974:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 RAM.RAMSTS.BIT.RAMERR = 0;
 975:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 976:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #ifdef BSP_MCU_NMI_EXNMI_RAM_EXRAM
 977:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 978:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 979:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == RAM.EXRAMSTS.BIT.EXRAMERR)
 980:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 981:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Expansion RAM Error interrupt is requested. */
 982:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_EXRAM, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 983:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 984:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear Expansion RAM flags. */
 985:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 RAM.EXRAMSTS.BIT.EXRAMERR = 0;
 986:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 987:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #endif /* BSP_MCU_NMI_EXNMI_RAM_EXRAM */
 988:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 989:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #ifdef BSP_MCU_NMI_EXNMI_RAM_ECCRAM
 990:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 991:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
 992:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == ECCRAM.ECCRAM1STS.BIT.ECC1ERR)
 993:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 994:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* ECCRAM Error interrupt is requested. */
 995:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_1BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_P
 996:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 997:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear ECCRAM flags. */
 998:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ECCRAM.ECCRAM1STS.BIT.ECC1ERR = 0;
 999:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
1000:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1001:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Casting is valid because it matches the type to the right side or argument. */
1002:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             if(1 == ECCRAM.ECCRAM2STS.BIT.ECC2ERR)
1003:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
1004:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* ECCRAM Error interrupt is requested. */
1005:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 R_BSP_InterruptControl(BSP_INT_SRC_ECCRAM_2BIT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_P
1006:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1007:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 /* Clear ECCRAM flags. */
1008:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****                 ECCRAM.ECCRAM2STS.BIT.ECC2ERR = 0;
1009:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
1010:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         #endif /* BSP_MCU_NMI_EXNMI_RAM_ECCRAM */
1011:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
1012:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_EXNMI_RAM */
1013:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1014:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #ifdef BSP_MCU_NMI_EXNMI_DPFPUEX
1015:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1016:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Casting is valid because it matches the type to the right side or argument. */
1017:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     if ((1 == ICU.EXNMISR.BIT.DPFPUST) && (1 == ICU.EXNMIER.BIT.DPFPUEN))
1018:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
1019:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Double-Precision Floating-Point Exception interrupt is requested. */
1020:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             R_BSP_InterruptControl(BSP_INT_SRC_DPFPUEX, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
1021:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1022:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             /* Clear DPFPUST flag. */
1023:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             ICU.EXNMICLR.BIT.DPFPUCLR = 1;
1024:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
1025:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     #endif /* BSP_MCU_NMI_EXNMI_DPFPUEX */
1026:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
1027:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_NMI_EXNMI */
1028:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1029:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* WAIT_LOOP */
1030:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     while(1)
 1603                             		.loc 1 1030 5 is_stmt 1 discriminator 1
1031:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
1032:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         /* Infinite loop. Return from Non-maskable interrupt handlling routine is prohibited.
1033:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            Never use the non-maskable interrupt with an attempt to return to the program that was b
1034:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****            the time of interrupt generation after the exception handling routine is ended.
1035:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****          */
1036:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****          R_BSP_NOP();
 1604                             		.loc 1 1036 10 discriminator 1
 1605                             	 ; 1036 "../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c" 1
 1606 006d 03                      		nop
 1607                             	 ; 0 "" 2
 1608 006e 2E FF                   		bra	.L124
 1609                             	.L126:
 791:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1610                             		.loc 1 791 58 is_stmt 0 discriminator 1
 1611 0070 CE 75 81 05             		mov.B	1409[r7], r5
 791:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1612                             		.loc 1 791 36 discriminator 1
 1613 0074 7C 05                   		btst	#0, r5
 1614 0076 20 9A                   		beq	.L114
 794:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1615                             		.loc 1 794 9 is_stmt 1
 1616 0078 66 21                   		mov.L	#2, r1
 1617 007a 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1618                             	.LVL155:
 797:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1619                             		.loc 1 797 9
 797:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1620                             		.loc 1 797 31 is_stmt 0
 1621 007e F2 70 82 05             		bset	#0, 1410[r7].B
 1622 0082 2E 8E                   		bra	.L114
 1623                             	.L132:
 908:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1624                             		.loc 1 908 58 discriminator 1
 1625 0084 CE 75 81 05             		mov.B	1409[r7], r5
 908:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1626                             		.loc 1 908 36 discriminator 1
 1627 0088 7C 65                   		btst	#6, r5
 1628 008a 20 E3                   		beq	.L124
 911:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1629                             		.loc 1 911 9 is_stmt 1
 911:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1630                             		.loc 1 911 31 is_stmt 0
 1631 008c FB 7E 00 12 08          		mov.L	#0x81200, r7
 1632 0091 88 7D                   		mov.B	1[r7], r5
 911:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1633                             		.loc 1 911 11
 1634 0093 7C 05                   		btst	#0, r5
 1635 0095 3B 85 00                		bne	.L133
 1636                             		.balign 8,3,4
 1637                             	.L123:
 922:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1638                             		.loc 1 922 9 is_stmt 1
 922:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1639                             		.loc 1 922 33 is_stmt 0
 1640 0098 FB 7E 00 12 08          		mov.L	#0x81200, r7
 1641 009d CD 75 41                		mov.B	65[r7], r5
 922:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         {
 1642                             		.loc 1 922 11
 1643 00a0 7C 05                   		btst	#0, r5
 1644 00a2 20 CB                   		beq	.L124
 925:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1645                             		.loc 1 925 13 is_stmt 1
 1646 00a4 66 D1                   		mov.L	#13, r1
 1647 00a6 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1648                             	.LVL156:
 928:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1649                             		.loc 1 928 13
 928:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1650                             		.loc 1 928 39 is_stmt 0
 1651 00aa F1 78 41                		bclr	#0, 65[r7].B
 1652 00ad 2E C0                   		bra	.L124
 1653                             	.L131:
 860:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1654                             		.loc 1 860 59 discriminator 1
 1655 00af CE 75 81 05             		mov.B	1409[r7], r5
 860:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1656                             		.loc 1 860 37 discriminator 1
 1657 00b3 7C 55                   		btst	#5, r5
 1658 00b5 20 AB                   		beq	.L119
 863:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1659                             		.loc 1 863 9 is_stmt 1
 1660 00b7 66 91                   		mov.L	#9, r1
 1661 00b9 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1662                             	.LVL157:
 866:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1663                             		.loc 1 866 9
 866:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1664                             		.loc 1 866 32 is_stmt 0
 1665 00bd F2 75 82 05             		bset	#5, 1410[r7].B
 1666 00c1 2E 9F                   		bra	.L119
 1667                             	.L130:
 848:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1668                             		.loc 1 848 59 discriminator 1
 1669 00c3 CE 75 81 05             		mov.B	1409[r7], r5
 848:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1670                             		.loc 1 848 37 discriminator 1
 1671 00c7 7C 45                   		btst	#4, r5
 1672 00c9 20 87                   		beq	.L118
 851:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1673                             		.loc 1 851 9 is_stmt 1
 1674 00cb 66 81                   		mov.L	#8, r1
 1675 00cd 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1676                             	.LVL158:
 854:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1677                             		.loc 1 854 9
 854:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1678                             		.loc 1 854 32 is_stmt 0
 1679 00d1 F2 74 82 05             		bset	#4, 1410[r7].B
 1680 00d5 38 7B FF                		bra	.L118
 1681                             	.L129:
 836:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1682                             		.loc 1 836 59 discriminator 1
 1683 00d8 CE 75 81 05             		mov.B	1409[r7], r5
 836:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1684                             		.loc 1 836 37 discriminator 1
 1685 00dc 7C 35                   		btst	#3, r5
 1686 00de 3A 62 FF                		beq	.L117
 839:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1687                             		.loc 1 839 9 is_stmt 1
 1688 00e1 66 71                   		mov.L	#7, r1
 1689 00e3 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1690                             	.LVL159:
 842:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1691                             		.loc 1 842 9
 842:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1692                             		.loc 1 842 32 is_stmt 0
 1693 00e7 F2 73 82 05             		bset	#3, 1410[r7].B
 1694 00eb 38 55 FF                		bra	.L117
 1695                             	.L128:
 815:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1696                             		.loc 1 815 58 discriminator 1
 1697 00ee CE 75 81 05             		mov.B	1409[r7], r5
 815:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1698                             		.loc 1 815 36 discriminator 1
 1699 00f2 7C 25                   		btst	#2, r5
 1700 00f4 3A 3C FF                		beq	.L116
 818:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1701                             		.loc 1 818 9 is_stmt 1
 1702 00f7 66 61                   		mov.L	#6, r1
 1703 00f9 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1704                             	.LVL160:
 821:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1705                             		.loc 1 821 9
 821:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1706                             		.loc 1 821 31 is_stmt 0
 1707 00fd F2 72 82 05             		bset	#2, 1410[r7].B
 1708 0101 38 2F FF                		bra	.L116
 1709                             	.L127:
 803:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1710                             		.loc 1 803 58 discriminator 1
 1711 0104 CE 75 81 05             		mov.B	1409[r7], r5
 803:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1712                             		.loc 1 803 36 discriminator 1
 1713 0108 7C 15                   		btst	#1, r5
 1714 010a 3A 16 FF                		beq	.L115
 806:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1715                             		.loc 1 806 9 is_stmt 1
 1716 010d 66 51                   		mov.L	#5, r1
 1717 010f 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1718                             	.LVL161:
 809:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1719                             		.loc 1 809 9
 809:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
 1720                             		.loc 1 809 31 is_stmt 0
 1721 0113 F2 71 82 05             		bset	#1, 1410[r7].B
 1722 0117 38 09 FF                		bra	.L115
 1723                             	.L133:
 914:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1724                             		.loc 1 914 13 is_stmt 1
 1725 011a 66 C1                   		mov.L	#12, r1
 1726 011c 05 00 00 00             		bsr	_R_BSP_InterruptControl.constprop.2
 1727                             	.LVL162:
 917:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1728                             		.loc 1 917 13
 917:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         }
 1729                             		.loc 1 917 35 is_stmt 0
 1730 0120 F1 78 01                		bclr	#0, 1[r7].B
 1731 0123 38 75 FF                		bra	.L123
 1732                             	.LFE15:
 1734 0126 EF 00                   		.section	.text.undefined_interrupt_source_isr,"ax",@progbits
 1735                             		.global	_undefined_interrupt_source_isr
 1737                             	_undefined_interrupt_source_isr:
 1738                             	.LFB16:
1037:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     }
1038:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function non_maskable_isr() */
1039:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif /* BSP_MCU_NON_MASKABLE_ISR */
1040:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1041:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_UNDEFINED_INTERRUPT_SOURCE_ISR
1042:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
1043:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: undefined_interrupt_source_isr
1044:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : All undefined interrupt vectors point to this function.
1045:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                Set a breakpoint in this function to determine which source is creating unwanted i
1046:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
1047:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return Value : none
1048:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
1049:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void undefined_interrupt_source_isr(void)
1050:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1739                             		.loc 1 1050 1 is_stmt 1
 1740                             		.global	$tableentry$default$.rvectors
 1741                             	$tableentry$default$.rvectors:
 1742                             		; Note: Interrupt Handler
 1743 0000 6E EF                   		pushm	r14-r15
 1744                             	.LCFI18:
 1745 0002 6E 15                   		pushm	r1-r5
 1746                             	.LCFI19:
 1747 0004 60 40                   		sub	#4, r0
 1748                             	.LCFI20:
1051:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
1052:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_UNDEFINED_INTERRUPT, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1749                             		.loc 1 1052 5
 1750                             	.LVL163:
 1751                             	.LBB312:
 1752                             	.LBB313:
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 1753                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1754                             		.loc 1 275 5
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1755                             		.loc 1 277 5
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1756                             		.loc 1 286 5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1757                             		.loc 1 291 13
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1758                             		.loc 1 291 41 is_stmt 0
 1759 0006 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 1760 000c AA D5                   		mov.L	40[r5], r5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1761                             		.loc 1 291 16
 1762 000e FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
 1763 0015 10                      		beq	.L134
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1764                             		.loc 1 294 17 is_stmt 1
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1765                             		.loc 1 296 17 is_stmt 0
 1766 0016 EF 01                   		mov.L	r0, r1
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1767                             		.loc 1 294 32
 1768 0018 F8 06 0A                		mov.L	#10, [r0]
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1769                             		.loc 1 296 17 is_stmt 1
 1770 001b 7F 15                   		jsr	r5
 1771                             	.LVL164:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1772                             		.loc 1 349 5
 1773                             		.balign 8,3,1
 1774                             	.L134:
 1775                             	.LBE313:
 1776                             	.LBE312:
1053:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function undefined_interrupt_source_isr() */
 1777                             		.loc 1 1053 1 is_stmt 0
 1778 001d 62 40                   		add	#4, r0
 1779 001f 6F 15                   		popm	r1-r5
 1780 0021 6F EF                   		popm	r14-r15
 1781 0023 7F 95                   		rte
 1782                             	.LFE16:
 1784 0025 FC 13 00                		.section	.text.bus_error_isr,"ax",@progbits
 1785                             		.global	_bus_error_isr
 1787                             	_bus_error_isr:
 1788                             	.LFB17:
1054:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #endif
1055:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1056:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** #ifdef BSP_MCU_BUS_ERROR_ISR
1057:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** /**************************************************************************************************
1058:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Function name: bus_error_isr
1059:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Description  : By default, this demo code enables the Bus Error Interrupt. This interrupt will fi
1060:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                to access code or data from one of the reserved areas in the memory map, including
1061:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                by disabled chip selects. A nop() statement is included here as a convenient place
1062:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                during debugging and development, and further handling should be added by the user
1063:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** *                application.
1064:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Arguments    : none
1065:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** * Return value : none
1066:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** ***************************************************************************************************
1067:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** R_BSP_ATTRIB_INTERRUPT void bus_error_isr (void)
1068:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** {
 1789                             		.loc 1 1068 1 is_stmt 1
 1790                             		.global	$tableentry$16$.rvectors
 1791                             	$tableentry$16$.rvectors:
 1792                             		; Note: Interrupt Handler
 1793 0000 6E EF                   		pushm	r14-r15
 1794                             	.LCFI21:
 1795 0002 6E 15                   		pushm	r1-r5
 1796                             	.LCFI22:
 1797 0004 60 40                   		sub	#4, r0
 1798                             	.LCFI23:
1069:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* Clear the bus error */
1070:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     BSC.BERCLR.BIT.STSCLR = 1;
 1799                             		.loc 1 1070 5
 1800                             		.loc 1 1070 27 is_stmt 0
 1801 0006 FB 5E 00 13 08          		mov.L	#0x81300, r5
 1802 000b F0 50                   		bset	#0, [r5].B
1071:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1072:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* 
1073:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         To find the address that was accessed when the bus error occurred, read the register BSC.BE
1074:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****         The upper 13 bits of this register contain the upper 13-bits of the offending address (in 5
1075:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     */
1076:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
1077:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     /* If user has registered a callback for this exception then call it. */
1078:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     R_BSP_InterruptControl(BSP_INT_SRC_BUS_ERROR, BSP_INT_CMD_CALL_CALLBACK, FIT_NO_PTR);
 1803                             		.loc 1 1078 5 is_stmt 1
 1804                             	.LVL165:
 1805                             	.LBB316:
 1806                             	.LBB317:
 274:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     bsp_int_cb_args_t   cb_args;
 1807                             		.loc 1 274 5
 275:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1808                             		.loc 1 275 5
 277:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1809                             		.loc 1 277 5
 286:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****     {
 1810                             		.loc 1 286 5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1811                             		.loc 1 291 13
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1812                             		.loc 1 291 41 is_stmt 0
 1813 000d FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 1814 0013 AA DD                   		mov.L	44[r5], r5
 291:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             {
 1815                             		.loc 1 291 16
 1816 0015 FD 70 C5 FF FF FF EF    		tst	#-268435457, r5
 1817 001c 10                      		beq	.L140
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1818                             		.loc 1 294 17 is_stmt 1
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1819                             		.loc 1 296 17 is_stmt 0
 1820 001d EF 01                   		mov.L	r0, r1
 294:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** 
 1821                             		.loc 1 294 32
 1822 001f F8 06 0B                		mov.L	#11, [r0]
 296:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c ****             }
 1823                             		.loc 1 296 17 is_stmt 1
 1824 0022 7F 15                   		jsr	r5
 1825                             	.LVL166:
 349:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function R_BSP_InterruptControl() */
 1826                             		.loc 1 349 5
 1827                             		.balign 8,3,1
 1828                             	.L140:
 1829                             	.LBE317:
 1830                             	.LBE316:
1079:../src/smc_gen/r_bsp/mcu/all/r_bsp_interrupts.c **** } /* End of function bus_error_isr() */
 1831                             		.loc 1 1079 1 is_stmt 0
 1832 0024 62 40                   		add	#4, r0
 1833 0026 6F 15                   		popm	r1-r5
 1834 0028 6F EF                   		popm	r14-r15
 1835 002a 7F 95                   		rte
 1836                             	.LFE17:
 1838 002c 76 10 01 00             		.section	.bss.g_bsp_vectors,"aw",@nobits
 1839                             		.balign 4
 1840                             		.set	.LANCHOR0,. + 0
 1843                             	_g_bsp_vectors:
 1844 0000 00 00 00 00 00 00 00 00 		.zero	380
 1844      00 00 00 00 00 00 00 00 
 1844      00 00 00 00 00 00 00 00 
 1844      00 00 00 00 00 00 00 00 
 1844      00 00 00 00 00 00 00 00 
 2195                             	.Letext0:
 2196                             		.file 2 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 2197                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 2198                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 2199                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 2200                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 2201                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 2202                             		.file 8 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\smc
 2203                             		.file 9 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\smc
 2204                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
 2205                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
 2206                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
 2207                             		.file 13 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
 2208                             		.file 14 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
 2209                             		.file 15 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
