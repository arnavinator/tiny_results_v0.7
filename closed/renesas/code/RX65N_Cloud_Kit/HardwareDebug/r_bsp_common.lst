   1                             		.file	"r_bsp_common.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.delay_wait,"ax",@progbits
   6                             	_delay_wait:
   7                             	.LFB4:
   8                             		.file 1 "../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c"
   1:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
   2:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * DISCLAIMER
   3:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * applicable laws, including copyright laws.
   6:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * this software. 
  14:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *
  15:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
  16:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  17:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  18:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * File Name    : r_bsp_common.c
  19:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Description  : Implements functions that apply to all r_bsp boards and MCUs.
  20:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  21:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  22:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * History : DD.MM.YYYY Version  Description
  23:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 06.05.2013 1.00     First Release
  24:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 26.03.2014 1.10     Added R_BSP_SoftwareDelay() function
  25:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 03.09.2014 1.20     Corrected R_BSP_SoftwareDelay() timing when using an RX64M
  26:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 30.09.2015 1.30     Added RX23T
  27:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 01.02.2016 1.40     Added RX24T
  28:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Changed the value of the following macro definition.
  29:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - OVERHEAD_CYCLES
  30:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - OVERHEAD_CYCLES_64
  31:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 29.02.2016 1.50     Added RX230
  32:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 01.10.2016 1.60     Added RX65N
  33:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 22.08.2016 1.70     Added RX24U
  34:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 15.05.2017 1.80     Changed method of selecting the number of CPU cycles required to ex
  35:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               the delayWait() loop.
  36:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 27.07.2018 1.90     Changed the value of the following macro definition, because added 
  37:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - CPU_CYCLES_PER_LOOP
  38:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 28.02.2019 2.00     Deleted the following definition. 
  39:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               (The following definition moved to the common file (mcu_info.h).)
  40:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - CPU_CYCLES_PER_LOOP
  41:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Added support for GNUC and ICCRX.
  42:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Fixed coding style.
  43:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Renamed following macro definitions.
  44:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - BSP_PRV_OVERHEAD_CYCLES
  45:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - BSP_PRV_OVERHEAD_CYCLES_64
  46:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - BSP_PRV_CKSEL_LOCO
  47:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               Renamed following function.
  48:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                               - delay_wait
  49:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *         : 26.07.2019 2.01     Modified comment of API function to Doxygen style.
  50:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  51:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  52:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  53:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Includes   <System Includes> , "Project Includes"
  54:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  55:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /* Get information about current board and MCU. */
  56:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #include "platform.h"
  57:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  58:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  59:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Macro definitions
  60:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  61:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #define BSP_PRV_OVERHEAD_CYCLES        (2)    /* R_BSP_SoftwareDelay() overhead per call */
  62:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #define BSP_PRV_OVERHEAD_CYCLES_64     (2)    /* R_BSP_SoftwareDelay() overhead per call using 64-b
  63:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  64:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #define BSP_PRV_CKSEL_LOCO             (0x0)  /* SCKCR3 register setting for LOCO */
  65:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  66:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  67:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Typedef definitions
  68:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  69:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  70:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  71:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Exported global variables (to be accessed by other files)
  72:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  73:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  74:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  75:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** Private global variables and functions
  76:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
  77:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  78:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  79:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * Function Name: R_BSP_GetVersion
  80:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  **************************************************************************************************
  81:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @brief Returns the current version of the r_bsp.
  82:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @return Version of the r_bsp.
  83:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @details This function will return the version of the currently installed r_bsp. The version num
  84:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * where the top 2 bytes are the major version number and the bottom 2 bytes are the minor version 
  85:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * example, Version 4.25 would be returned as 0x00040019.
  86:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  */
  87:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** uint32_t R_BSP_GetVersion (void)
  88:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
  89:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     /* These version macros are defined in platform.h. */
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     return ((((uint32_t)R_BSP_VERSION_MAJOR) << 16) | (uint32_t)R_BSP_VERSION_MINOR);
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetVersion() */
  92:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  93:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  94:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
  95:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Function Name: delay_wait
  96:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Description  : This asm loop executes a known number (5) of CPU cycles. If a value of '4' is pass
  97:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** *                in as an argument, then this function would consume 20 CPU cycles before returning
  98:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Arguments    : loop_cnt - A single 32-bit value is provided as the number of loops to execute.
  99:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** * Return Value : None
 100:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** ***************************************************************************************************
 101:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** R_BSP_PRAGMA_STATIC_INLINE_ASM(delay_wait)
 102:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** void delay_wait (unsigned long loop_cnt)
 103:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
   9                             		.loc 1 103 1
  10                             		; Note: Naked Function
  11                             	.LVL0:
 104:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_INTERNAL_USED(loop_cnt)
  12                             		.loc 1 104 5
 105:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_BEGIN
  13                             		.loc 1 105 5
  14                             	 ; 105 "../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c" 1
  15 0000 2E 03                   		BRA.B ?+
  16 0002 03                      	NOP
  17                             	?:
  18 0003 03                      	NOP
  19 0004 60 11                   	SUB #01H, R1
  20 0006 21 FD                   	BNE.B ?-
  21 0008 02                      	rts
  22                             	
  23                             	 ; 0 "" 2
 106:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    BRA.B   R_BSP_ASM_LAB_NEXT(0)     )
 107:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    NOP                               )
 108:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_LAB(0:                                )
 109:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    NOP                               )
 110:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    SUB     #01H, R1                  )
 111:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM(    BNE.B   R_BSP_ASM_LAB_PREV(0)     )
 112:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     R_BSP_ASM_END
 113:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function delay_wait() */
  24                             		.loc 1 113 1 is_stmt 0
  25                             		; Naked function: epilogue provided by programmer.
  26                             	.LFE4:
  28                             		.section	.text.R_BSP_GetVersion,"ax",@progbits
  29                             		.global	_R_BSP_GetVersion
  31                             	_R_BSP_GetVersion:
  32                             	.LFB3:
  88:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     /* These version macros are defined in platform.h. */
  33                             		.loc 1 88 1 is_stmt 1
  90:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetVersion() */
  34                             		.loc 1 90 5
  91:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
  35                             		.loc 1 91 1 is_stmt 0
  36 0000 FB 1E 3D 00 05          		mov.L	#0x5003d, r1
  37 0005 02                      		rts
  38                             	.LFE3:
  40                             		.section	.text.R_BSP_GetIClkFreqHz,"ax",@progbits
  41                             		.global	_R_BSP_GetIClkFreqHz
  43                             	_R_BSP_GetIClkFreqHz:
  44                             	.LFB5:
 114:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 115:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 116:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
 117:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * Function Name: R_BSP_GetIClkFreqHz
 118:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  **************************************************************************************************
 119:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @brief Returns the system clock frequency.
 120:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @return System clock frequency specified by the r_bsp.
 121:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @details This function returns the system clock frequency. For example, when the system clock is
 122:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * r_bsp_config_h and the r_bsp has completed to specify the clock setting, then even if the user c
 123:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * clock frequency to 60 MHz, the return value is '60000000'.
 124:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  */
 125:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** uint32_t R_BSP_GetIClkFreqHz(void)
 126:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
  45                             		.loc 1 126 1 is_stmt 1
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     return get_iclk_freq_hz();  // Get the MCU specific ICLK frequency
  46                             		.loc 1 127 5
  47                             		.loc 1 127 12 is_stmt 0
  48 0000 04 00 00 00             		bra	_get_iclk_freq_hz
  49                             	.LVL1:
  50                             	.LFE5:
  52                             		.global	___udivdi3
  53                             		.section	.text.R_BSP_SoftwareDelay,"ax",@progbits
  54                             		.global	_R_BSP_SoftwareDelay
  56                             	_R_BSP_SoftwareDelay:
  57                             	.LFB6:
 128:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetIClkFreqHz() */
 129:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 130:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 131:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** /**************************************************************************************************
 132:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * Function Name: R_BSP_SoftwareDelay
 133:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  **************************************************************************************************
 134:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @brief Delay the specified duration in units and return.
 135:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @param[in] delay The number of 'units' to delay.
 136:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @param[in] units The 'base' for the units specified.
 137:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @retval true True if delay executed.
 138:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @retval false False if delay/units combination resulted in overflow/underflow.
 139:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * @details This is function that may be called for all MCU targets to implement a specific wait ti
 140:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * The actual delay time is plus the overhead at a specified duration. The overhead changes under t
 141:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * the compiler, operating frequency and ROM cache. When the operating frequency is low, or the spe
 142:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  * units of microsecond level, please note that the error becomes large.
 143:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****  */
 144:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** bool R_BSP_SoftwareDelay(uint32_t delay, bsp_delay_units_t units)
 145:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** {
  58                             		.loc 1 145 1 is_stmt 1
  59                             	.LVL2:
  60 0000 6E 7A                   		pushm	r7-r10
  61                             	.LCFI0:
  62 0002 71 00 E4                		add	#-28, r0
  63                             	.LCFI1:
 146:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t iclk_rate;
  64                             		.loc 1 146 5
 147:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t delay_cycles;
  65                             		.loc 1 147 5
 148:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t loop_cnt;
  66                             		.loc 1 148 5
 149:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint64_t delay_cycles_64;
  67                             		.loc 1 149 5
 150:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint64_t loop_cnt_64;
  68                             		.loc 1 150 5
 151:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 152:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #ifdef BSP_CFG_PARAM_CHECKING_ENABLE
 153:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     if ((BSP_DELAY_MICROSECS != units) && (BSP_DELAY_MILLISECS != units) && (BSP_DELAY_SECS != unit
  69                             		.loc 1 153 5
 145:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     volatile uint32_t iclk_rate;
  70                             		.loc 1 145 1 is_stmt 0
  71 0005 EF 27                   		mov.L	r2, r7
  72 0007 EF 1A                   		mov.L	r1, r10
  73                             		.loc 1 153 8
  74 0009 77 02 40 42 0F          		cmp	#0xf4240, r2
  75 000e 20 6F                   		beq	.L6
  76                             		.loc 1 153 40 discriminator 1
  77 0010 76 02 E8 03             		cmp	#0x3e8, r2
  78 0014 16                      		beq	.L7
  79                             		.loc 1 153 74 discriminator 2
  80 0015 61 12                   		cmp	#1, r2
  81 0017 3B 9D 00                		bne	.L11
  82                             		.balign 8,3,3
  83                             	.L7:
 154:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 155:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         return(false);
 156:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 157:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** #endif
 158:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 159:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     iclk_rate = R_BSP_GetIClkFreqHz();  /* Get the current ICLK frequency */
  84                             		.loc 1 159 5 is_stmt 1
  85                             	.LBB4:
  86                             	.LBB5:
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetIClkFreqHz() */
  87                             		.loc 1 127 5
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetIClkFreqHz() */
  88                             		.loc 1 127 12 is_stmt 0
  89 001a 05 00 00 00             		bsr	_get_iclk_freq_hz
  90                             	.LVL3:
  91                             	.LBE5:
  92                             	.LBE4:
  93                             		.loc 1 159 15
  94 001e A1 81                   		mov.L	r1, 24[r0]
 160:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 161:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     /*
 162:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * In order to handle all possible combinations of delay/ICLK it is necessary to use 64-bit
 163:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * integers (not all MCUs have floating point support). However, there is no native hw support
 164:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * for 64 bit integers so it requires many more clock cycles. This is not an issue if the
 165:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * requested delay is long enough and the ICLK is fast, but for delays in the low microseconds
 166:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * and/or a slow ICLK we use 32 bit integers to reduce the overhead cycles of this function
 167:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      * by approximately a third and stand the best chance of achieving the requested delay.
 168:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****      */
 169:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     if ( (BSP_DELAY_MICROSECS == units) &&
  95                             		.loc 1 169 5 is_stmt 1
  96                             		.balign 8,3,1
  97                             	.L18:
 170:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****          (delay <= (0xFFFFFFFFUL / iclk_rate)) )  /* Ensure (iclk_rate * delay) will not exceed 32 
 171:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         delay_cycles = ((iclk_rate * delay) / units);
 173:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if (delay_cycles > BSP_PRV_OVERHEAD_CYCLES)
 175:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 176:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles -= BSP_PRV_OVERHEAD_CYCLES;
 177:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 178:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         else
 179:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 180:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles = 0;
 181:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 182:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         loop_cnt = delay_cycles / CPU_CYCLES_PER_LOOP;
 184:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if (0 == loop_cnt)
 186:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 187:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             /* The requested delay is too large/small for the current ICLK. Return false which
 188:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****              * also results in the minimum possible delay. */
 189:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             return(false);
 190:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 191:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 192:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     else
 193:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 194:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 195:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         delay_cycles_64 = (((uint64_t)iclk_rate * (uint64_t)delay) / units);
  98                             		.loc 1 195 9
  99                             		.loc 1 195 29 is_stmt 0
 100 0020 ED 0E 06                		mov.L	24[r0], r14
 101                             		.loc 1 195 68
 102 0023 EF 73                   		mov.L	r7, r3
 103 0025 66 04                   		mov.L	#0, r4
 104                             		.loc 1 195 49
 105 0027 FC 1F AE                		emulu	r10, r14
 106                             		.loc 1 195 68
 107 002a EF E1                   		mov.L	r14, r1
 108 002c EF F2                   		mov.L	r15, r2
 109 002e 05 00 00 00             		bsr	___udivdi3
 110                             	.LVL4:
 111                             		.loc 1 195 25
 112 0032 A0 81                   		mov.L	r1, 8[r0]
 113 0034 A0 8A                   		mov.L	r2, 12[r0]
 196:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 197:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if (delay_cycles_64 > BSP_PRV_OVERHEAD_CYCLES_64)
 114                             		.loc 1 197 9 is_stmt 1
 115                             		.loc 1 197 29 is_stmt 0
 116 0036 ED 0A 02                		mov.L	8[r0], r10
 117                             	.LVL5:
 118 0039 A8 8F                   		mov.L	12[r0], r7
 119                             	.LVL6:
 120                             		.loc 1 197 12
 121 003b 61 07                   		cmp	#0, r7
 122 003d 21 7E                   		bne	.L22
 123 003f 61 2A                   		cmp	#2, r10
 124 0041 24 7A                   		bgtu	.L22
 198:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 199:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles_64 -= BSP_PRV_OVERHEAD_CYCLES_64;
 200:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 201:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         else
 202:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 203:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             delay_cycles = 0;
 125                             		.loc 1 203 13 is_stmt 1
 126                             		.loc 1 203 26 is_stmt 0
 127 0043 3E 05 00                		mov.L	#0, 20[r0]
 128                             		.balign 8,3,1
 129                             	.L15:
 204:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 205:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 206:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         loop_cnt_64 = delay_cycles_64 / CPU_CYCLES_PER_LOOP;
 130                             		.loc 1 206 9 is_stmt 1
 131                             		.loc 1 206 39 is_stmt 0
 132 0046 A8 87                   		mov.L	8[r0], r7
 133 0048 A8 8D                   		mov.L	12[r0], r5
 134 004a 68 27                   		shlr	#2, r7
 135 004c FD DE 5A                		shll	#30, r5, r10
 136 004f 68 25                   		shlr	#2, r5
 137 0051 57 A7                   		or	r10, r7
 138                             		.loc 1 206 21
 139 0053 E3 07                   		mov.L	r7, [r0]
 140 0055 A0 0D                   		mov.L	r5, 4[r0]
 207:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 208:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         if ((loop_cnt_64 > 0xFFFFFFFFUL) || (0 == loop_cnt_64))
 141                             		.loc 1 208 9 is_stmt 1
 142                             		.loc 1 208 26 is_stmt 0
 143 0057 EC 07                   		mov.L	[r0], r7
 144 0059 A8 0F                   		mov.L	4[r0], r7
 145                             		.loc 1 208 12
 146 005b 61 07                   		cmp	#0, r7
 147 005d 21 57                   		bne	.L11
 148                             		.loc 1 208 48
 149 005f EC 07                   		mov.L	[r0], r7
 150                             		.loc 1 208 42
 151                             		
 152 0061 06 95 07 01             	   or	4[r0].L, r7
 153 0065 61 07                   		cmp	#0, r7
 154 0067 20 4D                   		beq	.L11
 209:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 210:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             /* The requested delay is too large/small for the current ICLK. Return false which
 211:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****              * also results in the minimum possible delay. */
 212:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****             return(false);
 213:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 214:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 215:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         /* Casting is valid because it matches the type to the right side or argument. */
 216:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         loop_cnt = (uint32_t)loop_cnt_64;
 155                             		.loc 1 216 9 is_stmt 1 discriminator 1
 156                             		.loc 1 216 20 is_stmt 0 discriminator 1
 157 0069 EC 07                   		mov.L	[r0], r7
 158 006b ED 0A 01                		mov.L	4[r0], r10
 159                             		.loc 1 216 18 discriminator 1
 160 006e A1 07                   		mov.L	r7, 16[r0]
 161                             		.balign 8,3,1
 162                             	.L12:
 217:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 218:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 219:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     delay_wait(loop_cnt);
 163                             		.loc 1 219 5 is_stmt 1
 164 0070 A9 01                   		mov.L	16[r0], r1
 165 0072 05 00 00 00             		bsr	_delay_wait
 166                             	.LVL7:
 220:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 221:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     return(true);
 167                             		.loc 1 221 5
 168                             		.loc 1 221 11 is_stmt 0
 169 0076 66 11                   		mov	#1, r1
 170 0078 5B 11                   		movu.B	r1, r1
 222:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_SoftwareDelay() */
 171                             		.loc 1 222 1
 172 007a 3F 7A 0B                		rtsd	#44, r7-r10
 173                             	.LVL8:
 174                             	.L6:
 159:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 175                             		.loc 1 159 5 is_stmt 1
 176                             	.LBB7:
 177                             	.LBB6:
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetIClkFreqHz() */
 178                             		.loc 1 127 5
 127:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** } /* End of function R_BSP_GetIClkFreqHz() */
 179                             		.loc 1 127 12 is_stmt 0
 180 007d 05 00 00 00             		bsr	_get_iclk_freq_hz
 181                             	.LVL9:
 182                             	.LBE6:
 183                             	.LBE7:
 159:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 184                             		.loc 1 159 15
 185 0081 A1 81                   		mov.L	r1, 24[r0]
 169:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****          (delay <= (0xFFFFFFFFUL / iclk_rate)) )  /* Ensure (iclk_rate * delay) will not exceed 32 
 186                             		.loc 1 169 5 is_stmt 1
 170:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     {
 187                             		.loc 1 170 34 is_stmt 0
 188 0083 A9 84                   		mov.L	24[r0], r4
 189 0085 FC 1F A4                		emulu	r10, r4
 190 0088 61 05                   		cmp	#0, r5
 191 008a 21 96                   		bne	.L18
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 192                             		.loc 1 172 9 is_stmt 1
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 193                             		.loc 1 172 36 is_stmt 0
 194 008c ED 0E 06                		mov.L	24[r0], r14
 195 008f 4F AE                   		mul	r10, r14
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 196                             		.loc 1 172 45
 197 0091 FB A2 83 DE 1B 43       		mov.L	#0x431bde83, r10
 198                             	.LVL10:
 199 0097 FC 1F AE                		emulu	r10, r14
 200 009a FD 92 F7                		shlr	#18, r15, r7
 201                             	.LVL11:
 172:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 202                             		.loc 1 172 22
 203 009d A1 0F                   		mov.L	r7, 20[r0]
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 204                             		.loc 1 174 9 is_stmt 1
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 205                             		.loc 1 174 26 is_stmt 0
 206 009f A9 0F                   		mov.L	20[r0], r7
 174:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 207                             		.loc 1 174 12
 208 00a1 61 27                   		cmp	#2, r7
 209 00a3 24 2B                   		bgtu	.L40
 180:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 210                             		.loc 1 180 13 is_stmt 1
 180:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 211                             		.loc 1 180 26 is_stmt 0
 212 00a5 3E 05 00                		mov.L	#0, 20[r0]
 213                             		.balign 8,3,1
 214                             	.L10:
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 215                             		.loc 1 183 9 is_stmt 1
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 216                             		.loc 1 183 33 is_stmt 0
 217 00a8 A9 0F                   		mov.L	20[r0], r7
 218 00aa 68 27                   		shlr	#2, r7
 183:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c **** 
 219                             		.loc 1 183 18
 220 00ac A1 07                   		mov.L	r7, 16[r0]
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 221                             		.loc 1 185 9 is_stmt 1
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 222                             		.loc 1 185 15 is_stmt 0
 223 00ae A9 07                   		mov.L	16[r0], r7
 185:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         {
 224                             		.loc 1 185 12
 225 00b0 61 07                   		cmp	#0, r7
 226 00b2 21 BE                   		bne	.L12
 227                             		.balign 8,3,1
 228                             	.L11:
 155:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****     }
 229                             		.loc 1 155 15
 230 00b4 66 01                   		mov	#0, r1
 231 00b6 5B 11                   		movu.B	r1, r1
 232                             		.loc 1 222 1
 233 00b8 3F 7A 0B                		rtsd	#44, r7-r10
 234                             	.L22:
 199:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 235                             		.loc 1 199 13 is_stmt 1
 199:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 236                             		.loc 1 199 29 is_stmt 0
 237 00bb ED 0A 02                		mov.L	8[r0], r10
 238 00be A8 8F                   		mov.L	12[r0], r7
 239 00c0 71 A5 FE                		add	#-2, r10, r5
 240 00c3 FD 74 27 FF             		adc	#-1, r7
 241 00c7 A0 85                   		mov.L	r5, 8[r0]
 242 00c9 A0 8F                   		mov.L	r7, 12[r0]
 243 00cb 38 7B FF                		bra	.L15
 244                             	.L40:
 176:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 245                             		.loc 1 176 13 is_stmt 1
 176:../src/smc_gen/r_bsp/mcu/all/r_bsp_common.c ****         }
 246                             		.loc 1 176 26 is_stmt 0
 247 00ce A9 0F                   		mov.L	20[r0], r7
 248 00d0 60 27                   		sub	#2, r7
 249 00d2 A1 0F                   		mov.L	r7, 20[r0]
 250 00d4 2E D4                   		bra	.L10
 251                             	.LFE6:
 319                             	.Letext0:
 320                             		.file 2 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 321                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 322                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 323                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 324                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 325                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 326                             		.file 8 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\smc
 327                             		.file 9 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\smc
 328                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
 329                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\sm
