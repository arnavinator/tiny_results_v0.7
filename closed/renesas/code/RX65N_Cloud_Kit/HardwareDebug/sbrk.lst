   1                             		.file	"sbrk.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.sbrk,"ax",@progbits
   5                             		.global	_sbrk
   7                             	_sbrk:
   8                             	.LFB3:
   9                             		.file 1 "../src/smc_gen/r_bsp/mcu/all/sbrk.c"
   1:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
   2:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * DISCLAIMER
   3:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prote
   5:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * applicable laws, including copyright laws.
   6:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF 
   8:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIM
   9:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AF
  10:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY RE
  11:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * this software. 
  14:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** *
  15:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Copyright (C) 2013 Renesas Electronics Corporation. All rights reserved.
  16:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  17:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  18:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * File Name    : sbrk.c
  19:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Description  : Configures the MCU heap memory.  The size of the heap is defined by the macro HEAP
  20:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  21:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  22:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * History : DD.MM.YYYY Version  Description
  23:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** *         : 28.02.2019 3.00     Merged processing of all devices.
  24:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** *                               Added support for GNUC and ICCRX.
  25:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** *                               Fixed coding style.
  26:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** *         : 26.07.2019 3.01     Fixed coding style.
  27:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  28:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  29:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  30:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** Includes   <System Includes> , "Project Includes"
  31:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  32:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** #include "sbrk.h"
  33:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  34:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /* Only use this file if heap is enabled in r_bsp_config. */
  35:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** #if BSP_CFG_HEAP_BYTES > 0
  36:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  37:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /* When using the user startup program, disable the following code. */
  38:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** #if BSP_CFG_STARTUP_DISABLE == 0
  39:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  40:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** #if defined(__CCRX__) || defined(__GNUC__)
  41:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  42:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  43:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** Macro definitions
  44:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  45:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  46:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  47:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** Typedef definitions
  48:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  49:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  50:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  51:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** Exported global variables (to be accessed by other files)
  52:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  53:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  54:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  55:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** Private global variables and functions
  56:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  57:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /* Declare memory heap area */
  58:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** static u_heap_type_t s_heap_area;
  59:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  60:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /* End address allocated by sbrk (CC-RX and GNURX+NEWLIB) */
  61:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** static int8_t *sp_brk=(int8_t *)&s_heap_area;
  62:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  63:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** #if defined(__GNUC__)
  64:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /* Start address of allocated heap area (GNURX+OPTLIB only) */
  65:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** int8_t *_heap_of_memory=(int8_t *)&s_heap_area;
  66:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /* End address of allocated heap area (GNURX+OPTLIB only) */
  67:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** int8_t *_last_heap_object=(int8_t *)&s_heap_area;
  68:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** #endif /* defined(__GNUC__) */
  69:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  70:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
  71:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Function name: sbrk
  72:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Description  : This function configures MCU memory area allocation. (CC-RX and GNURX+NEWLIB)
  73:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Arguments    : size - 
  74:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** *                    assigned area size
  75:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Return value : Start address of allocated area (pass)
  76:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** *                -1 (failure)
  77:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
  78:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** int8_t  *sbrk(size_t size)
  79:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** {
  10                             		.loc 1 79 1
  11                             	.LVL0:
  80:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     int8_t  *p_area;
  12                             		.loc 1 80 5
  81:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  82:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     if ((sp_brk + size) > (s_heap_area.heap + BSP_CFG_HEAP_BYTES))
  13                             		.loc 1 82 5
  14                             		.loc 1 82 17 is_stmt 0
  15 0000 FB 42 00 00 00 00       		mov.L	#.LANCHOR0, r4
  16 0006 EC 45                   		mov.L	[r4], r5
  17 0008 4B 51                   		add	r5, r1
  18                             	.LVL1:
  19                             		.loc 1 82 8
  20 000a 74 01 00 32 00 00       		cmp	#.LANCHOR1+12800, r1
  21 0010 24 07                   		bgtu	.L3
  83:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     {
  84:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****         /* Empty area size  */
  85:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****         p_area = (int8_t *)-1;
  86:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     }
  87:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     else
  88:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     {
  89:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****         /* Area assignment */
  90:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****         p_area = sp_brk;
  22                             		.loc 1 90 9 is_stmt 1
  23                             	.LVL2:
  91:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  92:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****         /* End address update */
  93:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****         sp_brk += size;
  24                             		.loc 1 93 9
  25                             		.loc 1 93 16 is_stmt 0
  26 0012 E3 41                   		mov.L	r1, [r4]
  94:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     }
  95:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
  96:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     /* Return result */
  97:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     return p_area;
  98:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** } /* End of function sbrk() */
  27                             		.loc 1 98 1
  28 0014 EF 51                   		mov.L	r5, r1
  29 0016 02                      		rts
  30                             	.LVL3:
  31                             	.L3:
  85:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     }
  32                             		.loc 1 85 16
  33 0017 FB 56 FF                		mov.L	#-1, r5
  34                             	.LVL4:
  97:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** } /* End of function sbrk() */
  35                             		.loc 1 97 5 is_stmt 1
  36                             		.loc 1 98 1 is_stmt 0
  37 001a EF 51                   		mov.L	r5, r1
  38 001c 02                      		rts
  39                             	.LFE3:
  41                             		.section	.text._top_of_heap,"ax",@progbits
  42                             		.global	__top_of_heap
  44                             	__top_of_heap:
  45                             	.LFB4:
  99:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** 
 100:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** #if defined(__GNUC__)
 101:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** /**************************************************************************************************
 102:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Function name: _top_of_heap
 103:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Description  : This function returns end address of reserved heap area. (GNURX+OPTLIB only)
 104:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Arguments    : none
 105:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** * Return value : End address of reserved heap area
 106:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** ***************************************************************************************************
 107:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** int8_t *_top_of_heap(void)
 108:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** {
  46                             		.loc 1 108 1 is_stmt 1
 109:../src/smc_gen/r_bsp/mcu/all/sbrk.c ****     return (int8_t *)(s_heap_area.heap + BSP_CFG_HEAP_BYTES);
  47                             		.loc 1 109 5
 110:../src/smc_gen/r_bsp/mcu/all/sbrk.c **** } /* End of function End of function sbrk()() */
  48                             		.loc 1 110 1 is_stmt 0
  49 0000 FB 12 00 32 00 00       		mov.L	#.LANCHOR1+12800, r1
  50 0006 02                      		rts
  51                             	.LFE4:
  53                             		.global	__last_heap_object
  54                             		.global	__heap_of_memory
  55                             		.global	__s1ptr
  56                             		.section	.bss._s1ptr,"aw",@nobits
  57                             		.balign 4
  60                             	__s1ptr:
  61 0000 00 00 00 00             		.zero	4
  62                             		.section	.bss.s_heap_area,"aw",@nobits
  63                             		.balign 4
  64                             		.set	.LANCHOR1,. + 0
  67                             	_s_heap_area:
  68 0000 00 00 00 00 00 00 00 00 		.zero	12800
  68      00 00 00 00 00 00 00 00 
  68      00 00 00 00 00 00 00 00 
  68      00 00 00 00 00 00 00 00 
  68      00 00 00 00 00 00 00 00 
  69                             		.section	.data._heap_of_memory,"aw"
  70                             		.balign 4
  73                             	__heap_of_memory:
  74 0000 00 00 00 00             		.long	_s_heap_area
  75                             		.section	.data._last_heap_object,"aw"
  76                             		.balign 4
  79                             	__last_heap_object:
  80 0000 00 00 00 00             		.long	_s_heap_area
  81                             		.section	.data.sp_brk,"aw"
  82                             		.balign 4
  83                             		.set	.LANCHOR0,. + 0
  86                             	_sp_brk:
  87 0000 00 00 00 00             		.long	_s_heap_area
 122                             	.Letext0:
 123                             		.file 2 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 124                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 125                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 126                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 127                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 128                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 129                             		.file 8 "../src/smc_gen/r_bsp/mcu/all/sbrk.h"
