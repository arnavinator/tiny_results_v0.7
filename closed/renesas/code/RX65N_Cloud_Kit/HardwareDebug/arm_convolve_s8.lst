   1                             		.file	"arm_convolve_s8.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.arm_convolve_s8,"ax",@progbits
   5                             		.global	_arm_convolve_s8
   7                             	_arm_convolve_s8:
   8                             	.LFB82:
   9                             		.file 1 "../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c"
   1:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** /*
   2:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
   4:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * SPDX-License-Identifier: Apache-2.0
   5:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
   6:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * not use this file except in compliance with the License.
   8:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * You may obtain a copy of the License at
   9:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  10:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * www.apache.org/licenses/LICENSE-2.0
  11:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  12:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Unless required by applicable law or agreed to in writing, software
  13:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * See the License for the specific language governing permissions and
  16:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * limitations under the License.
  17:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  */
  18:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  19:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** /**************************************************************************************************
  20:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * DISCLAIMER
  21:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * This software is supplied by Renesas Electronics Corporation and is only intended for use with R
  22:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prot
  23:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * applicable laws, including copyright laws.
  24:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
  25:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
  26:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAI
  27:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS A
  28:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY R
  29:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DA
  30:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Renesas reserves the right, without notice, to make changes to this software and to discontinue 
  31:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * this software.
  32:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  33:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * rmpa instruction is applied for RX devices
  34:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  **************************************************************************************************
  36:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  37:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** /* ----------------------------------------------------------------------
  38:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Project:      CMSIS NN Library
  39:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Title:        arm_convolve_s8.c
  40:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Description:  s8 version of convolution using symmetric quantization.
  41:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  42:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * $Date:        January 26, 2021
  43:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * $Revision:    V.2.0.4
  44:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  45:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Target Processor:  Cortex-M cores
  46:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  47:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * -------------------------------------------------------------------- */
  48:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  49:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #include "arm_nnfunctions.h"
  50:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #include "arm_nnsupportfunctions.h"
  51:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  52:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** /**
  53:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *  @ingroup groupNN
  54:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  */
  55:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  56:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** /**
  57:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * @addtogroup NNConv
  58:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * @{
  59:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  */
  60:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  61:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** /*
  62:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Basic s8 convolution function.
  63:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  64:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * Refer header file for details. Optimal use case for the DSP/MVE implementation is when input and
  65:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  * are multiples of 4 or atleast greater than 4.
  66:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  *
  67:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****  */
  68:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  69:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #if defined (RX_DSP_INT8)
  70:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** q31_t a_in_offset[64];
  71:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #endif
  72:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  73:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** arm_status arm_convolve_s8(const cmsis_nn_context *ctx,
  74:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const cmsis_nn_conv_params *conv_params,
  75:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const cmsis_nn_per_channel_quant_params *quant_params,
  76:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const cmsis_nn_dims *input_dims,
  77:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const q7_t *input_data,
  78:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const cmsis_nn_dims *filter_dims,
  79:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const q7_t *filter_data,
  80:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const cmsis_nn_dims *bias_dims,
  81:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const int32_t *bias_data,
  82:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            const cmsis_nn_dims *output_dims,
  83:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                            q7_t *output_data)
  84:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** {
  10                             		.loc 1 84 1
  11                             	.LVL0:
  12 0000 6E 6D                   		pushm	r6-r13
  13                             	.LCFI0:
  14 0002 72 00 34 FF             		add	#-204, r0
  15                             	.LCFI1:
  85:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** (void)bias_dims;
  16                             		.loc 1 85 1
  86:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     q15_t *buffer_a = (q15_t *)ctx->buf;
  17                             		.loc 1 86 5
  84:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** (void)bias_dims;
  18                             		.loc 1 84 1 is_stmt 0
  19 0006 75 47 F0                		mov.L	#0xf0, r7
  20 0009 4B 07                   		add	r0, r7
  21 000b ED 7A 05                		mov.L	20[r7], r10
  22 000e A8 7D                   		mov.L	4[r7], r5
  23 0010 5C 4F                   		movu.W	[r4], r15
  24 0012 E7 0F 20                		mov.L	r15, 128[r0]
  25 0015 E4 70 08                		mov.L	[r7], 32[r0]
  26 0018 E5 70 02 10             		mov.L	8[r7], 64[r0]
  27 001c E5 70 04 16             		mov.L	16[r7], 88[r0]
  28 0020 E5 70 06 1C             		mov.L	24[r7], 112[r0]
  29                             		.loc 1 86 12
  30 0024 E0 10                   		mov.L	[r1], [r0]
  31                             	.LVL1:
  87:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  88:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t input_batches = input_dims->n;
  32                             		.loc 1 88 5 is_stmt 1
  89:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t input_x = input_dims->w;
  33                             		.loc 1 89 5
  34                             		.loc 1 89 40 is_stmt 0
  35 0026 A8 C1                   		mov.L	8[r4], r1
  36                             	.LVL2:
  90:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t input_y = input_dims->h;
  37                             		.loc 1 90 5 is_stmt 1
  38                             		.loc 1 90 40 is_stmt 0
  39 0028 ED 4B 01                		mov.L	4[r4], r11
  40                             	.LVL3:
  91:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t input_ch = input_dims->c;
  41                             		.loc 1 91 5 is_stmt 1
  42                             		.loc 1 91 41 is_stmt 0
  43 002b A8 CF                   		mov.L	12[r4], r7
  44                             	.LVL4:
  92:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t kernel_x = filter_dims->w;
  45                             		.loc 1 92 5 is_stmt 1
  46                             		.loc 1 92 42 is_stmt 0
  47 002d E5 50 02 1D             		mov.L	8[r5], 116[r0]
  48                             	.LVL5:
  93:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t kernel_y = filter_dims->h;
  49                             		.loc 1 93 5 is_stmt 1
  50                             		.loc 1 93 42 is_stmt 0
  51 0031 E5 50 01 1E             		mov.L	4[r5], 120[r0]
  52                             	.LVL6:
  94:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t output_x = output_dims->w;
  53                             		.loc 1 94 5 is_stmt 1
  54                             		.loc 1 94 42 is_stmt 0
  55 0035 ED A5 02                		mov.L	8[r10], r5
  56                             	.LVL7:
  95:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t output_y = output_dims->h;
  57                             		.loc 1 95 5 is_stmt 1
  58                             		.loc 1 95 42 is_stmt 0
  59 0038 ED A4 01                		mov.L	4[r10], r4
  60                             	.LVL8:
  96:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t output_ch = output_dims->c;
  61                             		.loc 1 96 5 is_stmt 1
  62                             		.loc 1 96 43 is_stmt 0
  63 003b ED AA 03                		mov.L	12[r10], r10
  64                             	.LVL9:
  97:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
  98:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t pad_x = conv_params->padding.w;
  65                             		.loc 1 98 5 is_stmt 1
  66                             		.loc 1 98 48 is_stmt 0
  67 003e E5 20 04 21             		mov.L	16[r2], 132[r0]
  68                             	.LVL10:
  99:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t pad_y = conv_params->padding.h;
  69                             		.loc 1 99 5 is_stmt 1
  70                             		.loc 1 99 48 is_stmt 0
  71 0042 E5 20 05 22             		mov.L	20[r2], 136[r0]
  72                             	.LVL11:
 100:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t stride_x = conv_params->stride.w;
  73                             		.loc 1 100 5 is_stmt 1
  74                             		.loc 1 100 50 is_stmt 0
  75 0046 E5 20 02 23             		mov.L	8[r2], 140[r0]
  76                             	.LVL12:
 101:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const uint16_t stride_y = conv_params->stride.h;
  77                             		.loc 1 101 5 is_stmt 1
  78                             		.loc 1 101 50 is_stmt 0
  79 004a E5 20 03 24             		mov.L	12[r2], 144[r0]
  80                             	.LVL13:
 102:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 103:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const int32_t input_offset = conv_params->input_offset;
  81                             		.loc 1 103 5 is_stmt 1
  82                             		.loc 1 103 19 is_stmt 0
  83 004e E4 20 1F                		mov.L	[r2], 124[r0]
  84                             	.LVL14:
 104:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const int32_t out_offset = conv_params->output_offset;
  85                             		.loc 1 104 5 is_stmt 1
  86                             		.loc 1 104 19 is_stmt 0
  87 0051 E5 20 01 03             		mov.L	4[r2], 12[r0]
  88                             	.LVL15:
 105:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const int32_t out_activation_min = conv_params->activation.min;
  89                             		.loc 1 105 5 is_stmt 1
  90                             		.loc 1 105 19 is_stmt 0
  91 0055 E5 20 08 26             		mov.L	32[r2], 152[r0]
  92                             	.LVL16:
 106:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     const int32_t out_activation_max = conv_params->activation.max;
  93                             		.loc 1 106 5 is_stmt 1
  94                             		.loc 1 106 19 is_stmt 0
  95 0059 E5 20 09 27             		mov.L	36[r2], 156[r0]
  96                             	.LVL17:
 107:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     int32_t *output_mult = quant_params->multiplier;
  97                             		.loc 1 107 5 is_stmt 1
  98                             		.loc 1 107 14 is_stmt 0
  99 005d E4 30 13                		mov.L	[r3], 76[r0]
 100                             	.LVL18:
 108:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     int32_t *output_shift = quant_params->shift;
 101                             		.loc 1 108 5 is_stmt 1
 102                             		.loc 1 108 14 is_stmt 0
 103 0060 E5 30 01 14             		mov.L	4[r3], 80[r0]
 104                             	.LVL19:
 109:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 110:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     int i_batch;
 105                             		.loc 1 110 5 is_stmt 1
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     for (i_batch = 0; i_batch < input_batches; i_batch++)
 106                             		.loc 1 111 5
 107 0064 61 0F                   		cmp	#0, r15
 108 0066 3A 07 03                		beq	.L47
 109                             	.LBB8:
 112:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     {
 113:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #if defined(ARM_MATH_MVEI)
 114:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* Generate upto four columns from the input tensor a GEMM computation */
 115:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q7_t *im2col_buf = (q7_t *)buffer_a;
 116:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q7_t *out = output_data;
 117:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         int32_t buffer_fill_cnt = 0;
 118:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         int32_t padded = 0;
 119:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         const int32_t num_elem = kernel_x * kernel_y * input_ch;
 120:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 121:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* This part implements the im2col function */
 122:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 123:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 124:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 125:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 126:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 for (int i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y
 127:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                      i_ker_y++)
 128:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 129:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     for (int i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - p
 130:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 131:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 132:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 133:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 134:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             memset(im2col_buf, (int8_t)-input_offset, sizeof(q7_t) * input_ch);
 135:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             padded = 1;
 136:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 137:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         else
 138:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 139:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             arm_memcpy_q7(im2col_buf, input_data + (i_ker_y * input_x + i_ker_x) * 
 140:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 141:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         im2col_buf += input_ch;
 142:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 143:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 144:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 145:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 buffer_fill_cnt++;
 146:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 147:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 /* Computation is filed for every 4 columns */
 148:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 if (buffer_fill_cnt == 4 && (padded == 0))
 149:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 150:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     buffer_fill_cnt = 0;
 151:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
 152:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 153:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         int32_t sum_row;
 154:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         int32_t acc[4];
 155:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 156:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         (void)arm_nn_mat_mul_core_4x_s8(
 157:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             num_elem, num_elem, (q7_t *)buffer_a, filter_data + num_elem * i_out_ch
 158:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         int32x4_t s_offset = vdupq_n_s32(sum_row);
 159:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 160:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         int32x4_t res = vldrwq_s32(acc);
 161:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         s_offset = vmulq_n_s32(s_offset, input_offset);
 162:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         if (bias_data)
 163:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 164:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             res = vaddq_n_s32(res, bias_data[i_out_ch]);
 165:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 166:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         res = vaddq_s32(res, s_offset);
 167:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         res = arm_requantize_mve(res, output_mult[i_out_ch], output_shift[i_out_ch]
 168:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         res = vaddq_n_s32(res, out_offset);
 169:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 170:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         res = vmaxq_s32(res, vdupq_n_s32(out_activation_min));
 171:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         res = vminq_s32(res, vdupq_n_s32(out_activation_max));
 172:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 173:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         const uint32x4_t scatter_offset = {0, output_ch, output_ch * 2, output_ch *
 174:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         vstrbq_scatter_offset_s32(out, scatter_offset, res);
 175:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         out++;
 176:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 177:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     out += (3 * output_ch);
 178:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     im2col_buf = (q7_t *)buffer_a;
 179:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 180:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 else if (buffer_fill_cnt == 4 && (padded != 0))
 181:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 182:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     buffer_fill_cnt = 0;
 183:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     out = arm_nn_mat_mult_s8(filter_data,
 184:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              (q7_t *)buffer_a,
 185:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              output_ch,
 186:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              4,
 187:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              output_shift,
 188:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              output_mult,
 189:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              out_offset,
 190:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              input_offset,
 191:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              0,
 192:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              out_activation_min,
 193:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              out_activation_max,
 194:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              num_elem,
 195:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              bias_data,
 196:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                              out);
 197:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 198:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     im2col_buf = (q7_t *)buffer_a;
 199:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     padded = 0;
 200:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 201:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 202:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 203:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* Handle left over columns */
 204:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         if (buffer_fill_cnt != 0)
 205:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 206:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             out = arm_nn_mat_mult_s8(filter_data,
 207:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      (q7_t *)buffer_a,
 208:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      output_ch,
 209:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      buffer_fill_cnt,
 210:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      output_shift,
 211:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      output_mult,
 212:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      out_offset,
 213:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      input_offset,
 214:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      0,
 215:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      out_activation_min,
 216:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      out_activation_max,
 217:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      num_elem,
 218:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      bias_data,
 219:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                      out);
 220:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 221:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 222:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #elif defined(ARM_MATH_DSP)
 223:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;
 224:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 225:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* Generate two columns from the input tensor a GEMM computation */
 226:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q15_t *two_column_buf = buffer_a;
 227:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q7_t *out = output_data;
 228:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 229:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* This part implements the im2col function */
 230:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 231:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 232:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 233:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 234:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + k
 235:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 236:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x
 237:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 238:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 239:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 240:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 241:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             /* Filling 0 for out-of-bound paddings */
 242:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 243:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 244:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         else
 245:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 246:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             /* Copying the pixel data to column */
 247:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * 
 248:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                       two_column_buf,
 249:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                       input_ch,
 250:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                       input_offset);
 251:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 252:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         two_column_buf += input_ch;
 253:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 254:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 255:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 256:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 /* Computation is filed for every 2 columns */
 257:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 258:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 259:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 260:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         buffer_a,
 261:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         output_ch,
 262:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         output_shift,
 263:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         output_mult,
 264:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         out_offset,
 265:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         out_activation_min,
 266:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         out_activation_max,
 267:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         input_ch * kernel_y * kernel_x,
 268:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         bias_data,
 269:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                         out);
 270:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 271:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     /* counter reset */
 272:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     two_column_buf = buffer_a;
 273:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 274:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 275:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 276:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 277:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* left-over because odd number of output pixels */
 278:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         if (two_column_buf != buffer_a)
 279:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 280:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             const q7_t *ker_a = filter_data;
 281:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             int i;
 282:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 283:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             for (i = 0; i < output_ch; i++)
 284:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 285:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 /* Load the accumulator with bias first */
 286:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 q31_t sum = 0;
 287:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 if (bias_data)
 288:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 289:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     sum = bias_data[i];
 290:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 291:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 292:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 /* Point to the beginning of the im2col buffer where the input is available as a re
 293:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const q15_t *ip_as_col = buffer_a;
 294:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 295:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 /* 4 multiply and accumulates are done in one loop. */
 296:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 297:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 298:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 while (col_count)
 299:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 300:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     q31_t ker_a1, ker_a2;
 301:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     q31_t ip_b1, ip_b2;
 302:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 303:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 304:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 305:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 306:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     sum = __SMLAD(ker_a1, ip_b1, sum);
 307:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 308:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     sum = __SMLAD(ker_a2, ip_b2, sum);
 309:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 310:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     col_count--;
 311:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 312:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 /* Handle left over mac */
 313:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 col_count = input_ch * kernel_y * kernel_x & 0x3;
 314:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 while (col_count)
 315:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 316:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     q7_t ker_a1 = *ker_a++;
 317:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     q15_t ip_b1 = *ip_as_col++;
 318:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     sum += ker_a1 * ip_b1;
 319:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     col_count--;
 320:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 321:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 322:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 323:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 sum += out_offset;
 324:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 sum = MAX(sum, out_activation_min);
 325:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 sum = MIN(sum, out_activation_max);
 326:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 *out++ = (q7_t)sum;
 327:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 328:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 329:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #elif defined(RX_DSP_INT8)
 330:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 331:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         int32_t i_out_y, i_out_x, i_ker_y, i_ker_x;
 332:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 333:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* Generate two columns from the input tensor a GEMM computation */
 334:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q7_t *out = output_data;
 335:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 336:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q7_t *column_buf = (q7_t*)buffer_a;
 337:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 338:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 339:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         const uint16_t num_col_a = input_ch * kernel_y * kernel_x;
 110                             		.loc 1 339 24 is_stmt 0
 111 0069 AF 0B                   		mov.L	116[r0], r3
 112                             	.LVL20:
 113 006b ED 0F 1E                		mov.L	120[r0], r15
 114                             	.LVL21:
 115 006e 4F F3                   		mul	r15, r3
 116 0070 FB FE FF FF 00          		mov.L	#0xffff, r15
 117 0075 53 AF                   		and	r10, r15
 118 0077 E7 0F 09                		mov.L	r15, 36[r0]
 119 007a 4F 73                   		mul	r7, r3
 120 007c 97 83                   		mov.W	r3, 60[r0]
 121 007e 77 24 FF FF 00          		and #0xffff, r4
 122                             	.LVL22:
 123 0083 A6 8C                   		mov.L	r4, 108[r0]
 124 0085 77 25 FF FF 00          		and #0xffff, r5
 125                             	.LVL23:
 126 008a A3 85                   		mov.L	r5, 56[r0]
 127 008c FB 8E FF FF 00          		mov.L	#0xffff, r8
 128 0091 53 18                   		and	r1, r8
 129 0093 77 2B FF FF 00          		and #0xffff, r11
 130                             	.LVL24:
 131 0098 E7 0B 05                		mov.L	r11, 20[r0]
 132 009b DF 3A                   		mov.W	r3, r10
 133                             	.LVL25:
 134 009d 60 1A                   		sub	#1, r10
 135 009f FB CE FF FF 00          		mov.L	#0xffff, r12
 136 00a4 53 7C                   		and	r7, r12
 340:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 341:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         // input_offset
 342:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         int i = 0;
 343:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q31_t t_offset_base;
 344:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         const q7_t *ip_a0x = filter_data;
 345:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 346:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         while(i < output_ch)
 347:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 348:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             uint16_t col_count = num_col_a;
 349:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             t_offset_base = 0;
 350:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             while(col_count) 
 351:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 352:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 t_offset_base += (q31_t)(*ip_a0x++);
 353:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 col_count--;
 354:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 355:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             a_in_offset[i] = t_offset_base * input_offset;
 356:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             i++;
 357:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 358:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 359:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 360:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* This part implements the im2col function */
 361:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 362:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 363:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 364:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + k
 366:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x
 368:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 369:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 370:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 371:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 372:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             /* Filling 0 for out-of-bound paddings */
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             memset(column_buf, (int8_t)-input_offset, sizeof(q7_t) * input_ch); // 
 374:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 375:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 376:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         else
 377:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 378:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             /* Copying the pixel data to column */
 379:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             memcpy(column_buf, input_data + (i_ker_y * input_x + i_ker_x) * input_c
 380:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 381:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         column_buf += input_ch;
 383:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 384:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 385:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 386:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 /* Computation is filed for every 1 column */
 387:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int32_t *out_shift = output_shift;
 388:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int32_t *out_mult = output_mult;
 389:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int16_t activation_min = out_activation_min;
 390:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int16_t activation_max = out_activation_max;
 391:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int32_t *bias = bias_data;
 392:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const q7_t *ip_a0 = filter_data;
 393:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const q31_t *in_offset = a_in_offset;
 394:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 395:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 int32_t row_count;
 396:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 row_count = output_ch;
 397:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 398:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 while(row_count)  
 399:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 400:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     const q7_t *ip_b0 = (q7_t*)buffer_a;
 401:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 402:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     q31_t ch_0_out_0 = *bias++ + *in_offset++;
 403:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 404:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     uint16_t col_count = num_col_a;
 405:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #if defined __CCRX__ || defined __CCRL__
 406:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 					ch_0_out_0 = __rmpab(ch_0_out_0, col_count, (signed char *)ip_a0,(signed char *)ip_b0)
 407:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 408:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #else
 409:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     asm inline ("mov.l %1, r1\n"
 410:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 "mov.l %2, r2\n"
 411:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 "mov.l %3, r3\n"
 412:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 "mov.l %0, r4\n"
 413:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 "rmpa.b\n"
 414:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 "mov.l r4, %0\n"
 415:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 "mov.l r1, %1\n"
 416:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 : "+r" (ch_0_out_0), "+r" (ip_a0)
 417:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 : "r" (ip_b0), "r" (col_count)
 418:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 :  "r1", "r2", "r3", "r4", "r5", "r6", "cc", "memory");
 419:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #endif
 420:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult++, *out_shift++);
 421:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 += out_offset;
 422:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 423:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 424:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     *out++ = (q7_t)ch_0_out_0;
 426:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 427:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     row_count--;
 428:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 429:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     /* counter reset */
 430:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 column_buf = (q7_t*)buffer_a;
 431:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 432:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 433:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #else
 434:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
 435:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         (void)buffer_a;
 436:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         int32_t i_out_ch, i_out_y, i_out_x, i_input_ch, i_ker_y, i_ker_x;
 437:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         int32_t conv_out;
 438:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 439:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         for (i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
 440:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 441:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 442:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 443:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 444:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 445:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     conv_out = 0;
 446:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 447:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     const int32_t base_idx_y = stride_y * i_out_y - pad_y;
 448:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     const int32_t base_idx_x = stride_x * i_out_x - pad_x;
 449:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 450:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     const int32_t ker_y_start = MAX(0, -base_idx_y);
 451:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     const int32_t ker_x_start = MAX(0, -base_idx_x);
 452:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 453:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     const int32_t ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 454:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     const int32_t ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 455:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 456:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     for (i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 457:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 458:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         for (i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 459:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 460:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             const int32_t in_row = base_idx_y + i_ker_y;
 461:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             const int32_t in_col = base_idx_x + i_ker_x;
 462:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             for (i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 463:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             {
 464:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 conv_out +=
 465:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                     (input_data[(in_row * input_x + in_col) * input_ch + i_input_ch
 466:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                     filter_data[i_out_ch * input_ch * kernel_y * kernel_x +
 467:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                                 (i_ker_y * kernel_x + i_ker_x) * input_ch + i_input
 468:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             }
 469:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         }
 470:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 471:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     if (bias_data)
 472:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 473:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         conv_out += bias_data[i_out_ch];
 474:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 475:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     conv_out = arm_nn_requantize(conv_out, output_mult[i_out_ch], output_shift[i_ou
 476:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     conv_out += out_offset;
 477:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     conv_out = MAX(conv_out, out_activation_min);
 478:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     conv_out = MIN(conv_out, out_activation_max);
 479:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int8_t)co
 480:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 481:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 482:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 483:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #endif
 484:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         /* Advance to the next batch */
 485:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         input_data += (input_x * input_y * input_ch);
 137                             		.loc 1 485 32
 138 00a6 EF B3                   		mov.L	r11, r3
 139 00a8 4F 83                   		mul	r8, r3
 486:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         output_data += (output_x * output_y * output_ch);
 140                             		.loc 1 486 34
 141 00aa EF 54                   		mov.L	r5, r4
 142 00ac AE 8F                   		mov.L	108[r0], r7
 143                             	.LVL26:
 144 00ae 4F 74                   		mul	r7, r4
 145 00b0 EF F5                   		mov.L	r15, r5
 146 00b2 6C 25                   		shll	#2, r5
 147 00b4 5F A7                   		movu.W	r10, r7
 148                             	.LBB9:
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 149                             		.loc 1 373 48
 150 00b6 ED 0A 1F                		mov.L	124[r0], r10
 151 00b9 7E 1A                   		neg	r10
 152                             	.LBE9:
 485:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         output_data += (output_x * output_y * output_ch);
 153                             		.loc 1 485 42
 154 00bb 4F C3                   		mul	r12, r3
 155 00bd E7 03 25                		mov.L	r3, 148[r0]
 156                             		.loc 1 486 45
 157 00c0 4F 4F                   		mul	r4, r15
 158 00c2 E7 0F 29                		mov.L	r15, 164[r0]
 159 00c5 70 55 00 00 00 00       		add	#.LANCHOR0, r5
 160 00cb E7 05 28                		mov.L	r5, 160[r0]
 161                             	.LBE8:
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     {
 162                             		.loc 1 111 18
 163 00ce 3E 8A 00                		mov.L	#0, 104[r0]
 164 00d1 62 17                   		add	#1, r7
 165 00d3 E7 07 2A                		mov.L	r7, 168[r0]
 166                             	.LBB20:
 167                             	.LBB16:
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 168                             		.loc 1 373 29
 169 00d6 CF AD                   		mov.B	r10, r13
 170 00d8 EF 8F                   		mov.L	r8, r15
 171 00da EF DE                   		mov.L	r13, r14
 172 00dc EF CD                   		mov.L	r12, r13
 173                             	.LVL27:
 174                             		.balign 8,3,1
 175                             	.L30:
 176                             	.LBE16:
 331:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 177                             		.loc 1 331 9 is_stmt 1
 334:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 178                             		.loc 1 334 9
 336:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 179                             		.loc 1 336 9
 339:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 180                             		.loc 1 339 9
 342:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         q31_t t_offset_base;
 181                             		.loc 1 342 9
 343:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         const q7_t *ip_a0x = filter_data;
 182                             		.loc 1 343 9
 344:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 183                             		.loc 1 344 9
 346:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 184                             		.loc 1 346 9
 346:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 185                             		.loc 1 346 14 is_stmt 0
 186 00de ED 0A 09                		mov.L	36[r0], r10
 187 00e1 61 0A                   		cmp	#0, r10
 188 00e3 20 37                   		beq	.L4
 189 00e5 FB 42 00 00 00 00       		mov.L	#.LANCHOR0, r4
 344:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 190                             		.loc 1 344 21
 191 00eb AC 07                   		mov.L	64[r0], r7
 192 00ed BF 83                   		movu.W	60[r0], r3
 193                             	.LVL28:
 194 00ef 03                      		.balign 8,3,1
 195                             	.L3:
 196                             	.LBB17:
 350:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 197                             		.loc 1 350 18
 198 00f0 66 0A                   		mov.L	#0, r10
 199 00f2 61 03                   		cmp	#0, r3
 200 00f4 20 1C                   		beq	.L7
 201 00f6 ED 02 2A                		mov.L	168[r0], r2
 202 00f9 4B 72                   		add	r7, r2
 349:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             while(col_count) 
 203                             		.loc 1 349 27
 204 00fb 66 0A                   		mov.L	#0, r10
 205                             	.LVL29:
 206                             		.balign 8,3,1
 207                             	.L5:
 352:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 col_count--;
 208                             		.loc 1 352 17 is_stmt 1
 352:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 col_count--;
 209                             		.loc 1 352 49 is_stmt 0
 210 00fd 62 17                   		add	#1, r7
 211                             	.LVL30:
 352:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 col_count--;
 212                             		.loc 1 352 42
 213 00ff 71 75 FF                		add	#-1, r7, r5
 352:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 col_count--;
 214                             		.loc 1 352 34
 215 0102 CC 55                   		mov.B	[r5], r5
 352:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 col_count--;
 216                             		.loc 1 352 31
 217 0104 4B 5A                   		add	r5, r10
 218                             	.LVL31:
 353:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 219                             		.loc 1 353 17 is_stmt 1
 350:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 220                             		.loc 1 350 18 is_stmt 0
 221 0106 47 72                   		cmp	r7, r2
 222 0108 21 F5                   		bne	.L5
 223 010a AF 8A                   		mov.L	124[r0], r2
 224 010c 4F 2A                   		mul	r2, r10
 225                             	.LVL32:
 226 010e EF 00                   		.balign 8,3,5
 227                             	.L7:
 355:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             i++;
 228                             		.loc 1 355 13 is_stmt 1
 355:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             i++;
 229                             		.loc 1 355 28 is_stmt 0
 230 0110 FD 22 4A                		mov.L	r10, [r4+]
 356:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         }
 231                             		.loc 1 356 13 is_stmt 1
 232                             	.LBE17:
 346:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 233                             		.loc 1 346 14 is_stmt 0
 234 0113 ED 0A 28                		mov.L	160[r0], r10
 235 0116 47 A4                   		cmp	r10, r4
 236 0118 21 D8                   		bne	.L3
 237                             	.LVL33:
 238                             		.balign 8,3,1
 239                             	.L4:
 361:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 240                             		.loc 1 361 9
 241 011a AE 8F                   		mov.L	108[r0], r7
 242 011c 61 07                   		cmp	#0, r7
 243 011e 3A 2A 02                		beq	.L8
 244 0121 ED 0A 0E                		mov.L	56[r0], r10
 245 0124 61 0A                   		cmp	#0, r10
 246 0126 3A 22 02                		beq	.L8
 247 0129 ED 0A 1D                		mov.L	116[r0], r10
 248 012c 77 2A FF FF 00          		and #0xffff, r10
 249 0131 E7 0A 11                		mov.L	r10, 68[r0]
 250 0134 ED 08 1C                		mov.L	112[r0], r8
 361:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 251                             		.loc 1 361 22
 252 0137 3E 89 00                		mov.L	#0, 100[r0]
 253                             	.LBB18:
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 254                             		.loc 1 367 44
 255 013a ED 07 23                		mov.L	140[r0], r7
 256 013d 77 27 FF FF 00          		and #0xffff, r7
 257 0142 A5 8F                   		mov.L	r7, 92[r0]
 258 0144 4F DA                   		mul	r13, r10
 259 0146 E7 0A 06                		mov.L	r10, 24[r0]
 260 0149 ED 0A 26                		mov.L	152[r0], r10
 261 014c DF AA                   		mov.W	r10, r10
 262 014e E7 0A 04                		mov.L	r10, 16[r0]
 263 0151 FC 43 E8                		xchg	r14, r8
 264                             	.LVL34:
 265                             		.balign 8,3,2
 266                             	.L9:
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 267                             		.loc 1 365 40
 268 0154 ED 07 24                		mov.L	144[r0], r7
 269 0157 77 27 FF FF 00          		and #0xffff, r7
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 270                             		.loc 1 365 30
 271 015c ED 05 22                		mov.L	136[r0], r5
 272 015f 77 25 FF FF 00          		and #0xffff, r5
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 273                             		.loc 1 365 40
 274 0164 ED 0A 19                		mov.L	100[r0], r10
 275 0167 4F A7                   		mul	r10, r7
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 276                             		.loc 1 365 97
 277 0169 ED 0A 1E                		mov.L	120[r0], r10
 278 016c 77 2A FF FF 00          		and #0xffff, r10
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 279                             		.loc 1 365 30
 280 0171 FF 05 57                		sub	r5, r7, r5
 281 0174 A2 85                   		mov.L	r5, 40[r0]
 282 0176 ED 07 27                		mov.L	156[r0], r7
 283 0179 D7 07 2A                		mov.W	r7, 84[r0]
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 284                             		.loc 1 365 97
 285 017c 4B A5                   		add	r10, r5
 286 017e A0 85                   		mov.L	r5, 8[r0]
 287 0180 ED 0A 0A                		mov.L	40[r0], r10
 288 0183 4F FA                   		mul	r15, r10
 289 0185 E7 0A 12                		mov.L	r10, 72[r0]
 290                             	.LBE18:
 363:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 291                             		.loc 1 363 26
 292 0188 3E 07 00                		mov.L	#0, 28[r0]
 293                             	.LBB19:
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 294                             		.loc 1 367 34
 295 018b ED 07 21                		mov.L	132[r0], r7
 296 018e 77 27 FF FF 00          		and #0xffff, r7
 297 0193 A6 07                   		mov.L	r7, 96[r0]
 298                             	.LVL35:
 299                             		.balign 8,3,1
 300                             	.L29:
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 301                             		.loc 1 365 17 is_stmt 1
 302 0195 AA 87                   		mov.L	40[r0], r7
 303 0197 ED 0A 02                		mov.L	8[r0], r10
 304 019a 47 A7                   		cmp	r10, r7
 305 019c 28 7E                   		bge	.L23
 306 019e EF 7B                   		mov.L	r7, r11
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 307                             		.loc 1 367 44 is_stmt 0
 308 01a0 ED 0C 17                		mov.L	92[r0], r12
 309 01a3 ED 0A 07                		mov.L	28[r0], r10
 310 01a6 4F AC                   		mul	r10, r12
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 311                             		.loc 1 367 101
 312 01a8 AC 87                   		mov.L	72[r0], r7
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 313                             		.loc 1 367 34
 314 01aa ED 0A 18                		mov.L	96[r0], r10
 315 01ad 43 AC                   		sub	r10, r12
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 316                             		.loc 1 367 101
 317 01af EC 09                   		mov.L	[r0], r9
 318 01b1 AC 0C                   		mov.L	68[r0], r4
 319 01b3 4B C4                   		add	r12, r4
 320 01b5 66 06                   		mov.L	#0, r6
 321 01b7 FC 17 46                		min	r4, r6
 322 01ba E7 0E 01                		mov.L	r14, 4[r0]
 323 01bd EF 7E                   		mov.L	r7, r14
 324                             	.LVL36:
 325 01bf 03                      		.balign 8,3,1
 326                             	.L22:
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 327                             		.loc 1 367 21 is_stmt 1
 328 01c0 47 4C                   		cmp	r4, r12
 329 01c2 28 4A                   		bge	.L13
 330 01c4 A9 0F                   		mov.L	20[r0], r7
 331 01c6 EF 9A                   		mov.L	r9, r10
 332 01c8 47 B7                   		cmp	r11, r7
 333 01ca EF C7                   		mov.L	r12, r7
 334 01cc 24 05 38 E3 00          		bleu	.L14
 335 01d1 61 0C                   		cmp	#0, r12
 336 01d3 28 05 38 00 01          		blt	.L16
 337                             	.LVL37:
 338                             		.balign 8,3,2
 339                             	.L15:
 340 01d8 FF 25 E7                		add	r14, r7, r5
 341 01db 4F D5                   		mul	r13, r5
 342 01dd 06 89 05 08             		add	32[r0], r5
 343 01e1 2E 10                   		bra	.L20
 344                             	.LVL38:
 345                             	.L53:
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 346                             		.loc 1 373 29 is_stmt 0
 347 01e3 CF 82                   		mov.B	r8, r2
 348 01e5 7F 88                   		sstr.b
 349                             	.LVL39:
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 350                             		.loc 1 382 25 is_stmt 1
 368:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 351                             		.loc 1 368 33 is_stmt 0
 352 01e7 62 17                   		add	#1, r7
 353                             	.LVL40:
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 354                             		.loc 1 382 36
 355 01e9 4B DA                   		add	r13, r10
 356                             	.LVL41:
 357 01eb 4B D5                   		add	r13, r5
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 358                             		.loc 1 367 21
 359 01ed 47 47                   		cmp	r4, r7
 360 01ef 28 19                   		bge	.L21
 361                             	.LVL42:
 362                             		.balign 8,3,1
 363                             	.L20:
 370:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 364                             		.loc 1 370 25 is_stmt 1
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 365                             		.loc 1 373 29
 366 01f1 EF A1                   		mov.L	r10, r1
 367 01f3 EF D3                   		mov.L	r13, r3
 370:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 368                             		.loc 1 370 78 is_stmt 0
 369 01f5 47 F7                   		cmp	r15, r7
 370 01f7 28 EC                   		bge	.L53
 371                             	.LVL43:
 379:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 372                             		.loc 1 379 29 is_stmt 1
 373 01f9 EF 52                   		mov.L	r5, r2
 374 01fb 7F 8F                   		smovf
 375                             	.LVL44:
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 376                             		.loc 1 382 25
 368:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 377                             		.loc 1 368 33 is_stmt 0
 378 01fd 62 17                   		add	#1, r7
 379                             	.LVL45:
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 380                             		.loc 1 382 36
 381 01ff 4B DA                   		add	r13, r10
 382                             	.LVL46:
 383 0201 4B D5                   		add	r13, r5
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 384                             		.loc 1 367 21
 385 0203 47 47                   		cmp	r4, r7
 386 0205 29 EC                   		blt	.L20
 387 0207 03                      		.balign 8,3,1
 388                             	.L21:
 389 0208 06 89 09 06             		add	24[r0], r9
 390                             	.LVL47:
 391                             		.balign 8,3,1
 392                             	.L13:
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 393                             		.loc 1 365 116 discriminator 2
 394 020c 62 1B                   		add	#1, r11
 395                             	.LVL48:
 396 020e 4B FE                   		add	r15, r14
 365:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 397                             		.loc 1 365 17 discriminator 2
 398 0210 ED 0A 02                		mov.L	8[r0], r10
 399 0213 47 AB                   		cmp	r10, r11
 400 0215 21 AB                   		bne	.L22
 401 0217 ED 0E 01                		mov.L	4[r0], r14
 402                             	.LVL49:
 403                             		.balign 8,3,1
 404                             	.L23:
 387:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int32_t *out_mult = output_mult;
 405                             		.loc 1 387 17 is_stmt 1
 388:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int16_t activation_min = out_activation_min;
 406                             		.loc 1 388 17
 389:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int16_t activation_max = out_activation_max;
 407                             		.loc 1 389 17
 390:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int32_t *bias = bias_data;
 408                             		.loc 1 390 17
 391:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const q7_t *ip_a0 = filter_data;
 409                             		.loc 1 391 17
 392:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const q31_t *in_offset = a_in_offset;
 410                             		.loc 1 392 17
 393:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 411                             		.loc 1 393 17
 395:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 row_count = output_ch;
 412                             		.loc 1 395 17
 396:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 413                             		.loc 1 396 17
 398:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 414                             		.loc 1 398 17
 398:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 415                             		.loc 1 398 22 is_stmt 0
 416 021a AA 0F                   		mov.L	36[r0], r7
 417 021c 61 07                   		cmp	#0, r7
 418 021e 3A 05 01                		beq	.L12
 419 0221 EF 7A                   		mov.L	r7, r10
 420 0223 DD 07 2A                		mov.W	84[r0], r7
 421 0226 4B EA                   		add	r14, r10
 422 0228 E7 0A 01                		mov.L	r10, 4[r0]
 392:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const q31_t *in_offset = a_in_offset;
 423                             		.loc 1 392 29
 424 022b ED 0A 10                		mov.L	64[r0], r10
 391:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const q7_t *ip_a0 = filter_data;
 425                             		.loc 1 391 32
 426 022e ED 09 16                		mov.L	88[r0], r9
 388:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int16_t activation_min = out_activation_min;
 427                             		.loc 1 388 32
 428 0231 ED 0C 13                		mov.L	76[r0], r12
 387:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 const int32_t *out_mult = output_mult;
 429                             		.loc 1 387 32
 430 0234 ED 0B 14                		mov.L	80[r0], r11
 393:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 431                             		.loc 1 393 30
 432 0237 FB 52 00 00 00 00       		mov.L	#.LANCHOR0, r5
 433 023d E7 0F 0B                		mov.L	r15, 44[r0]
 434 0240 E7 0D 0C                		mov.L	r13, 48[r0]
 435 0243 E7 07 2B                		mov.L	r7, 172[r0]
 436 0246 E7 08 0D                		mov.L	r8, 52[r0]
 437 0249 DD 08 1E                		mov.W	60[r0], r8
 438                             	.LVL50:
 439                             		.balign 8,3,3
 440                             	.L24:
 441                             	.LBB10:
 400:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 442                             		.loc 1 400 21 is_stmt 1
 402:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 443                             		.loc 1 402 21
 402:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 444                             		.loc 1 402 27 is_stmt 0
 445 024c FD 2A 97                		mov.L	[r9+], r7
 446                             	.LVL51:
 402:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 447                             		.loc 1 402 60
 448 024f 71 5D 04                		add	#4, r5, r13
 449                             	.LVL52:
 402:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 450                             		.loc 1 402 27
 451 0252 06 88 57                		add	[r5].L, r7
 452                             	.LVL53:
 404:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #if defined __CCRX__ || defined __CCRL__
 453                             		.loc 1 404 21 is_stmt 1
 409:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                                 "mov.l %2, r2\n"
 454                             		.loc 1 409 21
 455 0255 EC 0F                   		mov.L	[r0], r15
 456                             	 ; 409 "../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c" 1
 457 0257 EF A1                   		mov.l r10, r1
 458 0259 EF F2                   	mov.l r15, r2
 459 025b EF 83                   	mov.l r8, r3
 460 025d EF 74                   	mov.l r7, r4
 461 025f 7F 8C                   	rmpa.b
 462 0261 EF 47                   	mov.l r4, r7
 463 0263 EF 1A                   	mov.l r1, r10
 464                             	
 465                             	 ; 0 "" 2
 466                             	.LVL54:
 420:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 += out_offset;
 467                             		.loc 1 420 34 is_stmt 0
 468 0265 FD 2A B5                		mov.L	[r11+], r5
 469                             	.LVL55:
 420:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 += out_offset;
 470                             		.loc 1 420 21 is_stmt 1
 471                             	.LBB11:
 472                             	.LBB12:
 473                             		.file 2 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CMS
   1:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /*
   2:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Copyright (C) 2010-2021 Arm Limited or its affiliates. All rights reserved.
   3:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   4:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * SPDX-License-Identifier: Apache-2.0
   5:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
   6:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
   7:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * not use this file except in compliance with the License.
   8:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * You may obtain a copy of the License at
   9:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  10:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * www.apache.org/licenses/LICENSE-2.0
  11:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  12:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Unless required by applicable law or agreed to in writing, software
  13:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  14:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * See the License for the specific language governing permissions and
  16:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * limitations under the License.
  17:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  18:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  19:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**************************************************************************************************
  20:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * DISCLAIMER
  21:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
  22:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
  23:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * applicable laws, including copyright laws. 
  24:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
  25:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
  26:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
  27:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  28:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  29:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  30:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  31:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * of this software. 
  32:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * 
  33:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * arm_nn_requantize updated for RX devices.
  34:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** * Copyright (C) 2022 Renesas Electronics Corporation. All rights reserved.
  35:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** ***************************************************************************************************
  36:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  37:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /* ----------------------------------------------------------------------
  38:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Project:      CMSIS NN Library
  39:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Title:        arm_nnsupportfunctions.h
  40:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Description:  Public header file of support functions for CMSIS NN Library
  41:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  42:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Date:        15. April 2021
  43:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * $Revision:    V.5.5.0
  44:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  45:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Target Processor:  Cortex-M CPUs
  46:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * -------------------------------------------------------------------- */
  47:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  48:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef _ARM_NNSUPPORTFUNCTIONS_H_
  49:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define _ARM_NNSUPPORTFUNCTIONS_H_
  50:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  51:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_common_tables.h"
  52:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #include "arm_math_types.h"
  53:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  54:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifdef __cplusplus
  55:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** extern "C" {
  56:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
  57:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  58:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define LEFT_SHIFT(_shift) (_shift > 0 ? _shift : 0)
  59:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define RIGHT_SHIFT(_shift) (_shift > 0 ? 0 : -_shift)
  60:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_ZERO(x) (x) == 0 ? ~0 : 0
  61:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MASK_IF_NON_ZERO(x) (x) != 0 ? ~0 : 0
  62:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define SELECT_USING_MASK(mask, a, b) ((mask) & (a)) ^ (~(mask) & (b))
  63:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  64:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MAX(A, B) ((A) > (B) ? (A) : (B))
  65:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MIN(A, B) ((A) < (B) ? (A) : (B))
  66:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define CLAMP(x, h, l) MAX(MIN((x), (h)), (l))
  67:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  68:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  69:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for SIMD access of q31/q15/q7 types
  70:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  71:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nnword
  72:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  73:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t word;
  74:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q31 type */
  75:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q15_t half_words[2];
  76:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q15 type */
  77:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q7_t bytes[4];
  78:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     /**< q7 type */
  79:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  80:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  81:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  82:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Union for data type long long
  83:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
  84:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** struct arm_nn_double
  85:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  86:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     uint32_t low;
  87:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t high;
  88:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  89:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  90:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** union arm_nn_long_long
  91:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
  92:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int64_t long_long;
  93:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     struct arm_nn_double word;
  94:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** };
  95:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
  96:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
  97:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup nndata_convert Neural Network Data Conversion Functions
  98:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
  99:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Perform data type conversion in-between neural network operations
 100:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 101:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 102:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 103:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 104:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to q15 vector without left-shift
 105:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 106:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 107:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 108:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 109:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 110:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 111:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 112:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 113:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Non-saturating addition of elements of a q7 vector
 114:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *input Pointer to the q7 input vector
 115:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *output Pointer to the q31 output variable.
 116:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 117:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 118:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 119:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * 2^24 samples can be added without saturating the result.
 120:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 121:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 122:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 123:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 124:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  sum = input[0] + input[1] + .. + input[block_size -1]
 125:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 126:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 127:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * */
 128:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_add_q7(const q7_t *input, q31_t *output, uint32_t block_size);
 129:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 130:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 131:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief  Converts the elements of the q7 vector to reordered q15 vector without left-shift
 132:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrc points to the q7 input vector
 133:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst points to the q15 output vector
 134:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize length of the input vector
 135:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 136:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 137:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 138:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_no_shift(const q7_t *pSrc, q15_t *pDst, uint32_t blockSize);
 139:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 140:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 141:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector to a q15 vector with an added offset
 142:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    src        pointer to the q7 input vector
 143:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   dst        pointer to the q15 output vector
 144:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 145:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    offset     q7 offset to be added to each input vector element.
 146:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 147:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 148:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 149:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 150:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 151:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 152:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] = (q15_t) src[n] + offset;   0 <= n < block_size.
 153:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 154:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 155:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 156:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset);
 157:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 158:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 159:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements of the q7 vector to reordered q15 vector with an added offset
 160:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       src        pointer to the q7 input vector
 161:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      dst        pointer to the q15 output vector
 162:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size length of the input vector
 163:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset     offset to be added to each input vector element.
 164:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 165:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 166:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details  This function does the q7 to q15 expansion with re-ordering of bytes. Re-ordering is a
 167:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *           the sign extension intrinsic(DSP extension). The tail (i.e., last (N % 4) elements) re
 168:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * original order.
 169:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 170:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 171:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_q7_to_q15_reordered_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t of
 172:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 173:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 174:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Converts the elements from a q7 vector and accumulate to a q15 vector
 175:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    *src       points to the q7 input vector
 176:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   *dst       points to the q15 output vector
 177:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    block_size length of the input vector
 178:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 179:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par Description:
 180:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 181:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The equation used for the conversion process is:
 182:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 183:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <pre>
 184:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  dst[n] += (q15_t) src[n] ;   0 <= n < block_size.
 185:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * </pre>
 186:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 187:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 188:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_accumulate_q7_to_q15(q15_t *dst, const q7_t *src, uint32_t block_size);
 189:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 190:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 191:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise conv on an im2col buffer where the input channel equals output channel.
 192:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    row     pointer to row
 193:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    col     pointer to im2col buffer, always consists of 2 columns.
 194:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    num_ch   number of channels
 195:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_shift  pointer to per output channel requantization shift parameter.
 196:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_mult   pointer to per output channel requantization multiplier parameter.
 197:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    out_offset      output tensor offset.
 198:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_min   minimum value to clamp the output to. Range : int8
 199:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    activation_max   maximum value to clamp the output to. Range : int8
 200:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    kernel_size   number of elements in one column.
 201:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]    output_bias per output channel bias. Range : int32
 202:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]   out         pointer to output
 203:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 204:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 205:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 206:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 207:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details     Supported framework: TensorFlow Lite micro.
 208:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 209:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_s8_core(const q7_t *row,
 210:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q15_t *col,
 211:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 212:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 213:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 214:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 215:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 216:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 217:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t kernel_size,
 218:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 219:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 220:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 221:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 222:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 223:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_row    pointer to row operand
 224:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       input_col    pointer to col operand
 225:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_ch    number of rows of input_row
 226:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_batches  number of column batches. Range: 1 to 4
 227:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_shift  pointer to per output channel requantization shift parameter.
 228:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       output_mult   pointer to per output channel requantization multiplier parameter
 229:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_offset    output tensor offset.
 230:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_offset    input tensor(col) offset.
 231:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_offset    kernel offset(row). Not used.
 232:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_min   minimum value to clamp the output to. Range : int8
 233:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_activation_max   maximum value to clamp the output to. Range : int8
 234:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_len       number of elements in each row
 235:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       bias          per output channel bias. Range : int32
 236:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in,out]   out           pointer to output
 237:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns one of the two
 238:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              1. The incremented output pointer for a successful operation or
 239:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *              2. NULL if implementation is not available.
 240:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 241:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details   Supported framework: TensorFlow Lite
 242:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 243:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_mat_mult_s8(const q7_t *input_row,
 244:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const q7_t *input_col,
 245:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t output_ch,
 246:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t col_batches,
 247:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_shift,
 248:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *output_mult,
 249:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t out_offset,
 250:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t col_offset,
 251:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t row_offset,
 252:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_min,
 253:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int16_t out_activation_max,
 254:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const uint16_t row_len,
 255:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          const int32_t *const bias,
 256:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                          q7_t *out);
 257:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 258:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 259:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for one row & one column
 260:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 261:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 262:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 263:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 264:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result of multiply-accumulate
 265:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column.
 266:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 267:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 268:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      *output = 0
 269:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 270:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 271:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          *output += row_base[i] * col_base[i]
 272:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 273:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 274:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 275:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_1x_s8(int32_t row_elements,
 276:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 277:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 278:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 279:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 280:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 281:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 282:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication without requantization for four rows and one column
 283:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_elements  number of row elements
 284:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       offset        offset between rows. Can be the same as row_elements.
 285:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                For e.g, in a 1x1 conv scenario with stride as 1.
 286:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_base      pointer to row operand
 287:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       col_base      pointer to col operand
 288:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      sum_col       pointer to store sum of column elements
 289:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      output        pointer to store result(4 int32's) of multiply-accumulate
 290:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns the multiply-accumulated result of the row by column
 291:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 292:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @details Pseudo-code
 293:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[0] = 0
 294:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *         ..
 295:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      output[3] = 0
 296:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      sum_col = 0
 297:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *      for (i = 0; i < row_elements; i++)
 298:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[0] += row_base[i] * col_base[i]
 299:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                ..
 300:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          output[3] += row_base[i + (row_elements * 3)] * col_base[i]
 301:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *          sum_col += col_base[i]
 302:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 303:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mul_core_4x_s8(const int32_t row_elements,
 304:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int32_t offset,
 305:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *row_base,
 306:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      const int8_t *col_base,
 307:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const sum_col,
 308:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                      int32_t *const output);
 309:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 310:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 311:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief General Matrix-multiplication function with per-channel requantization.
 312:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        This function assumes:
 313:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - LHS input matrix NOT transposed (nt)
 314:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        - RHS input matrix transposed (t)
 315:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 316:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *  @note This operation also performs the broadcast bias addition before the requantization
 317:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 318:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs                Pointer to the LHS input matrix
 319:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs                Pointer to the RHS input matrix
 320:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  bias               Pointer to the bias vector. The length of this vector is equal to
 321:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * output columns (or RHS input rows)
 322:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out] dst                Pointer to the output matrix with "m" rows and "n" columns
 323:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_multipliers    Pointer to the multipliers vector needed for the per-channel requ
 324:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                The length of this vector is equal to the number of output column
 325:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * rows)
 326:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_shifts         Pointer to the shifts vector needed for the per-channel requantiz
 327:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * of this vector is equal to the number of output columns (or RHS input rows)
 328:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_rows           Number of LHS input rows
 329:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_rows           Number of RHS input rows
 330:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  rhs_cols           Number of LHS/RHS input columns
 331:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  lhs_offset         Offset to be applied to the LHS input value
 332:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  dst_offset         Offset to be applied the output result
 333:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_min     Minimum value to clamp down the output. Range : int8
 334:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]  activation_max     Maximum value to clamp up the output. Range : int8
 335:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 336:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return     The function returns <code>ARM_MATH_SUCCESS</code>
 337:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 338:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 339:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_mat_mult_nt_t_s8(const q7_t *lhs,
 340:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q7_t *rhs,
 341:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const q31_t *bias,
 342:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    q7_t *dst,
 343:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_multipliers,
 344:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t *dst_shifts,
 345:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_rows,
 346:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_rows,
 347:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t rhs_cols,
 348:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t lhs_offset,
 349:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t dst_offset,
 350:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_min,
 351:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                    const int32_t activation_max);
 352:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 353:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 354:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication
 355:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 356:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 357:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 358:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      bias            Input bias
 359:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 360:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side vec
 361:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 Range: -127 to 128
 362:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 363:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_offset      Offset to be added to the output values. Range: -127 to 128
 364:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 365:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 366:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 367:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 368:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 369:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 370:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 371:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 372:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 373:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 374:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_s8(const q7_t *lhs,
 375:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 376:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q31_t *bias,
 377:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *dst,
 378:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 379:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_offset,
 380:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_offset,
 381:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_multiplier,
 382:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t dst_shift,
 383:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_cols,
 384:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t rhs_rows,
 385:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 386:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max);
 387:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 388:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 389:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief s8 Vector by Matrix (transposed) multiplication with s16 output
 390:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 391:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side vector
 392:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 393:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]     dst             Output vector
 394:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      Offset to be added to the input values of the left-hand side
 395:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 vector. Range: -127 to 128
 396:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_offset      Not used
 397:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      scatter_offset  Address offset for dst. First output is stored at 'dst', the
 398:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                                 second at 'dst + scatter_offset' and so on.
 399:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_multiplier  Output multiplier
 400:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      dst_shift       Output shift
 401:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_cols        Number of columns in the right-hand side input matrix
 402:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs_rows        Number of rows in the right-hand side input matrix
 403:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int16
 404:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int16
 405:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 406:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns <code>ARM_MATH_SUCCESS</code>
 407:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 408:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 409:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** arm_status arm_nn_vec_mat_mult_t_svdf_s8(const q7_t *lhs,
 410:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const q7_t *rhs,
 411:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          q15_t *dst,
 412:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t lhs_offset,
 413:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_offset,
 414:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t scatter_offset,
 415:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_multiplier,
 416:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t dst_shift,
 417:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_cols,
 418:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t rhs_rows,
 419:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_min,
 420:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                          const int32_t activation_max);
 421:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 422:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 423:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in padded 
 424:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        the padding is -lhs_offset(Range: int8). Dimensions are the same for lhs and rhs.
 425:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 426:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 427:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 428:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 429:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 430:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 431:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 432:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 433:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 434:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 435:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 436:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 437:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 438:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 439:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 440:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 441:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 442:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 443:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 444:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 445:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 446:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 447:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 448:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 449:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 450:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_padded_s8(const q7_t *lhs,
 451:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const q7_t *rhs,
 452:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t lhs_offset,
 453:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t num_ch,
 454:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_shift,
 455:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *out_mult,
 456:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t out_offset,
 457:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_min,
 458:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t activation_max,
 459:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const uint16_t row_x_col,
 460:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            const int32_t *const output_bias,
 461:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                            q7_t *out);
 462:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 463:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 464:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief Depthwise convolution of transposed rhs matrix with 4 lhs matrices. To be used in non-pad
 465:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *        Dimensions are the same for lhs and rhs.
 466:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 467:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs             Input left-hand side matrix
 468:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      rhs             Input right-hand side matrix (transposed)
 469:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      lhs_offset      LHS matrix offset(input offset). Range: -127 to 128
 470:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      num_ch          Number of channels in LHS/RHS
 471:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_shift       Per channel output shift. Length of vector is equal to number of
 472:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_mult        Per channel output multiplier. Length of vector is equal to numb
 473:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out_offset      Offset to be added to the output values. Range: -127 to 128
 474:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_min  Minimum value to clamp the output to. Range: int8
 475:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      activation_max  Maximum value to clamp the output to. Range: int8
 476:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       row_x_col       (row_dimension * col_dimension) of LHS/RHS matrix
 477:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      output_bias     Per channel output bias. Length of vector is equal to number of 
 478:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]      out             Output pointer
 479:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 480:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return         The function returns one of the two
 481:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Updated output pointer if an implementation is available
 482:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - NULL if no implementation is available.
 483:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 484:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note           If number of channels is not a multiple of 4, upto 3 elements outside the bounda
 485:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * out for the following.
 486:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output shift
 487:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output multiplier
 488:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - Output bias
 489:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  - rhs
 490:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 491:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** q7_t *arm_nn_depthwise_conv_nt_t_s8(const q7_t *lhs,
 492:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const q7_t *rhs,
 493:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t lhs_offset,
 494:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t num_ch,
 495:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_shift,
 496:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *out_mult,
 497:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t out_offset,
 498:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_min,
 499:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t activation_max,
 500:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const uint16_t row_x_col,
 501:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     const int32_t *const output_bias,
 502:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                                     q7_t *out);
 503:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 504:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 505:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 elements and post increment pointer.
 506:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   Pointer to pointer that holds address of input.
 507:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 508:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 509:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
 510:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 511:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 512:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 513:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q15, 4);
 514:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q15 += 2;
 515:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 516:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 517:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 518:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 519:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 520:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 from q7 pointer and post increment pointer.
 521:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       Pointer to pointer that holds address of input.
 522:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 523:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 524:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
 525:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 526:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 527:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, *in_q7, 4);
 528:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *in_q7 += 4;
 529:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 530:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 531:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 532:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 533:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 534:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 2 q15 from q15 pointer.
 535:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q15   pointer to address of input.
 536:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 537:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 538:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q15x2(const q15_t *in_q15)
 539:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 540:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 541:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q15, 4);
 542:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 543:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 544:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 545:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 546:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 547:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @brief         Read 4 q7 values.
 548:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @param[in]     in_q7       pointer to address of input.
 549:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****   @return        q31 value
 550:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 551:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
 552:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 553:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t val;
 554:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memcpy(&val, in_q7, 4);
 555:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 556:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return (val);
 557:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 558:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 559:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 560:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           memset optimized for MVE
 561:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in, out]  dst         Destination pointer
 562:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to set
 563:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       block_size  Number of bytes to copy.
 564:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 565:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 566:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE void arm_memset_q7(q7_t *dst, const q7_t val, uint32_t block_size)
 567:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 568:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_MVEI)
 569:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     __asm volatile("   vdup.8                  q0, %[set_val]             \n"
 570:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   wlstp.8                 lr, %[cnt], 1f             \n"
 571:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "2:                                                    \n"
 572:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   vstrb.8                 q0, [%[in]], 16            \n"
 573:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "   letp                    lr, 2b                     \n"
 574:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    "1:                                                    \n"
 575:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ in ] "+r"(dst)
 576:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : [ cnt ] "r"(block_size), [ set_val ] "r"(val)
 577:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                    : "q0", "memory", "r14");
 578:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 579:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     memset(dst, val, block_size);
 580:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 581:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 582:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 583:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(ARM_MATH_DSP)
 584:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 585:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 586:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words
 587:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 588:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 589:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad(const q7_t *source, q31_t *out1, q31_t *out2)
 590:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 591:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 592:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 593:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inAbuf2 = __SXTB16(inA);
 594:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 595:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 596:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 597:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 598:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 599:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 600:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 601:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 602:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 603:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 604:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 605:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 606:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 607:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering
 608:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 609:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 610:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out
 611:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 612:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 613:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 614:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 615:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 616:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 617:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 618:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 619:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 620:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 621:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 622:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 623:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 624:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 625:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief read and expand one q7 word into two q15 words with reordering and add an offset
 626:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 627:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE const q7_t *
 628:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** read_and_pad_reordered_with_offset(const q7_t *source, q31_t *out1, q31_t *out2, q31_t offset)
 629:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 630:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t inA = arm_nn_read_q7x4_ia(&source);
 631:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 632:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_MATH_BIG_ENDIAN
 633:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 634:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(inA);
 635:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 636:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
 637:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __SXTB16(inA);
 638:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 639:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out1 = __QADD16(*out1, offset);
 640:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     *out2 = __QADD16(*out2, offset);
 641:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 642:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return source;
 643:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 644:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 645:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 646:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 647:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 648:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @defgroup NNBasicMath Basic Math Functions for Neural Network Computation
 649:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 650:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Basic Math Functions for Neural Network Computation
 651:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 652:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 653:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 654:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 655:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 656:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 657:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 658:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 659:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 660:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 661:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 662:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 663:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 664:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 665:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 666:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q15 range [0x8000 0x7FFF] will be saturated.
 667:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 668:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 669:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q15(q15_t *pSrcA, q15_t *pSrcB, q15_t *pDst, const uint16_t out_shift, uint32_t bl
 670:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 671:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 672:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           q7 vector multiplication with variable output shifts
 673:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcA        pointer to the first input vector
 674:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       *pSrcB        pointer to the second input vector
 675:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[out]      *pDst         pointer to the output vector
 676:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       out_shift     amount of right-shift for output
 677:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       blockSize     number of samples in each vector
 678:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return none.
 679:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 680:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * <b>Scaling and Overflow Behavior:</b>
 681:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * \par
 682:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * The function uses saturating arithmetic.
 683:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * Results outside of the allowable q7 range [0x80 0x7F] will be saturated.
 684:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 685:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 686:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** void arm_nn_mult_q7(q7_t *pSrcA, q7_t *pSrcB, q7_t *pDst, const uint16_t out_shift, uint32_t blockS
 687:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 688:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 689:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief macro for adding rounding offset
 690:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 691:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #ifndef ARM_NN_TRUNCATE
 692:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) ((0x1u << out_shift) >> 1)
 693:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #else
 694:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define NN_ROUND(out_shift) 0
 695:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #endif
 696:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 697:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** // Macros for shortening quantization functions' names and avoid long lines
 698:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT(a, b) arm_nn_doubling_high_mult((a), (b))
 699:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_SAT_MVE(a, b) arm_doubling_high_mult_mve_32x4((a), (b))
 700:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define MUL_POW2(a, b) arm_nn_mult_by_power_of_two((a), (b))
 701:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 702:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2(a, b) arm_nn_divide_by_power_of_two((a), (b))
 703:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define DIV_POW2_MVE(a, b) arm_divide_by_power_of_two_mve((a), (b))
 704:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 705:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define EXP_ON_NEG(x) arm_nn_exp_on_negative_values((x))
 706:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #define ONE_OVER1(x) arm_nn_one_over_one_plus_x_for_x_in_0_1((x))
 707:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 708:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 709:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Saturating doubling high multiply. Result matches
 710:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  NEON instruction VQRDMULH.
 711:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 712:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier. Range: {Q31_MIN, Q31_MAX}
 713:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 714:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 715:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 716:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult(const q31_t m1, const q31_t m2)
 717:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 718:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 719:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 720:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q63_t mult = 1 << 30;
 721:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 722:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 < 0) ^ (m2 < 0))
 723:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 724:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         mult = 1 - mult;
 725:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 726:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 727:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult = mult + (q63_t)m1 * m2;
 728:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 729:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 730:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 731:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult / (1ll << 31));
 732:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 733:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 734:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 735:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result = Q31_MAX;
 736:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 737:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 738:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 739:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 740:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 741:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Doubling high multiply without saturation. This is intended
 742:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  for requantization where the scale is a positive integer
 743:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 744:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m1        Multiplicand. Range: {Q31_MIN, Q31_MAX}
 745:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       m2        Multiplier Range: {Q31_MIN, Q31_MAX}
 746:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Result of multiplication.
 747:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @note            The result of this matches that of neon instruction
 748:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  VQRDMULH for m1 in range {Q31_MIN, Q31_MAX} and m2 in
 749:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  range {Q31_MIN + 1, Q31_MAX}. Saturation occurs when
 750:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  m1 equals m2 equals Q31_MIN and that is not handled by
 751:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                  this function.
 752:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 753:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 754:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
 755:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 756:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 757:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     union arm_nn_long_long mult;
 758:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 759:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Rounding offset to add for a right shift of 31
 760:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.low = 1 << 30;
 761:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.word.high = 0;
 762:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 763:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Gets resolved as a SMLAL instruction
 764:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     mult.long_long = mult.long_long + (q63_t)m1 * m2;
 765:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 766:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Utilize all of the upper 32 bits. This is the doubling step
 767:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // as well.
 768:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = (int32_t)(mult.long_long >> 31);
 769:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 770:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 771:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 772:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 773:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 774:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Rounding divide by power of two.
 775:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       dividend - Dividend
 776:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       exponent - Divisor = power(2, exponent)
 777:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *                             Range: [0, 31]
 778:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Rounded result of division. Midpoint is rounded away from zero.
 779:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 780:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 781:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent
 782:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 783:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t result = 0;
 784:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     const q31_t remainder_mask = (1 << exponent) - 1;
 785:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     int32_t remainder = remainder_mask & dividend;
 786:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 787:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Basic division
 788:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     result = dividend >> exponent;
 789:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 790:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     // Adjust 'result' for rounding (mid point away from zero)
 791:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t threshold = remainder_mask >> 1;
 792:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (result < 0)
 793:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 794:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         threshold++;
 795:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 796:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (remainder > threshold)
 797:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     {
 798:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         result++;
 799:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 800:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 801:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return result;
 802:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** }
 803:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** 
 804:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** /**
 805:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @brief           Requantize a given value.
 806:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       val         Value to be requantized
 807:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       multiplier  multiplier. Range {Q31_MIN + 1, Q32_MAX}
 808:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @param[in]       shift       left or right shift for 'val * multiplier'
 809:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 810:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  * @return          Returns (val * multiplier)/(2 ^ shift)
 811:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  *
 812:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****  */
 813:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** __STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t s
 814:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** {
 815:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h **** #if defined(RX_DSP_INT8)
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t tmp1 = val << LEFT_SHIFT(shift);
 474                             		.loc 2 816 5
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 475                             		.loc 2 817 5 is_stmt 0
 476 0268 FD 2A C3                		mov.L	[r12+], r3
 477                             	.LVL56:
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 478                             		.loc 2 816 25
 479 026b 66 02                   		mov.L	#0, r2
 480 026d FC 13 52                		max	r5, r2
 818:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 819:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "mvfachi #0, a0, %0\n"
 820:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "+r" (tmp1)
 821:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : "r" (multiplier)
 822:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 : );
 823:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     q31_t exponent = RIGHT_SHIFT(shift);
 481                             		.loc 2 823 22
 482 0270 66 04                   		mov.L	#0, r4
 816:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     asm inline ("emula %0, %1, a0\n"
 483                             		.loc 2 816 11
 484 0272 FD 62 27                		shll	r2, r7
 485                             	.LVL57:
 817:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                 "racl #1, a0\n"
 486                             		.loc 2 817 5 is_stmt 1
 487                             	 ; 817 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 488 0275 FD 03 73                		emula r7, r3, a0
 489 0278 FD 19 00                	racl #1, a0
 490 027b FD 1F 07                	mvfachi #0, a0, r7
 491                             	
 492                             	 ; 0 "" 2
 493                             	.LVL58:
 494                             		.loc 2 823 5
 495                             		.loc 2 823 22 is_stmt 0
 496 027e 61 05                   		cmp	#0, r5
 497 0280 2A 05                   		bgt	.L25
 498 0282 FC 07 54                		neg	r5, r4
 499                             		.balign 8,3,1
 500                             	.L25:
 501                             	.LVL59:
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     if (tmp1 < 0) {
 502                             		.loc 2 824 5 is_stmt 1
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 503                             		.loc 2 825 9
 826:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 827:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 828:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "neg %0\n"
 829:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 830:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 831:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 832:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     } else {
 833:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("shlr %1, %0\n"
 504                             		.loc 2 833 9
 824:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****         asm inline ("neg %0\n"
 505                             		.loc 2 824 8 is_stmt 0
 506 0285 61 07                   		cmp	#0, r7
 507 0287 29 68                   		blt	.L54
 508                             		.loc 2 833 9
 509                             	 ; 833 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 510 0289 FD 60 47                		shlr r4, r7
 511 028c FD 74 27 00             	adc #0, r7
 512                             	
 513                             	 ; 0 "" 2
 514                             	.LVL60:
 834:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "adc #0, %0\n"
 835:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "+r" (tmp1)
 836:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : "r" (exponent)
 837:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     : );
 838:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     }
 839:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****     return tmp1;
 515                             		.loc 2 839 5 is_stmt 1
 516                             	.LBE12:
 517                             	.LBE11:
 421:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 518                             		.loc 1 421 21
 421:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 519                             		.loc 1 421 32 is_stmt 0
 520 0290 06 89 07 03             		add	12[r0], r7
 521                             	.LVL61:
 422:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 522                             		.loc 1 422 21 is_stmt 1
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 523                             		.loc 1 425 25 is_stmt 0
 524 0294 62 1E                   		add	#1, r14
 525                             	.LVL62:
 422:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 526                             		.loc 1 422 32
 527 0296 ED 0F 04                		mov.L	16[r0], r15
 528 0299 FC 13 F7                		max	r15, r7
 529                             	.LVL63:
 423:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 530                             		.loc 1 423 21 is_stmt 1
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 531                             		.loc 1 425 21
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 532                             		.loc 1 425 28 is_stmt 0
 533 029c 71 E5 FF                		add	#-1, r14, r5
 423:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 534                             		.loc 1 423 32
 535 029f ED 0F 2B                		mov.L	172[r0], r15
 536 02a2 FC 17 F7                		min	r15, r7
 537                             	.LVL64:
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 538                             		.loc 1 425 30
 539 02a5 C3 57                   		mov.B	r7, [r5]
 427:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 540                             		.loc 1 427 21 is_stmt 1
 541                             	.LVL65:
 542                             	.LBE10:
 398:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 543                             		.loc 1 398 22 is_stmt 0
 544 02a7 A8 0F                   		mov.L	4[r0], r7
 545                             	.LVL66:
 546 02a9 47 E7                   		cmp	r14, r7
 547 02ab 20 6D                   		beq	.L50
 548                             		.balign 8,3,1
 549                             	.L27:
 550 02ad EF D5                   		mov.L	r13, r5
 551 02af 2E 9D                   		bra	.L24
 552                             	.LVL67:
 553                             	.L14:
 370:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 554                             		.loc 1 370 25 is_stmt 1
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 555                             		.loc 1 373 29
 556 02b1 EF A1                   		mov.L	r10, r1
 557 02b3 EF D3                   		mov.L	r13, r3
 558 02b5 CF 82                   		mov.B	r8, r2
 559 02b7 7F 88                   		sstr.b
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 560                             		.loc 1 382 25
 368:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 561                             		.loc 1 368 33 is_stmt 0
 562 02b9 62 17                   		add	#1, r7
 563                             	.LVL68:
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 564                             		.loc 1 382 36
 565 02bb 4B DA                   		add	r13, r10
 566                             	.LVL69:
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 567                             		.loc 1 367 21
 568 02bd 47 47                   		cmp	r4, r7
 569 02bf 3A 49 FF                		beq	.L21
 370:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 570                             		.loc 1 370 25 is_stmt 1
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 571                             		.loc 1 373 29
 572 02c2 EF A1                   		mov.L	r10, r1
 573 02c4 EF D3                   		mov.L	r13, r3
 574 02c6 CF 82                   		mov.B	r8, r2
 575 02c8 7F 88                   		sstr.b
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 576                             		.loc 1 382 25
 368:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 577                             		.loc 1 368 33 is_stmt 0
 578 02ca 62 17                   		add	#1, r7
 579                             	.LVL70:
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 580                             		.loc 1 382 36
 581 02cc 4B DA                   		add	r13, r10
 582                             	.LVL71:
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 583                             		.loc 1 367 21
 584 02ce 47 47                   		cmp	r4, r7
 585 02d0 21 E1                   		bne	.L14
 586 02d2 38 36 FF                		bra	.L21
 587                             	.LVL72:
 588                             	.L16:
 370:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                         {
 589                             		.loc 1 370 25 is_stmt 1
 373:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                             // input_offset is always 128 in this model.
 590                             		.loc 1 373 29
 591 02d5 EF A1                   		mov.L	r10, r1
 592 02d7 EF D3                   		mov.L	r13, r3
 593 02d9 CF 82                   		mov.B	r8, r2
 594 02db 7F 88                   		sstr.b
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 595                             		.loc 1 382 25
 368:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     {
 596                             		.loc 1 368 33 is_stmt 0
 597 02dd 62 17                   		add	#1, r7
 598                             	.LVL73:
 382:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     }
 599                             		.loc 1 382 36
 600 02df 4B DA                   		add	r13, r10
 601                             	.LVL74:
 367:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                          i_ker_x++)
 602                             		.loc 1 367 21
 603 02e1 47 76                   		cmp	r7, r6
 604 02e3 2A F2                   		bgt	.L16
 605 02e5 47 74                   		cmp	r7, r4
 606 02e7 2B 05 38 EF FE          		bgt	.L15
 607 02ec 38 1C FF                		bra	.L21
 608                             	.LVL75:
 609                             	.L54:
 610                             	.LBB15:
 611                             	.LBB14:
 612                             	.LBB13:
 825:C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Include\arm_nnsupportfunctions.h ****                     "shlr %1, %0\n"
 613                             		.loc 2 825 9
 614                             	 ; 825 "C:\Users\a5116938\Desktop\e2_studio_workspace\EEMBC_final\RX65N_Cloud_Kit\src\CMSIS\NN\Incl
 615 02ef 7E 17                   		neg r7
 616 02f1 FD 60 47                	shlr r4, r7
 617 02f4 FD 74 27 00             	adc #0, r7
 618 02f8 7E 17                   	neg r7
 619                             	
 620                             	 ; 0 "" 2
 621                             	.LVL76:
 622                             		.loc 2 839 5 is_stmt 1
 623                             	.LBE13:
 624                             	.LBE14:
 421:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 625                             		.loc 1 421 21
 421:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 626                             		.loc 1 421 32 is_stmt 0
 627 02fa 06 89 07 03             		add	12[r0], r7
 628                             	.LVL77:
 422:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 629                             		.loc 1 422 21 is_stmt 1
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 630                             		.loc 1 425 25 is_stmt 0
 631 02fe 62 1E                   		add	#1, r14
 632                             	.LVL78:
 422:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                     ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 633                             		.loc 1 422 32
 634 0300 ED 0F 04                		mov.L	16[r0], r15
 635                             	.LVL79:
 636 0303 FC 13 F7                		max	r15, r7
 637                             	.LVL80:
 423:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 638                             		.loc 1 423 21 is_stmt 1
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 639                             		.loc 1 425 21
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 640                             		.loc 1 425 28 is_stmt 0
 641 0306 71 E5 FF                		add	#-1, r14, r5
 423:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 642                             		.loc 1 423 32
 643 0309 ED 0F 2B                		mov.L	172[r0], r15
 644 030c FC 17 F7                		min	r15, r7
 645                             	.LVL81:
 425:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 646                             		.loc 1 425 30
 647 030f C3 57                   		mov.B	r7, [r5]
 427:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 }
 648                             		.loc 1 427 21 is_stmt 1
 649                             	.LVL82:
 650                             	.LBE15:
 398:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****                 {
 651                             		.loc 1 398 22 is_stmt 0
 652 0311 A8 0F                   		mov.L	4[r0], r7
 653                             	.LVL83:
 654 0313 47 7E                   		cmp	r7, r14
 655 0315 21 98                   		bne	.L27
 656 0317 03                      		.balign 8,3,1
 657                             	.L50:
 658 0318 ED 0F 0B                		mov.L	44[r0], r15
 659 031b ED 0D 0C                		mov.L	48[r0], r13
 660                             	.LVL84:
 661 031e ED 08 0D                		mov.L	52[r0], r8
 662 0321 EF 7E                   		mov.L	r7, r14
 663                             	.LVL85:
 664                             		.balign 8,3,1
 665                             	.L12:
 430:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             }
 666                             		.loc 1 430 17 is_stmt 1 discriminator 2
 667                             	.LBE19:
 363:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 668                             		.loc 1 363 58 is_stmt 0 discriminator 2
 669 0323 ED 0A 07                		mov.L	28[r0], r10
 670 0326 62 1A                   		add	#1, r10
 671 0328 E7 0A 07                		mov.L	r10, 28[r0]
 672                             	.LVL86:
 363:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****             {
 673                             		.loc 1 363 13 discriminator 2
 674 032b AB 87                   		mov.L	56[r0], r7
 675 032d 47 7A                   		cmp	r7, r10
 676 032f 28 05 38 64 FE          		blt	.L29
 361:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 677                             		.loc 1 361 54 discriminator 2
 678 0334 ED 0A 19                		mov.L	100[r0], r10
 679                             	.LVL87:
 680 0337 62 1A                   		add	#1, r10
 681 0339 E7 0A 19                		mov.L	r10, 100[r0]
 682                             	.LVL88:
 361:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         {
 683                             		.loc 1 361 9 discriminator 2
 684 033c AE 8F                   		mov.L	108[r0], r7
 685 033e 47 7A                   		cmp	r7, r10
 686 0340 28 05 38 12 FE          		blt	.L9
 687 0345 EF 8E                   		mov.L	r8, r14
 688                             	.LVL89:
 689 0347 03                      		.balign 8,3,1
 690                             	.L8:
 485:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         output_data += (output_x * output_y * output_ch);
 691                             		.loc 1 485 9 is_stmt 1
 692                             	.LBE20:
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     {
 693                             		.loc 1 111 55 is_stmt 0
 694 0348 ED 0A 1A                		mov.L	104[r0], r10
 695 034b 62 1A                   		add	#1, r10
 696 034d E7 0A 1A                		mov.L	r10, 104[r0]
 697                             	.LVL90:
 698                             	.LBB21:
 485:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****         output_data += (output_x * output_y * output_ch);
 699                             		.loc 1 485 20
 700 0350 AA 07                   		mov.L	32[r0], r7
 701 0352 06 89 07 25             		add	148[r0], r7
 702 0356 A2 07                   		mov.L	r7, 32[r0]
 703                             	.LVL91:
 704                             		.loc 1 486 9 is_stmt 1
 705                             		.loc 1 486 21 is_stmt 0
 706 0358 ED 0A 1C                		mov.L	112[r0], r10
 707 035b 06 89 0A 29             		add	164[r0], r10
 708 035f E7 0A 1C                		mov.L	r10, 112[r0]
 709                             	.LVL92:
 710                             	.LBE21:
 111:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     {
 711                             		.loc 1 111 5
 712 0362 ED 07 20                		mov.L	128[r0], r7
 713                             	.LVL93:
 714 0365 ED 0A 1A                		mov.L	104[r0], r10
 715                             	.LVL94:
 716 0368 47 A7                   		cmp	r10, r7
 717 036a 3B 74 FD                		bne	.L30
 718                             	.LVL95:
 719                             		.balign 8,3,1
 720                             	.L47:
 487:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     }
 488:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 489:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     /* Return to application */
 490:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     return ARM_MATH_SUCCESS;
 491:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** }
 721                             		.loc 1 491 1
 722 036d 66 01                   		mov.L	#0, r1
 723 036f 3F 6D 3B                		rtsd	#236, r6-r13
 724                             	.LFE82:
 726 0372 74 10 01 00 00 00       		.section	.text.arm_convolve_s8_get_buffer_size,"ax",@progbits
 727                             		.global	_arm_convolve_s8_get_buffer_size
 729                             	_arm_convolve_s8_get_buffer_size:
 730                             	.LFB83:
 492:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** 
 493:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filte
 494:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** {
 731                             		.loc 1 494 1 is_stmt 1
 732                             	.LVL96:
 495:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #if defined(ARM_MATH_DSP)
 496:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 497:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #else
 498:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     (void)input_dims;
 733                             		.loc 1 498 5
 499:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     (void)filter_dims;
 734                             		.loc 1 499 5
 500:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c ****     return 0;
 735                             		.loc 1 500 5
 501:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** #endif
 502:../src/CMSIS/NN/Source/ConvolutionFunctions/arm_convolve_s8.c **** }
 736                             		.loc 1 502 1 is_stmt 0
 737 0000 66 01                   		mov.L	#0, r1
 738                             	.LVL97:
 739 0002 02                      		rts
 740                             	.LFE83:
 742                             		.global	_a_in_offset
 743                             		.section	.bss.a_in_offset,"aw",@nobits
 744                             		.balign 4
 745                             		.set	.LANCHOR0,. + 0
 748                             	_a_in_offset:
 749 0000 00 00 00 00 00 00 00 00 		.zero	256
 749      00 00 00 00 00 00 00 00 
 749      00 00 00 00 00 00 00 00 
 749      00 00 00 00 00 00 00 00 
 749      00 00 00 00 00 00 00 00 
 808                             	.Letext0:
 809                             		.file 3 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\
 810                             		.file 4 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_std
 811                             		.file 5 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock
 812                             		.file 6 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_typ
 813                             		.file 7 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\8.3.0.20
 814                             		.file 8 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reen
 815                             		.file 9 "c:\\gcc for renesas rx 8.3.0.202004-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\include\\math.h"
 816                             		.file 10 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 817                             		.file 11 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
 818                             		.file 12 "C:\\Users\\a5116938\\Desktop\\e2_studio_workspace\\EEMBC_final\\RX65N_Cloud_Kit\\src\\CM
